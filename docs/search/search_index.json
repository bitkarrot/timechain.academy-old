{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"TimeChain.Academy Start learning Bitcoin and Lightning development today! git clone https://github.com/timechain-academy/timechain.academy.git","title":"Home"},{"location":"#timechainacademy","text":"","title":"TimeChain.Academy"},{"location":"#start-learning-bitcoin-and-lightning-development-today","text":"git clone https://github.com/timechain-academy/timechain.academy.git","title":"Start learning Bitcoin and Lightning development today!"},{"location":"COMMANDS/","text":"Mark 305 help print help test test test test test test test test test test test test test test test test test test test test help print help test test test test test test test test test test test test test test test test test test test test help print help test test test test test test test test test test test test test test test test test test test test","title":"Setup"},{"location":"COMMANDS/#mark-305","text":"","title":"Mark 305"},{"location":"COMMANDS/#help-print-help","text":"","title":"help           print help"},{"location":"COMMANDS/#test","text":"","title":"test"},{"location":"COMMANDS/#test_1","text":"","title":"test"},{"location":"COMMANDS/#test_2","text":"","title":"test"},{"location":"COMMANDS/#test_3","text":"","title":"test"},{"location":"COMMANDS/#test-test","text":"","title":"test           test"},{"location":"COMMANDS/#test-test_1","text":"","title":"test           test"},{"location":"COMMANDS/#test-test_2","text":"","title":"test           test"},{"location":"COMMANDS/#test-test_3","text":"","title":"test           test"},{"location":"COMMANDS/#test-test_4","text":"","title":"test            test"},{"location":"COMMANDS/#test-test_5","text":"","title":"test                test"},{"location":"COMMANDS/#test-test_6","text":"","title":"test                    test"},{"location":"COMMANDS/#test-test_7","text":"","title":"test                        test"},{"location":"COMMANDS/#help-print-help_1","text":"","title":"help  print help"},{"location":"COMMANDS/#test_4","text":"","title":"test"},{"location":"COMMANDS/#test_5","text":"","title":"test"},{"location":"COMMANDS/#test_6","text":"","title":"test"},{"location":"COMMANDS/#test_7","text":"","title":"test"},{"location":"COMMANDS/#test-test_8","text":"","title":"test  test"},{"location":"COMMANDS/#test-test_9","text":"","title":"test  test"},{"location":"COMMANDS/#test-test_10","text":"","title":"test  test"},{"location":"COMMANDS/#test-test_11","text":"","title":"test  test"},{"location":"COMMANDS/#test-test_12","text":"","title":"test    test"},{"location":"COMMANDS/#test-test_13","text":"","title":"test        test"},{"location":"COMMANDS/#test-test_14","text":"","title":"test            test"},{"location":"COMMANDS/#test-test_15","text":"","title":"test                test"},{"location":"COMMANDS/#help-print-help_2","text":"","title":"help  print help"},{"location":"COMMANDS/#test_8","text":"","title":"test"},{"location":"COMMANDS/#test_9","text":"","title":"test"},{"location":"COMMANDS/#test_10","text":"","title":"test"},{"location":"COMMANDS/#test_11","text":"","title":"test"},{"location":"COMMANDS/#test-test_16","text":"","title":"test  test"},{"location":"COMMANDS/#test-test_17","text":"","title":"test  test"},{"location":"COMMANDS/#test-test_18","text":"","title":"test  test"},{"location":"COMMANDS/#test-test_19","text":"","title":"test  test"},{"location":"COMMANDS/#test-test_20","text":"","title":"test    test"},{"location":"COMMANDS/#test-test_21","text":"","title":"test        test"},{"location":"COMMANDS/#test-test_22","text":"","title":"test            test"},{"location":"COMMANDS/#test-test_23","text":"","title":"test                test"},{"location":"books/","text":"Library","title":"Index"},{"location":"books/#library","text":"","title":"Library"},{"location":"books/bitcoinbook/","text":"","title":"Index"},{"location":"books/lnbook/","text":"","title":"Index"},{"location":"books/lnbook/CONTRIBUTING/","text":"","title":"CONTRIBUTING"},{"location":"books/lnbook/LICENSE/","text":"","title":"LICENSE"},{"location":"books/python/","text":"Introduction This is the code repository for the Manning Publications book, Tiny Python Projects , by Ken Youens-Clark: https://www.manning.com/books/tiny-python-projects?a_aid=youens&a_bid=b6485d52 http://tinypythonprojects.com/ There is a directory for each chapter of the book. Each directory contains a test.py program you can use with pytest to check that you have written the program correctly. I have included a short README to describe each exercise. If you have problems writing code (or if you would like to support this project!), the book contains details about the skills you need. The testing step is integral to writing and solving these challenges as well as to the methodology of the book. I advocate a \"test-driven development\" mentality where we write tests before we write code. The tests should define what it means for a program to be correct, and then we write programs to satisfy the tests. In this project, I've written all the tests for you, but I also encourage you to write your own functions and tests. You should run the test suite after every change to your program to ensure you are making progress! Videos I've been making videos for each chapter on my YouTube channel: https://www.youtube.com/user/kyclark Here are the videos I've completed so far: Chapter 1: How to write and test a Python program : How to create a Python program, understanding comments and the shebang, how to make a program executable and install into your $PATH, how to write a main() function, add docstrings, format your code, and run tests. Chapter 2: Crow's Nest : How to write a Python program that accepts a single, positional argument and creates a newly formatted output string. Chapter 3: Picnic : Writing a Python program that accepts multiple string arguments and formats the results depending on the number of items. Chapter 4: Jump The Five : Writing a Python program to encode the numerals in a given text using an algorithm called \"Jump The Five.\" Use of a dictionary as a lookup table, characters not in the dictionary remain unchanged. Introduction to encoding/decoding text, basic idea of encryption. Chapter 5: Howler : Writing a Python program that can process input text either from the command line or from a file.The output prints either to STDOUT or to a file. Learning about \"os.path.isfile\", how to \"open\" a file handle for reading/writing, how to read/write the contents of a file. Chapter 6: Word Count : Writing a Python program to emulate the wc (word count) program. Validates and processes multiple file inputs as well as STDIN and creates output of the counts of lines, words, and bytes for each file optionally with a \"total\" if more than one file is provided. Chapter 7: Gashlycrumb : Writing a Python program that processes an input file to build a lookup table (dictionary) that is used with multiple positional arguments to translate to the values from the file. Chapter 8: Apples and Bananas : Writing a Python program to find and replace elements in a string. Exploring multiple ways to write the same idea from for loops to list comprehensions to higher-order functions like map(). Chapter 9: Abuse : Writing a Python program to generate Shakespearean insults by randomly combining some number of adjectives with a randomly chosen noun. Learning about randomness, seeds, testing, how to use triple-quoted strings. Chapter 10: Telephone : Using probabalistic and deterministc approaches to randomly mutating a string. Chapter 11: Bottles of Beer : Writing a Python program to produce the verse to the \"99 Bottles of Beer\" song from a given starting point. Learning to count down, format strings, algorithm design. A focus on writing a function and unit test, exploring ways to incorporate our function to generate the verses from for loops to list comprehensions to map(). Chapter 12: Ransom : Writing a Python program that will randomly capitalize letters in a given piece of text for the nefarious purpose of creating a ransom note. Exploration of for loops, list comprehensions, and the map() function. Chapter 13: Twelve Days of Christmas : Writing a Python program to create the verses for \"The Twelve Days of Christmas\" from a given day. Learning how to write a function and the test for it, then using the function in a list comprehension and a map to generate the output. Chapter 14: The Rhymer : Writing a Python program that can split off any initial consonants from a word and append a list of prefixes to create new rhyming \"words.\" Exploration of regular expressions to handle words with no initial consonants, with one or more leading consonants, and nothing but consonants. Writing a stemmer() function and the test_stemmer() function to understand it. Using list comprehensions with guard statements and how that relates to the filter() function. Chapter 15: The Kentucky Friar : In this chapter we delve further into regular expressions, first learning how to split a string using a regex so we can separate things that look like \"words\" from non-words like punctuation and whitespace. Then we try to identify the word \"you\" (case-insensitive) to turn into \"y'all\" and any 2-syllable words ending in \"-ing\" so we can replace the final \"g\" with an apostrophe so that \"cooking\" becomes \"cookin'\" but \"swing\" would remain \"swing.\" We then apply this to an entire body of text to Kentucky fry the words with amusing results. Chapter 16: The Scrambler : Writing a Python program to find each \"word\" in a body of text and then scramble the letters such that the first and last letters remain in place, then reconstructing the text for output. Using regular expressions to split text, using random.shuffle() and understanding in-place mutation vs returning a new value. Comparing for loops to list comprehensions and the \"map()\" function. Chapter 17: Mad Libs : Writing a Python program to play the classic Mad Libs game. Reading an input file with placeholders for parts of speech like \"adjective\" or \"noun.\" Getting the inputs to replace those from the user interactively via the \"input()\" function or taking them from the command-line arguments. Using regular expressions to find and replace the placeholders. Learning about greedy regex and how to make them not greedy. Using the re.findall() and re.sub() functions. Using sys.exit() to prematurely exit a program with an error message/value. Forking GitHub repo First use the GitHub interface to \"fork\" this repository into your own account. Then do git clone of your repository to get a local copy. Inside that checkout, do: git remote add upstream https://github.com/kyclark/tiny_python_projects.git This will allow you to git pull upstream master in order to get updates. When you create new files, git add/commit/push them to your repository. (Please do not create pull requests on my repository -- unless, of course, you have suggestions for improving my repo!). Copyright \u00a9 Ken Youens-Clark 2019-2020","title":"Introduction"},{"location":"books/python/#introduction","text":"This is the code repository for the Manning Publications book, Tiny Python Projects , by Ken Youens-Clark: https://www.manning.com/books/tiny-python-projects?a_aid=youens&a_bid=b6485d52 http://tinypythonprojects.com/ There is a directory for each chapter of the book. Each directory contains a test.py program you can use with pytest to check that you have written the program correctly. I have included a short README to describe each exercise. If you have problems writing code (or if you would like to support this project!), the book contains details about the skills you need. The testing step is integral to writing and solving these challenges as well as to the methodology of the book. I advocate a \"test-driven development\" mentality where we write tests before we write code. The tests should define what it means for a program to be correct, and then we write programs to satisfy the tests. In this project, I've written all the tests for you, but I also encourage you to write your own functions and tests. You should run the test suite after every change to your program to ensure you are making progress!","title":"Introduction"},{"location":"books/python/#videos","text":"I've been making videos for each chapter on my YouTube channel: https://www.youtube.com/user/kyclark Here are the videos I've completed so far: Chapter 1: How to write and test a Python program : How to create a Python program, understanding comments and the shebang, how to make a program executable and install into your $PATH, how to write a main() function, add docstrings, format your code, and run tests. Chapter 2: Crow's Nest : How to write a Python program that accepts a single, positional argument and creates a newly formatted output string. Chapter 3: Picnic : Writing a Python program that accepts multiple string arguments and formats the results depending on the number of items. Chapter 4: Jump The Five : Writing a Python program to encode the numerals in a given text using an algorithm called \"Jump The Five.\" Use of a dictionary as a lookup table, characters not in the dictionary remain unchanged. Introduction to encoding/decoding text, basic idea of encryption. Chapter 5: Howler : Writing a Python program that can process input text either from the command line or from a file.The output prints either to STDOUT or to a file. Learning about \"os.path.isfile\", how to \"open\" a file handle for reading/writing, how to read/write the contents of a file. Chapter 6: Word Count : Writing a Python program to emulate the wc (word count) program. Validates and processes multiple file inputs as well as STDIN and creates output of the counts of lines, words, and bytes for each file optionally with a \"total\" if more than one file is provided. Chapter 7: Gashlycrumb : Writing a Python program that processes an input file to build a lookup table (dictionary) that is used with multiple positional arguments to translate to the values from the file. Chapter 8: Apples and Bananas : Writing a Python program to find and replace elements in a string. Exploring multiple ways to write the same idea from for loops to list comprehensions to higher-order functions like map(). Chapter 9: Abuse : Writing a Python program to generate Shakespearean insults by randomly combining some number of adjectives with a randomly chosen noun. Learning about randomness, seeds, testing, how to use triple-quoted strings. Chapter 10: Telephone : Using probabalistic and deterministc approaches to randomly mutating a string. Chapter 11: Bottles of Beer : Writing a Python program to produce the verse to the \"99 Bottles of Beer\" song from a given starting point. Learning to count down, format strings, algorithm design. A focus on writing a function and unit test, exploring ways to incorporate our function to generate the verses from for loops to list comprehensions to map(). Chapter 12: Ransom : Writing a Python program that will randomly capitalize letters in a given piece of text for the nefarious purpose of creating a ransom note. Exploration of for loops, list comprehensions, and the map() function. Chapter 13: Twelve Days of Christmas : Writing a Python program to create the verses for \"The Twelve Days of Christmas\" from a given day. Learning how to write a function and the test for it, then using the function in a list comprehension and a map to generate the output. Chapter 14: The Rhymer : Writing a Python program that can split off any initial consonants from a word and append a list of prefixes to create new rhyming \"words.\" Exploration of regular expressions to handle words with no initial consonants, with one or more leading consonants, and nothing but consonants. Writing a stemmer() function and the test_stemmer() function to understand it. Using list comprehensions with guard statements and how that relates to the filter() function. Chapter 15: The Kentucky Friar : In this chapter we delve further into regular expressions, first learning how to split a string using a regex so we can separate things that look like \"words\" from non-words like punctuation and whitespace. Then we try to identify the word \"you\" (case-insensitive) to turn into \"y'all\" and any 2-syllable words ending in \"-ing\" so we can replace the final \"g\" with an apostrophe so that \"cooking\" becomes \"cookin'\" but \"swing\" would remain \"swing.\" We then apply this to an entire body of text to Kentucky fry the words with amusing results. Chapter 16: The Scrambler : Writing a Python program to find each \"word\" in a body of text and then scramble the letters such that the first and last letters remain in place, then reconstructing the text for output. Using regular expressions to split text, using random.shuffle() and understanding in-place mutation vs returning a new value. Comparing for loops to list comprehensions and the \"map()\" function. Chapter 17: Mad Libs : Writing a Python program to play the classic Mad Libs game. Reading an input file with placeholders for parts of speech like \"adjective\" or \"noun.\" Getting the inputs to replace those from the user interactively via the \"input()\" function or taking them from the command-line arguments. Using regular expressions to find and replace the placeholders. Learning about greedy regex and how to make them not greedy. Using the re.findall() and re.sub() functions. Using sys.exit() to prematurely exit a program with an error message/value.","title":"Videos"},{"location":"books/python/#forking-github-repo","text":"First use the GitHub interface to \"fork\" this repository into your own account. Then do git clone of your repository to get a local copy. Inside that checkout, do: git remote add upstream https://github.com/kyclark/tiny_python_projects.git This will allow you to git pull upstream master in order to get updates. When you create new files, git add/commit/push them to your repository. (Please do not create pull requests on my repository -- unless, of course, you have suggestions for improving my repo!).","title":"Forking GitHub repo"},{"location":"books/python/#copyright","text":"\u00a9 Ken Youens-Clark 2019-2020","title":"Copyright"},{"location":"books/python/01_hello/","text":"Chapter 1: Hello, World! https://www.youtube.com/playlist?list=PLhOuww6rJJNP7UvTeF6_tQ1xcubAs9hvO Write a program to enthusiastically greet the world: $ ./hello.py Hello, World! The program should also accept a name given as an optional --name parameter: $ ./hello.py --name Universe Hello, Universe! The program should produce documentation for -h or --help : $ ./hello.py -h usage: hello.py [-h] [-n str] Say hello optional arguments: -h, --help show this help message and exit -n str, --name str The name to greet (default: World) Run pytest -xv test.py (or make test ) to ensure you pass all the tests: $ make test pytest -xv test.py ============================= test session starts ============================== ... collected 4 items test.py::test_exists PASSED [ 25%] test.py::test_usage PASSED [ 50%] test.py::test_default PASSED [ 75%] test.py::test_input PASSED [100%] ============================== 4 passed in 0.41s ===============================","title":"Chapter 1: Hello, World!"},{"location":"books/python/01_hello/#chapter-1-hello-world","text":"https://www.youtube.com/playlist?list=PLhOuww6rJJNP7UvTeF6_tQ1xcubAs9hvO Write a program to enthusiastically greet the world: $ ./hello.py Hello, World! The program should also accept a name given as an optional --name parameter: $ ./hello.py --name Universe Hello, Universe! The program should produce documentation for -h or --help : $ ./hello.py -h usage: hello.py [-h] [-n str] Say hello optional arguments: -h, --help show this help message and exit -n str, --name str The name to greet (default: World) Run pytest -xv test.py (or make test ) to ensure you pass all the tests: $ make test pytest -xv test.py ============================= test session starts ============================== ... collected 4 items test.py::test_exists PASSED [ 25%] test.py::test_usage PASSED [ 50%] test.py::test_default PASSED [ 75%] test.py::test_input PASSED [100%] ============================== 4 passed in 0.41s ===============================","title":"Chapter 1: Hello, World!"},{"location":"books/python/02_crowsnest/","text":"Crow's Nest https://www.youtube.com/playlist?list=PLhOuww6rJJNPBqIwfD-0RedqsitBliLhT Write a program that will announce the appearance of something \"off the larboard bow\" to the captain of the ship. Note that you need to \"a\" before a word starting with a consonant: $ ./crowsnest.py narwhal Ahoy, Captain, a narwhal off the larboard bow! Or \"an\" before a word starting with a vowel: $ ./crowsnest.py octopus Ahoy, Captain, an octopus off the larboard bow! Given no arguments, the program should print a brief usage: $ ./crowsnest.py usage: crowsnest.py [-h] str crowsnest.py: error: the following arguments are required: str It should print a longer usage for -h and --help : $ ./crowsnest.py -h usage: crowsnest.py [-h] str Crow's Nest -- choose the correct article positional arguments: str A word optional arguments: -h, --help show this help message and exit A passing test suite looks like this: $ make test pytest -xv test.py ============================= test session starts ============================== ... collected 6 items test.py::test_exists PASSED [ 16%] test.py::test_usage PASSED [ 33%] test.py::test_consonant PASSED [ 50%] test.py::test_consonant_upper PASSED [ 66%] test.py::test_vowel PASSED [ 83%] test.py::test_vowel_upper PASSED [100%] ============================== 6 passed in 2.89s ===============================","title":"Crow's Nest"},{"location":"books/python/02_crowsnest/#crows-nest","text":"https://www.youtube.com/playlist?list=PLhOuww6rJJNPBqIwfD-0RedqsitBliLhT Write a program that will announce the appearance of something \"off the larboard bow\" to the captain of the ship. Note that you need to \"a\" before a word starting with a consonant: $ ./crowsnest.py narwhal Ahoy, Captain, a narwhal off the larboard bow! Or \"an\" before a word starting with a vowel: $ ./crowsnest.py octopus Ahoy, Captain, an octopus off the larboard bow! Given no arguments, the program should print a brief usage: $ ./crowsnest.py usage: crowsnest.py [-h] str crowsnest.py: error: the following arguments are required: str It should print a longer usage for -h and --help : $ ./crowsnest.py -h usage: crowsnest.py [-h] str Crow's Nest -- choose the correct article positional arguments: str A word optional arguments: -h, --help show this help message and exit A passing test suite looks like this: $ make test pytest -xv test.py ============================= test session starts ============================== ... collected 6 items test.py::test_exists PASSED [ 16%] test.py::test_usage PASSED [ 33%] test.py::test_consonant PASSED [ 50%] test.py::test_consonant_upper PASSED [ 66%] test.py::test_vowel PASSED [ 83%] test.py::test_vowel_upper PASSED [100%] ============================== 6 passed in 2.89s ===============================","title":"Crow's Nest"},{"location":"books/python/03_picnic/","text":"Picnic https://www.youtube.com/playlist?list=PLhOuww6rJJNMuQohHrNxRjhFTR9UlUOIa Write a program that will correctly format the items we're taking on our picnic. For one item, it should print the one item: $ ./picnic.py sandwiches You are bringing sandwiches. For two items, place \"and\" in between: $ ./picnic.py sandwiches chips You are bringing sandwiches and chips. For three or more items, use commas and \"and\": $ ./picnic.py sandwiches chips cake You are bringing sandwiches, chips, and cake. If the --sorted flag is present, the items should first be sorted: $ ./picnic.py sandwiches chips cake --sorted You are bringing cake, chips, and sandwiches. If no items are given, print a brief usage: $ ./picnic.py usage: picnic.py [-h] [-s] str [str ...] picnic.py: error: the following arguments are required: str Respond to -h and --help with a longer usage: $ ./picnic.py -h usage: picnic.py [-h] [-s] str [str ...] Picnic game positional arguments: str Item(s) to bring optional arguments: -h, --help show this help message and exit -s, --sorted Sort the items (default: False) Run the test suite to ensure your program is correct: $ make test pytest -xv test.py ============================= test session starts ============================== ... collected 7 items test.py::test_exists PASSED [ 14%] test.py::test_usage PASSED [ 28%] test.py::test_one PASSED [ 42%] test.py::test_two PASSED [ 57%] test.py::test_more_than_two PASSED [ 71%] test.py::test_two_sorted PASSED [ 85%] test.py::test_more_than_two_sorted PASSED [100%] ============================== 7 passed in 0.51s ===============================","title":"Picnic"},{"location":"books/python/03_picnic/#picnic","text":"https://www.youtube.com/playlist?list=PLhOuww6rJJNMuQohHrNxRjhFTR9UlUOIa Write a program that will correctly format the items we're taking on our picnic. For one item, it should print the one item: $ ./picnic.py sandwiches You are bringing sandwiches. For two items, place \"and\" in between: $ ./picnic.py sandwiches chips You are bringing sandwiches and chips. For three or more items, use commas and \"and\": $ ./picnic.py sandwiches chips cake You are bringing sandwiches, chips, and cake. If the --sorted flag is present, the items should first be sorted: $ ./picnic.py sandwiches chips cake --sorted You are bringing cake, chips, and sandwiches. If no items are given, print a brief usage: $ ./picnic.py usage: picnic.py [-h] [-s] str [str ...] picnic.py: error: the following arguments are required: str Respond to -h and --help with a longer usage: $ ./picnic.py -h usage: picnic.py [-h] [-s] str [str ...] Picnic game positional arguments: str Item(s) to bring optional arguments: -h, --help show this help message and exit -s, --sorted Sort the items (default: False) Run the test suite to ensure your program is correct: $ make test pytest -xv test.py ============================= test session starts ============================== ... collected 7 items test.py::test_exists PASSED [ 14%] test.py::test_usage PASSED [ 28%] test.py::test_one PASSED [ 42%] test.py::test_two PASSED [ 57%] test.py::test_more_than_two PASSED [ 71%] test.py::test_two_sorted PASSED [ 85%] test.py::test_more_than_two_sorted PASSED [100%] ============================== 7 passed in 0.51s ===============================","title":"Picnic"},{"location":"books/python/04_jump_the_five/","text":"Jump the Five https://www.youtube.com/playlist?list=PLhOuww6rJJNNd1Mbu3h6SGfhD-8rRxLTp Write a program that will encode any number in a given string using an algorightm to \"jump the five\" on a standard US telephone keypad such that \"1\" becomes \"9,\" \"4\" becomes \"6,\" etc. The \"5\" and the \"0\" will swap with each other. Here is the entire substitution table: 1 => 9 2 => 8 3 => 7 4 => 6 5 => 0 6 => 4 7 => 3 8 => 2 9 => 1 0 => 5 Encode only the numbers and leave all other text alone: $ ./jump.py 867-5309 243-0751 If given no arguments, present a brief usage: $ ./jump.py usage: jump.py [-h] str jump.py: error: the following arguments are required: str Respond to -h or --help with a longer usage: $ ./jump.py -h usage: jump.py [-h] str Jump the Five positional arguments: str Input text optional arguments: -h, --help show this help message and exit Run the test suite to ensure your program is working correctly: $ make test pytest -xv test.py ============================= test session starts ============================== ... collected 4 items test.py::test_exists PASSED [ 25%] test.py::test_usage PASSED [ 50%] test.py::test_01 PASSED [ 75%] test.py::test_02 PASSED [100%] ============================== 4 passed in 0.53s ===============================","title":"Jump the Five"},{"location":"books/python/04_jump_the_five/#jump-the-five","text":"https://www.youtube.com/playlist?list=PLhOuww6rJJNNd1Mbu3h6SGfhD-8rRxLTp Write a program that will encode any number in a given string using an algorightm to \"jump the five\" on a standard US telephone keypad such that \"1\" becomes \"9,\" \"4\" becomes \"6,\" etc. The \"5\" and the \"0\" will swap with each other. Here is the entire substitution table: 1 => 9 2 => 8 3 => 7 4 => 6 5 => 0 6 => 4 7 => 3 8 => 2 9 => 1 0 => 5 Encode only the numbers and leave all other text alone: $ ./jump.py 867-5309 243-0751 If given no arguments, present a brief usage: $ ./jump.py usage: jump.py [-h] str jump.py: error: the following arguments are required: str Respond to -h or --help with a longer usage: $ ./jump.py -h usage: jump.py [-h] str Jump the Five positional arguments: str Input text optional arguments: -h, --help show this help message and exit Run the test suite to ensure your program is working correctly: $ make test pytest -xv test.py ============================= test session starts ============================== ... collected 4 items test.py::test_exists PASSED [ 25%] test.py::test_usage PASSED [ 50%] test.py::test_01 PASSED [ 75%] test.py::test_02 PASSED [100%] ============================== 4 passed in 0.53s ===============================","title":"Jump the Five"},{"location":"books/python/05_howler/","text":"Howler https://www.youtube.com/playlist?list=PLhOuww6rJJNNzo5zqtx0388myQkUKyrQz Write a program that uppercases the given text: $ ./howler.py 'The quick brown fox jumps over the lazy dog.' THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG. If the text names a file, uppercase the contents of the file: $ ./howler.py ../inputs/fox.txt THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG. If given no arguments, print a brief usage: $ ./howler.py usage: howler.py [-h] [-o str] str howler.py: error: the following arguments are required: str If the -o or --outfile option is present, write the output to the given file and print nothing: $ ./howler.py ../inputs/fox.txt -o out.txt There should now be an out.txt file with the contents: $ cat out.txt THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG. Respond to -h or --help with a longer usage: $ ./howler.py -h usage: howler.py [-h] [-o str] str Howler (upper-cases input) positional arguments: str Input string or file optional arguments: -h, --help show this help message and exit -o str, --outfile str Output filename (default: ) Run the test suite to ensure your program is working correctly: $ make test pytest -xv test.py ============================= test session starts ============================== ... collected 5 items test.py::test_exists PASSED [ 20%] test.py::test_usage PASSED [ 40%] test.py::test_text_stdout PASSED [ 60%] test.py::test_text_outfile PASSED [ 80%] test.py::test_file PASSED [100%] ============================== 5 passed in 0.40s ===============================","title":"Howler"},{"location":"books/python/05_howler/#howler","text":"https://www.youtube.com/playlist?list=PLhOuww6rJJNNzo5zqtx0388myQkUKyrQz Write a program that uppercases the given text: $ ./howler.py 'The quick brown fox jumps over the lazy dog.' THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG. If the text names a file, uppercase the contents of the file: $ ./howler.py ../inputs/fox.txt THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG. If given no arguments, print a brief usage: $ ./howler.py usage: howler.py [-h] [-o str] str howler.py: error: the following arguments are required: str If the -o or --outfile option is present, write the output to the given file and print nothing: $ ./howler.py ../inputs/fox.txt -o out.txt There should now be an out.txt file with the contents: $ cat out.txt THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG. Respond to -h or --help with a longer usage: $ ./howler.py -h usage: howler.py [-h] [-o str] str Howler (upper-cases input) positional arguments: str Input string or file optional arguments: -h, --help show this help message and exit -o str, --outfile str Output filename (default: ) Run the test suite to ensure your program is working correctly: $ make test pytest -xv test.py ============================= test session starts ============================== ... collected 5 items test.py::test_exists PASSED [ 20%] test.py::test_usage PASSED [ 40%] test.py::test_text_stdout PASSED [ 60%] test.py::test_text_outfile PASSED [ 80%] test.py::test_file PASSED [100%] ============================== 5 passed in 0.40s ===============================","title":"Howler"},{"location":"books/python/06_wc/","text":"wc (word count) https://www.youtube.com/playlist?list=PLhOuww6rJJNOGPw5Mu5FyhnumZjb9F6kk Write a Python implementation of wc (word count). The program should print lines, words, and characters for each input. Files are acceptable arguments: $ ./wc.py ../inputs/fox.txt 1 9 45 ../inputs/fox.txt As is \"standard in\" ( STDIN ) if given no arguments: $ cat ../inputs/fox.txt | ./wc.py 1 9 45 <stdin> If given more than one file, also include a summary for each column: $ ./wc.py ../inputs/*.txt 1000 1000 5840 ../inputs/1000.txt 100 100 657 ../inputs/1945-boys.txt 100 100 684 ../inputs/1945-girls.txt 865 7620 44841 ../inputs/const.txt 2476 7436 41743 ../inputs/dickinson.txt 1 9 45 ../inputs/fox.txt 25 278 1476 ../inputs/gettysburg.txt 37 91 499 ../inputs/issa.txt 9 51 248 ../inputs/nobody.txt 1 16 66 ../inputs/now.txt 2 9 41 ../inputs/out.txt 6 71 413 ../inputs/preamble.txt 7035 68061 396320 ../inputs/scarlet.txt 17 118 661 ../inputs/sonnet-29.txt 2618 17668 95690 ../inputs/sonnets.txt 3 7 45 ../inputs/spiders.txt 9 34 192 ../inputs/the-bustle.txt 37842 48990 369949 ../inputs/uscities.txt 176 1340 8685 ../inputs/usdeclar.txt 52322 152999 968095 total The program should respond to -h and --help with a usage: $ ./wc.py -h usage: wc.py [-h] [FILE [FILE ...]] Emulate wc (word count) positional arguments: FILE Input file(s) (default: [<_io.TextIOWrapper name='<stdin>' mode='r' encoding='UTF-8'>]) optional arguments: -h, --help show this help message and exit Run the test suite to ensure your program is working correctly. $ make test pytest -xv test.py ============================= test session starts ============================== ... collected 9 items test.py::test_exists PASSED [ 11%] test.py::test_usage PASSED [ 22%] test.py::test_bad_file PASSED [ 33%] test.py::test_empty PASSED [ 44%] test.py::test_one PASSED [ 55%] test.py::test_two PASSED [ 66%] test.py::test_fox PASSED [ 77%] test.py::test_more PASSED [ 88%] test.py::test_stdin PASSED [100%] ============================== 9 passed in 0.54s ===============================","title":"wc (word count)"},{"location":"books/python/06_wc/#wc-word-count","text":"https://www.youtube.com/playlist?list=PLhOuww6rJJNOGPw5Mu5FyhnumZjb9F6kk Write a Python implementation of wc (word count). The program should print lines, words, and characters for each input. Files are acceptable arguments: $ ./wc.py ../inputs/fox.txt 1 9 45 ../inputs/fox.txt As is \"standard in\" ( STDIN ) if given no arguments: $ cat ../inputs/fox.txt | ./wc.py 1 9 45 <stdin> If given more than one file, also include a summary for each column: $ ./wc.py ../inputs/*.txt 1000 1000 5840 ../inputs/1000.txt 100 100 657 ../inputs/1945-boys.txt 100 100 684 ../inputs/1945-girls.txt 865 7620 44841 ../inputs/const.txt 2476 7436 41743 ../inputs/dickinson.txt 1 9 45 ../inputs/fox.txt 25 278 1476 ../inputs/gettysburg.txt 37 91 499 ../inputs/issa.txt 9 51 248 ../inputs/nobody.txt 1 16 66 ../inputs/now.txt 2 9 41 ../inputs/out.txt 6 71 413 ../inputs/preamble.txt 7035 68061 396320 ../inputs/scarlet.txt 17 118 661 ../inputs/sonnet-29.txt 2618 17668 95690 ../inputs/sonnets.txt 3 7 45 ../inputs/spiders.txt 9 34 192 ../inputs/the-bustle.txt 37842 48990 369949 ../inputs/uscities.txt 176 1340 8685 ../inputs/usdeclar.txt 52322 152999 968095 total The program should respond to -h and --help with a usage: $ ./wc.py -h usage: wc.py [-h] [FILE [FILE ...]] Emulate wc (word count) positional arguments: FILE Input file(s) (default: [<_io.TextIOWrapper name='<stdin>' mode='r' encoding='UTF-8'>]) optional arguments: -h, --help show this help message and exit Run the test suite to ensure your program is working correctly. $ make test pytest -xv test.py ============================= test session starts ============================== ... collected 9 items test.py::test_exists PASSED [ 11%] test.py::test_usage PASSED [ 22%] test.py::test_bad_file PASSED [ 33%] test.py::test_empty PASSED [ 44%] test.py::test_one PASSED [ 55%] test.py::test_two PASSED [ 66%] test.py::test_fox PASSED [ 77%] test.py::test_more PASSED [ 88%] test.py::test_stdin PASSED [100%] ============================== 9 passed in 0.54s ===============================","title":"wc (word count)"},{"location":"books/python/07_gashlycrumb/","text":"Gashlycrumb https://www.youtube.com/playlist?list=PLhOuww6rJJNMxWy34-9jlD2ulZxaA7mxV Write a program that prints the line from a file starting with a given letter: $ ./gashlycrumb.py a A is for Amy who fell down the stairs. By default, the -f or --file should use the included gashlycrumb.txt file, but can be overridden: $ ./gashlycrumb.py a -f alternate.txt A is for Alfred, poisoned to death. The structure of the file is such: $ head alternate.txt A is for Alfred, poisoned to death. B is for Bertrand, consumed by meth. C is for Cornell, who ate some glass. D is for Donald, who died from gas. E is for Edward, hanged by the neck. F is for Freddy, crushed in a wreck. G is for Geoffrey, who slit his wrist. H is for Henry, who's neck got a twist. I is for Ingrid, who tripped down a stair. J is for Jered, who fell off a chair. The program should accept one or more letters as positional arguments, printing each line or a message that the given argument is not present in the file: $ ./gashlycrumb.py x 4 z -f alternate.txt X is for Xavier, stuck through with a prong. I do not know \"4\". Z is for Zora, smothered by a fleece. If given no arguments, it should print a brief usage: $ ./gashlycrumb.py usage: gashlycrumb.py [-h] [-f FILE] letter [letter ...] gashlycrumb.py: error: the following arguments are required: letter Or a longer usage for -h or --help : $ ./gashlycrumb.py -h usage: gashlycrumb.py [-h] [-f FILE] letter [letter ...] Gashlycrumb positional arguments: letter Letter(s) optional arguments: -h, --help show this help message and exit -f FILE, --file FILE Input file (default: gashlycrumb.txt) The program should reject a bad --file argument: $ ./gashlycrumb.py -f alskdf usage: gashlycrumb.py [-h] [-f str] str [str ...] gashlycrumb.py: error: argument -f/--file: can't open 'alskdf': \\ [Errno 2] No such file or directory: 'alskdf' Run the test suite to ensure your program is correct: $ make test pytest -xv test.py ============================= test session starts ============================== ... collected 8 items test.py::test_exists PASSED [ 12%] test.py::test_usage PASSED [ 25%] test.py::test_bad_file PASSED [ 37%] test.py::test_a PASSED [ 50%] test.py::test_b_c PASSED [ 62%] test.py::test_y PASSED [ 75%] test.py::test_o_alternate PASSED [ 87%] test.py::test_bad_letter PASSED [100%] ============================== 8 passed in 0.50s ===============================","title":"Gashlycrumb"},{"location":"books/python/07_gashlycrumb/#gashlycrumb","text":"https://www.youtube.com/playlist?list=PLhOuww6rJJNMxWy34-9jlD2ulZxaA7mxV Write a program that prints the line from a file starting with a given letter: $ ./gashlycrumb.py a A is for Amy who fell down the stairs. By default, the -f or --file should use the included gashlycrumb.txt file, but can be overridden: $ ./gashlycrumb.py a -f alternate.txt A is for Alfred, poisoned to death. The structure of the file is such: $ head alternate.txt A is for Alfred, poisoned to death. B is for Bertrand, consumed by meth. C is for Cornell, who ate some glass. D is for Donald, who died from gas. E is for Edward, hanged by the neck. F is for Freddy, crushed in a wreck. G is for Geoffrey, who slit his wrist. H is for Henry, who's neck got a twist. I is for Ingrid, who tripped down a stair. J is for Jered, who fell off a chair. The program should accept one or more letters as positional arguments, printing each line or a message that the given argument is not present in the file: $ ./gashlycrumb.py x 4 z -f alternate.txt X is for Xavier, stuck through with a prong. I do not know \"4\". Z is for Zora, smothered by a fleece. If given no arguments, it should print a brief usage: $ ./gashlycrumb.py usage: gashlycrumb.py [-h] [-f FILE] letter [letter ...] gashlycrumb.py: error: the following arguments are required: letter Or a longer usage for -h or --help : $ ./gashlycrumb.py -h usage: gashlycrumb.py [-h] [-f FILE] letter [letter ...] Gashlycrumb positional arguments: letter Letter(s) optional arguments: -h, --help show this help message and exit -f FILE, --file FILE Input file (default: gashlycrumb.txt) The program should reject a bad --file argument: $ ./gashlycrumb.py -f alskdf usage: gashlycrumb.py [-h] [-f str] str [str ...] gashlycrumb.py: error: argument -f/--file: can't open 'alskdf': \\ [Errno 2] No such file or directory: 'alskdf' Run the test suite to ensure your program is correct: $ make test pytest -xv test.py ============================= test session starts ============================== ... collected 8 items test.py::test_exists PASSED [ 12%] test.py::test_usage PASSED [ 25%] test.py::test_bad_file PASSED [ 37%] test.py::test_a PASSED [ 50%] test.py::test_b_c PASSED [ 62%] test.py::test_y PASSED [ 75%] test.py::test_o_alternate PASSED [ 87%] test.py::test_bad_letter PASSED [100%] ============================== 8 passed in 0.50s ===============================","title":"Gashlycrumb"},{"location":"books/python/08_apples_and_bananas/","text":"Apples and Bananas https://www.youtube.com/playlist?list=PLhOuww6rJJNMe_qrKzw6jtxzHkTOszozs Write a program that will substitute all the vowels in a given text with a single vowel (default \"a\"): $ ./apples.py 'The quick brown fox jumps over the lazy dog.' Tha qaack brawn fax jamps avar tha lazy dag. The -v or --vowel can be use to specify another vowel: $ ./apples.py 'The quick brown fox jumps over the lazy dog.' -v i Thi qiick briwn fix jimps ivir thi lizy dig. The program should reject a --vowel that is not a vowel (a, e, i, o, u): $ ./apples.py 'The quick brown fox jumps over the lazy dog.' -v x usage: apples.py [-h] [-v str] str apples.py: error: argument -v/--vowel: \\ invalid choice: 'x' (choose from 'a', 'e', 'i', 'o', 'u') The argument may name a file in which case you should read the contents of that file: $ ./apples.py ../inputs/fox.txt --vowel u Thu quuck bruwn fux jumps uvur thu luzy dug. Given no arguments, the program should print a brief usage: $ ./apples.py usage: apples.py [-h] [-v str] str apples.py: error: the following arguments are required: str Or a longer usage for -h or --help : $ ./apples.py -h usage: apples.py [-h] [-v str] str Apples and bananas positional arguments: str Input text or file optional arguments: -h, --help show this help message and exit -v str, --vowel str The vowel to substitute (default: a) Run the test suite to ensure your program is correct: $ make test pytest -xv test.py ============================= test session starts ============================== ... collected 8 items test.py::test_exists PASSED [ 12%] test.py::test_usage PASSED [ 25%] test.py::test_bad_vowel PASSED [ 37%] test.py::test_command_line PASSED [ 50%] test.py::test_command_line_with_vowel PASSED [ 62%] test.py::test_command_line_with_vowel_preserve_case PASSED [ 75%] test.py::test_file PASSED [ 87%] test.py::test_file_with_vowel PASSED [100%] ============================== 8 passed in 0.75s ===============================","title":"Apples and Bananas"},{"location":"books/python/08_apples_and_bananas/#apples-and-bananas","text":"https://www.youtube.com/playlist?list=PLhOuww6rJJNMe_qrKzw6jtxzHkTOszozs Write a program that will substitute all the vowels in a given text with a single vowel (default \"a\"): $ ./apples.py 'The quick brown fox jumps over the lazy dog.' Tha qaack brawn fax jamps avar tha lazy dag. The -v or --vowel can be use to specify another vowel: $ ./apples.py 'The quick brown fox jumps over the lazy dog.' -v i Thi qiick briwn fix jimps ivir thi lizy dig. The program should reject a --vowel that is not a vowel (a, e, i, o, u): $ ./apples.py 'The quick brown fox jumps over the lazy dog.' -v x usage: apples.py [-h] [-v str] str apples.py: error: argument -v/--vowel: \\ invalid choice: 'x' (choose from 'a', 'e', 'i', 'o', 'u') The argument may name a file in which case you should read the contents of that file: $ ./apples.py ../inputs/fox.txt --vowel u Thu quuck bruwn fux jumps uvur thu luzy dug. Given no arguments, the program should print a brief usage: $ ./apples.py usage: apples.py [-h] [-v str] str apples.py: error: the following arguments are required: str Or a longer usage for -h or --help : $ ./apples.py -h usage: apples.py [-h] [-v str] str Apples and bananas positional arguments: str Input text or file optional arguments: -h, --help show this help message and exit -v str, --vowel str The vowel to substitute (default: a) Run the test suite to ensure your program is correct: $ make test pytest -xv test.py ============================= test session starts ============================== ... collected 8 items test.py::test_exists PASSED [ 12%] test.py::test_usage PASSED [ 25%] test.py::test_bad_vowel PASSED [ 37%] test.py::test_command_line PASSED [ 50%] test.py::test_command_line_with_vowel PASSED [ 62%] test.py::test_command_line_with_vowel_preserve_case PASSED [ 75%] test.py::test_file PASSED [ 87%] test.py::test_file_with_vowel PASSED [100%] ============================== 8 passed in 0.75s ===============================","title":"Apples and Bananas"},{"location":"books/python/09_abuse/","text":"Abuse https://www.youtube.com/playlist?list=PLhOuww6rJJNOWShq53st6NjXacHHaJurn Write a Shakesperean insult generator: $ ./abuse.py You foul, filthsome swine! You foolish, sodden-witted ratcatcher! You ruinous, bankrupt jolthead! The insults are generated by randomly combining these adjectives: bankrupt base caterwauling corrupt cullionly detestable dishonest false filthsome filthy foolish foul gross heedless indistinguishable infected insatiate irksome lascivious lecherous loathsome lubbery old peevish rascaly rotten ruinous scurilous scurvy slanderous sodden-witted thin-faced toad-spotted unmannered vile wall-eyed With these nouns: Judas Satan ape ass barbermonger beggar block boy braggart butt carbuncle coward coxcomb cur dandy degenerate fiend fishmonger fool gull harpy jack jolthead knave liar lunatic maw milksop minion ratcatcher recreant rogue scold slave swine traitor varlet villain worm The program can vary the -n or --number of insults: $ ./abuse.py -n 2 You heedless, gross barbermonger! You bankrupt, vile scold! Or the number of --adjectives (also -a ): $ ./abuse.py -a 4 You sodden-witted, ruinous, lecherous, lubbery villain! You insatiate, caterwauling, corrupt, toad-spotted traitor! You vile, unmannered, ruinous, filthy liar! The program should accept a -s or --seed to set the random seed for reproducible results: $ ./abuse.py -s 1 You filthsome, cullionly fiend! You false, thin-faced minion! You sodden-witted, rascaly cur! Your program should respond to -h and --help with a usage: $ ./abuse.py -h usage: abuse.py [-h] [-a int] [-n int] [-s int] Heap abuse optional arguments: -h, --help show this help message and exit -a int, --adjectives int Number of adjectives (default: 2) -n int, --number int Number of insults (default: 3) -s int, --seed int Random seed (default: None) Run the test suite to ensure your program is correct: $ make test pytest -xv test.py ============================= test session starts ============================== ... collected 11 items test.py::test_exists PASSED [ 9%] test.py::test_usage PASSED [ 18%] test.py::test_bad_adjective_str PASSED [ 27%] test.py::test_bad_adjective_num PASSED [ 36%] test.py::test_bad_number_str PASSED [ 45%] test.py::test_bad_number_int PASSED [ 54%] test.py::test_bad_seed PASSED [ 63%] test.py::test_01 PASSED [ 72%] test.py::test_02 PASSED [ 81%] test.py::test_03 PASSED [ 90%] test.py::test_04 PASSED [100%] ============================== 11 passed in 0.74s ==============================","title":"Abuse"},{"location":"books/python/09_abuse/#abuse","text":"https://www.youtube.com/playlist?list=PLhOuww6rJJNOWShq53st6NjXacHHaJurn Write a Shakesperean insult generator: $ ./abuse.py You foul, filthsome swine! You foolish, sodden-witted ratcatcher! You ruinous, bankrupt jolthead! The insults are generated by randomly combining these adjectives: bankrupt base caterwauling corrupt cullionly detestable dishonest false filthsome filthy foolish foul gross heedless indistinguishable infected insatiate irksome lascivious lecherous loathsome lubbery old peevish rascaly rotten ruinous scurilous scurvy slanderous sodden-witted thin-faced toad-spotted unmannered vile wall-eyed With these nouns: Judas Satan ape ass barbermonger beggar block boy braggart butt carbuncle coward coxcomb cur dandy degenerate fiend fishmonger fool gull harpy jack jolthead knave liar lunatic maw milksop minion ratcatcher recreant rogue scold slave swine traitor varlet villain worm The program can vary the -n or --number of insults: $ ./abuse.py -n 2 You heedless, gross barbermonger! You bankrupt, vile scold! Or the number of --adjectives (also -a ): $ ./abuse.py -a 4 You sodden-witted, ruinous, lecherous, lubbery villain! You insatiate, caterwauling, corrupt, toad-spotted traitor! You vile, unmannered, ruinous, filthy liar! The program should accept a -s or --seed to set the random seed for reproducible results: $ ./abuse.py -s 1 You filthsome, cullionly fiend! You false, thin-faced minion! You sodden-witted, rascaly cur! Your program should respond to -h and --help with a usage: $ ./abuse.py -h usage: abuse.py [-h] [-a int] [-n int] [-s int] Heap abuse optional arguments: -h, --help show this help message and exit -a int, --adjectives int Number of adjectives (default: 2) -n int, --number int Number of insults (default: 3) -s int, --seed int Random seed (default: None) Run the test suite to ensure your program is correct: $ make test pytest -xv test.py ============================= test session starts ============================== ... collected 11 items test.py::test_exists PASSED [ 9%] test.py::test_usage PASSED [ 18%] test.py::test_bad_adjective_str PASSED [ 27%] test.py::test_bad_adjective_num PASSED [ 36%] test.py::test_bad_number_str PASSED [ 45%] test.py::test_bad_number_int PASSED [ 54%] test.py::test_bad_seed PASSED [ 63%] test.py::test_01 PASSED [ 72%] test.py::test_02 PASSED [ 81%] test.py::test_03 PASSED [ 90%] test.py::test_04 PASSED [100%] ============================== 11 passed in 0.74s ==============================","title":"Abuse"},{"location":"books/python/10_telephone/","text":"Telephone https://www.youtube.com/playlist?list=PLhOuww6rJJNN0T5ZKUFuEDo3ykOs1zxPU Write a program that randomly mutates some given text which may be given on the command line: $ ./telephone.py 'The quick brown fox jumps over the lazy dog.' You said: \"The quick brown fox jumps over the lazy dog.\" I heard : \"The qu)ck brown HoN jumps over thf lazy dog.\" Or from a file: $ ./telephone.py ../inputs/fox.txt You said: \"The quick brown fox jumps over the lazy dog.\" I heard : \"=he quick brswn fox jumps over the*[azy dog.\" The program should accept a -m or --mutations that is a floating point number between 0 and 1 that represents a percentage of mutations to introduce: $ ./telephone.py -m .5 ../inputs/fox.txt You said: \"The quick brown fox jumps over the lazy dog.\" I heard : \"w\\eeqhR$kBbxown|foGLFuvn| ooe: t'. l\"zy d&:.\" It should also accept a -s or --seed argument for the random seed to ensure reproducible results: $ ./telephone.py -s 2 ../inputs/fox.txt You said: \"The quick brown fox jumps over the lazy dog.\" I heard : \"TheNqHick Crown fox jum_s over the lazy dog.\" If provided no arguments, it should print a brief usage: $ ./telephone.py usage: telephone.py [-h] [-s int] [-m float] str telephone.py: error: the following arguments are required: str $ ./telephone.py -h usage: telephone.py [-h] [-s int] [-m float] str Telephone positional arguments: str Input text or file optional arguments: -h, --help show this help message and exit -s int, --seed int Random seed (default: None) -m float, --mutations float Percent mutations (default: 0.1) Run the test suite to ensure your program is correct: $ make test pytest -xv test.py ============================= test session starts ============================== ... collected 10 items test.py::test_exists PASSED [ 10%] test.py::test_usage PASSED [ 20%] test.py::test_bad_seed_str PASSED [ 30%] test.py::test_bad_mutation_str PASSED [ 40%] test.py::test_bad_mutation PASSED [ 50%] test.py::test_for_echo PASSED [ 60%] test.py::test_now_cmd_s1 PASSED [ 70%] test.py::test_now_cmd_s2_m4 PASSED [ 80%] test.py::test_fox_file_s1 PASSED [ 90%] test.py::test_fox_file_s2_m6 PASSED [100%] ============================== 10 passed in 0.82s ==============================","title":"Telephone"},{"location":"books/python/10_telephone/#telephone","text":"https://www.youtube.com/playlist?list=PLhOuww6rJJNN0T5ZKUFuEDo3ykOs1zxPU Write a program that randomly mutates some given text which may be given on the command line: $ ./telephone.py 'The quick brown fox jumps over the lazy dog.' You said: \"The quick brown fox jumps over the lazy dog.\" I heard : \"The qu)ck brown HoN jumps over thf lazy dog.\" Or from a file: $ ./telephone.py ../inputs/fox.txt You said: \"The quick brown fox jumps over the lazy dog.\" I heard : \"=he quick brswn fox jumps over the*[azy dog.\" The program should accept a -m or --mutations that is a floating point number between 0 and 1 that represents a percentage of mutations to introduce: $ ./telephone.py -m .5 ../inputs/fox.txt You said: \"The quick brown fox jumps over the lazy dog.\" I heard : \"w\\eeqhR$kBbxown|foGLFuvn| ooe: t'. l\"zy d&:.\" It should also accept a -s or --seed argument for the random seed to ensure reproducible results: $ ./telephone.py -s 2 ../inputs/fox.txt You said: \"The quick brown fox jumps over the lazy dog.\" I heard : \"TheNqHick Crown fox jum_s over the lazy dog.\" If provided no arguments, it should print a brief usage: $ ./telephone.py usage: telephone.py [-h] [-s int] [-m float] str telephone.py: error: the following arguments are required: str $ ./telephone.py -h usage: telephone.py [-h] [-s int] [-m float] str Telephone positional arguments: str Input text or file optional arguments: -h, --help show this help message and exit -s int, --seed int Random seed (default: None) -m float, --mutations float Percent mutations (default: 0.1) Run the test suite to ensure your program is correct: $ make test pytest -xv test.py ============================= test session starts ============================== ... collected 10 items test.py::test_exists PASSED [ 10%] test.py::test_usage PASSED [ 20%] test.py::test_bad_seed_str PASSED [ 30%] test.py::test_bad_mutation_str PASSED [ 40%] test.py::test_bad_mutation PASSED [ 50%] test.py::test_for_echo PASSED [ 60%] test.py::test_now_cmd_s1 PASSED [ 70%] test.py::test_now_cmd_s2_m4 PASSED [ 80%] test.py::test_fox_file_s1 PASSED [ 90%] test.py::test_fox_file_s2_m6 PASSED [100%] ============================== 10 passed in 0.82s ==============================","title":"Telephone"},{"location":"books/python/11_bottles_of_beer/","text":"99 Bottles of Beer https://www.youtube.com/playlist?list=PLhOuww6rJJNNGDXdGGfp3RDXBMhJwj0Ij Write a song that will generate the verses to the song \"99 Bottles of Beer\": $ ./bottles.py | tail 2 bottles of beer on the wall, 2 bottles of beer, Take one down, pass it around, 1 bottle of beer on the wall! 1 bottle of beer on the wall, 1 bottle of beer, Take one down, pass it around, No more bottles of beer on the wall! If given a -n or --num argument, generate the verses from that number down to 0: $ ./bottles.py -n 2 2 bottles of beer on the wall, 2 bottles of beer, Take one down, pass it around, 1 bottle of beer on the wall! 1 bottle of beer on the wall, 1 bottle of beer, Take one down, pass it around, No more bottles of beer on the wall! The program should respond to -h and --help with a usage: $ ./bottles.py -h usage: bottles.py [-h] [-n int] Bottles of beer song optional arguments: -h, --help show this help message and exit -n int, --num int How many bottles (default: 10) Run the test suite to ensure your program is correct: $ make test pytest -xv test.py ============================= test session starts ============================== ... collected 8 items test.py::test_exists PASSED [ 12%] test.py::test_usage PASSED [ 25%] test.py::test_bad_int PASSED [ 37%] test.py::test_float PASSED [ 50%] test.py::test_str PASSED [ 62%] test.py::test_one PASSED [ 75%] test.py::test_two PASSED [ 87%] test.py::test_random PASSED [100%] ============================== 8 passed in 0.91s ===============================","title":"99 Bottles of Beer"},{"location":"books/python/11_bottles_of_beer/#99-bottles-of-beer","text":"https://www.youtube.com/playlist?list=PLhOuww6rJJNNGDXdGGfp3RDXBMhJwj0Ij Write a song that will generate the verses to the song \"99 Bottles of Beer\": $ ./bottles.py | tail 2 bottles of beer on the wall, 2 bottles of beer, Take one down, pass it around, 1 bottle of beer on the wall! 1 bottle of beer on the wall, 1 bottle of beer, Take one down, pass it around, No more bottles of beer on the wall! If given a -n or --num argument, generate the verses from that number down to 0: $ ./bottles.py -n 2 2 bottles of beer on the wall, 2 bottles of beer, Take one down, pass it around, 1 bottle of beer on the wall! 1 bottle of beer on the wall, 1 bottle of beer, Take one down, pass it around, No more bottles of beer on the wall! The program should respond to -h and --help with a usage: $ ./bottles.py -h usage: bottles.py [-h] [-n int] Bottles of beer song optional arguments: -h, --help show this help message and exit -n int, --num int How many bottles (default: 10) Run the test suite to ensure your program is correct: $ make test pytest -xv test.py ============================= test session starts ============================== ... collected 8 items test.py::test_exists PASSED [ 12%] test.py::test_usage PASSED [ 25%] test.py::test_bad_int PASSED [ 37%] test.py::test_float PASSED [ 50%] test.py::test_str PASSED [ 62%] test.py::test_one PASSED [ 75%] test.py::test_two PASSED [ 87%] test.py::test_random PASSED [100%] ============================== 8 passed in 0.91s ===============================","title":"99 Bottles of Beer"},{"location":"books/python/12_ransom/","text":"Ransom https://www.youtube.com/playlist?list=PLhOuww6rJJNMxWhckg7FO4cEx57WgHbd_ Write a program that will randomly capitalize the letters in a given piece of text a la a ransom note. The text may be provided on the command line: $ ./ransom.py 'The quick brown fox jumps over the lazy dog.' THe qUICk BrOWn fOX jumPS OVEr THE LAzy DOg. Or with a file: $ ./ransom.py ../inputs/fox.txt THE QUicK BRown fox JuMPS OVER THe laZY dog. Given no arguments, the program should print a brief usage: $ ./ransom.py usage: ransom.py [-h] [-s int] str ransom.py: error: the following arguments are required: str The program should accept a -s or --seed option to use as a random seed to ensure reproducibility: $ ./ransom.py -s 1 ../inputs/fox.txt thE QUICk BrOWn Fox jumpS OveR tHe LAzY dOg. It should respond to -h and --help with a longer usage: $ ./ransom.py -h usage: ransom.py [-h] [-s int] str Ransom Note positional arguments: str Input text or file optional arguments: -h, --help show this help message and exit -s int, --seed int Random seed (default: None) Run the test suite to ensure your program is correct: $ make test pytest -xv test.py ============================= test session starts ============================== ... collected 6 items test.py::test_exists PASSED [ 16%] test.py::test_usage PASSED [ 33%] test.py::test_text1 PASSED [ 50%] test.py::test_text2 PASSED [ 66%] test.py::test_file1 PASSED [ 83%] test.py::test_file2 PASSED [100%] ============================== 6 passed in 0.62s ===============================","title":"Ransom"},{"location":"books/python/12_ransom/#ransom","text":"https://www.youtube.com/playlist?list=PLhOuww6rJJNMxWhckg7FO4cEx57WgHbd_ Write a program that will randomly capitalize the letters in a given piece of text a la a ransom note. The text may be provided on the command line: $ ./ransom.py 'The quick brown fox jumps over the lazy dog.' THe qUICk BrOWn fOX jumPS OVEr THE LAzy DOg. Or with a file: $ ./ransom.py ../inputs/fox.txt THE QUicK BRown fox JuMPS OVER THe laZY dog. Given no arguments, the program should print a brief usage: $ ./ransom.py usage: ransom.py [-h] [-s int] str ransom.py: error: the following arguments are required: str The program should accept a -s or --seed option to use as a random seed to ensure reproducibility: $ ./ransom.py -s 1 ../inputs/fox.txt thE QUICk BrOWn Fox jumpS OveR tHe LAzY dOg. It should respond to -h and --help with a longer usage: $ ./ransom.py -h usage: ransom.py [-h] [-s int] str Ransom Note positional arguments: str Input text or file optional arguments: -h, --help show this help message and exit -s int, --seed int Random seed (default: None) Run the test suite to ensure your program is correct: $ make test pytest -xv test.py ============================= test session starts ============================== ... collected 6 items test.py::test_exists PASSED [ 16%] test.py::test_usage PASSED [ 33%] test.py::test_text1 PASSED [ 50%] test.py::test_text2 PASSED [ 66%] test.py::test_file1 PASSED [ 83%] test.py::test_file2 PASSED [100%] ============================== 6 passed in 0.62s ===============================","title":"Ransom"},{"location":"books/python/13_twelve_days/","text":"Twelve Days of Christmas https://www.youtube.com/playlist?list=PLhOuww6rJJNNZEMX12PE1OvSKy02UQoB4 Write a program that will generate the verse \"The Twelve Days of Christmas\" song: $ ./twelve_days.py | tail Ten lords a leaping, Nine ladies dancing, Eight maids a milking, Seven swans a swimming, Six geese a laying, Five gold rings, Four calling birds, Three French hens, Two turtle doves, And a partridge in a pear tree. The program should accept a -n or --number (default 12) to control the number of verses that are generated: $ ./twelve_days.py -n 2 On the first day of Christmas, My true love gave to me, A partridge in a pear tree. On the second day of Christmas, My true love gave to me, Two turtle doves, And a partridge in a pear tree. A number outside the range 1-12 should be rejected: $ ./twelve_days.py -n 21 usage: twelve_days.py [-h] [-n days] [-o FILE] twelve_days.py: error: --num \"21\" must be between 1 and 12 If the -o or --outfile argument is present, the output should be printed to the named file and no output should appear on the command line: $ ./twelve_days.py -o out.txt There should now be an out.txt file with the output: $ wc -l out.txt 113 out.txt The program should respond to -h and --help with a usage: $ ./twelve_days.py -h usage: twelve_days.py [-h] [-n days] [-o FILE] Twelve Days of Christmas optional arguments: -h, --help show this help message and exit -n days, --num days Number of days to sing (default: 12) -o FILE, --outfile FILE Outfile (default: <_io.TextIOWrapper name='<stdout>' mode='w' encoding='utf-8'>) $ make test pytest -xv test.py ============================= test session starts ============================== ... collected 7 items test.py::test_exists PASSED [ 14%] test.py::test_usage PASSED [ 28%] test.py::test_bad_num PASSED [ 42%] test.py::test_one PASSED [ 57%] test.py::test_two PASSED [ 71%] test.py::test_all_stdout PASSED [ 85%] test.py::test_all PASSED [100%] ============================== 7 passed in 1.92s ===============================","title":"Twelve Days of Christmas"},{"location":"books/python/13_twelve_days/#twelve-days-of-christmas","text":"https://www.youtube.com/playlist?list=PLhOuww6rJJNNZEMX12PE1OvSKy02UQoB4 Write a program that will generate the verse \"The Twelve Days of Christmas\" song: $ ./twelve_days.py | tail Ten lords a leaping, Nine ladies dancing, Eight maids a milking, Seven swans a swimming, Six geese a laying, Five gold rings, Four calling birds, Three French hens, Two turtle doves, And a partridge in a pear tree. The program should accept a -n or --number (default 12) to control the number of verses that are generated: $ ./twelve_days.py -n 2 On the first day of Christmas, My true love gave to me, A partridge in a pear tree. On the second day of Christmas, My true love gave to me, Two turtle doves, And a partridge in a pear tree. A number outside the range 1-12 should be rejected: $ ./twelve_days.py -n 21 usage: twelve_days.py [-h] [-n days] [-o FILE] twelve_days.py: error: --num \"21\" must be between 1 and 12 If the -o or --outfile argument is present, the output should be printed to the named file and no output should appear on the command line: $ ./twelve_days.py -o out.txt There should now be an out.txt file with the output: $ wc -l out.txt 113 out.txt The program should respond to -h and --help with a usage: $ ./twelve_days.py -h usage: twelve_days.py [-h] [-n days] [-o FILE] Twelve Days of Christmas optional arguments: -h, --help show this help message and exit -n days, --num days Number of days to sing (default: 12) -o FILE, --outfile FILE Outfile (default: <_io.TextIOWrapper name='<stdout>' mode='w' encoding='utf-8'>) $ make test pytest -xv test.py ============================= test session starts ============================== ... collected 7 items test.py::test_exists PASSED [ 14%] test.py::test_usage PASSED [ 28%] test.py::test_bad_num PASSED [ 42%] test.py::test_one PASSED [ 57%] test.py::test_two PASSED [ 71%] test.py::test_all_stdout PASSED [ 85%] test.py::test_all PASSED [100%] ============================== 7 passed in 1.92s ===============================","title":"Twelve Days of Christmas"},{"location":"books/python/14_rhymer/","text":"Rhymer https://www.youtube.com/playlist?list=PLhOuww6rJJNPNn2qa5ATHJ0qd-JUgM_s0 Write a program that will create rhyming words for a given word by removing the initial consonant sounds and substituting other sounds. Note that the given word should not appear in the output, so \"cake\" will be omitted from this run: $ ./rhymer.py cake | head bake blake brake chake clake crake dake drake fake flake The rhyming words will be created by adding all the consonants plus the following consonant clusters: bl br ch cl cr dr fl fr gl gr pl pr sc sh sk sl sm sn sp st sw th tr tw thw wh wr sch scr shr sph spl spr squ str thr The output should be sorted alphabetically. If there is no initial consonant sound, then apply all the consonant sounds to the given word: $ ./rhymer.py apple | tail thwapple trapple twapple vapple wapple whapple wrapple xapple yapple zapple If provided no arguments, the program should print a short usage: $ ./rhymer.py usage: rhymer.py [-h] str rhymer.py: error: the following arguments are required: str And a longer usage for -h or --help : $ ./rhymer.py -h usage: rhymer.py [-h] str Make rhyming \"words\" positional arguments: str A word to rhyme optional arguments: -h, --help show this help message and exit Run the test suite to ensure your program is correct: $ make test pytest -xv test.py ============================= test session starts ============================== ... collected 7 items test.py::test_exists PASSED [ 14%] test.py::test_usage PASSED [ 28%] test.py::test_take PASSED [ 42%] test.py::test_chair PASSED [ 57%] test.py::test_chair_uppercase PASSED [ 71%] test.py::test_apple PASSED [ 85%] test.py::test_no_vowels PASSED [100%] ============================== 7 passed in 0.47s ===============================","title":"Rhymer"},{"location":"books/python/14_rhymer/#rhymer","text":"https://www.youtube.com/playlist?list=PLhOuww6rJJNPNn2qa5ATHJ0qd-JUgM_s0 Write a program that will create rhyming words for a given word by removing the initial consonant sounds and substituting other sounds. Note that the given word should not appear in the output, so \"cake\" will be omitted from this run: $ ./rhymer.py cake | head bake blake brake chake clake crake dake drake fake flake The rhyming words will be created by adding all the consonants plus the following consonant clusters: bl br ch cl cr dr fl fr gl gr pl pr sc sh sk sl sm sn sp st sw th tr tw thw wh wr sch scr shr sph spl spr squ str thr The output should be sorted alphabetically. If there is no initial consonant sound, then apply all the consonant sounds to the given word: $ ./rhymer.py apple | tail thwapple trapple twapple vapple wapple whapple wrapple xapple yapple zapple If provided no arguments, the program should print a short usage: $ ./rhymer.py usage: rhymer.py [-h] str rhymer.py: error: the following arguments are required: str And a longer usage for -h or --help : $ ./rhymer.py -h usage: rhymer.py [-h] str Make rhyming \"words\" positional arguments: str A word to rhyme optional arguments: -h, --help show this help message and exit Run the test suite to ensure your program is correct: $ make test pytest -xv test.py ============================= test session starts ============================== ... collected 7 items test.py::test_exists PASSED [ 14%] test.py::test_usage PASSED [ 28%] test.py::test_take PASSED [ 42%] test.py::test_chair PASSED [ 57%] test.py::test_chair_uppercase PASSED [ 71%] test.py::test_apple PASSED [ 85%] test.py::test_no_vowels PASSED [100%] ============================== 7 passed in 0.47s ===============================","title":"Rhymer"},{"location":"books/python/15_kentucky_friar/","text":"The Kentucky Friar Write a program that will drop the final \"g\" of two-syllable words ending in \"-ing\" and also replace any occurrence of the word \"you\" (case-insensitive) with the word \"y'all\" so as to transform text into a dialect common to the US Deep South (from which your author hails). The given text may come from the command line: $ ./friar.py 'Do you want to do some cooking with me?' Do y'all want to do some cookin' with me? Or from an input file: $ ./friar.py ../inputs/nobody.txt I'm Nobody! Who are y'all? Are y'all -- Nobody -- too? Then there\u2019s a pair of us! Don't tell! they'd advertise -- y'all know! How dreary -- to be -- Somebody! How public -- like a Frog -- To tell one's name -- the livelong June -- To an admirin' Bog! Note that one-syllable words ending with \"-ing\" should be unchanged: $ ./friar.py swing swing If provided no arguments, the program should print a brief usage: $ ./friar.py usage: friar.py [-h] str friar.py: error: the following arguments are required: str Or a longer usage for -h and --help : $ ./friar.py -h usage: friar.py [-h] str Southern fry text positional arguments: str Input text or file optional arguments: -h, --help show this help message and exit Run the test suite to ensure your program works correctly: $ make test pytest -xv test.py ============================= test session starts ============================== ... collected 10 items test.py::test_exists PASSED [ 10%] test.py::test_usage PASSED [ 20%] test.py::test_two_syllable_ing_words PASSED [ 30%] test.py::test_one_syllable_ing_words PASSED [ 40%] test.py::test_you_yall PASSED [ 50%] test.py::test_blake PASSED [ 60%] test.py::test_banner PASSED [ 70%] test.py::test_raven PASSED [ 80%] test.py::test_dickinson PASSED [ 90%] test.py::test_shakespeare PASSED [100%] ============================== 10 passed in 0.73s ==============================","title":"The Kentucky Friar"},{"location":"books/python/15_kentucky_friar/#the-kentucky-friar","text":"Write a program that will drop the final \"g\" of two-syllable words ending in \"-ing\" and also replace any occurrence of the word \"you\" (case-insensitive) with the word \"y'all\" so as to transform text into a dialect common to the US Deep South (from which your author hails). The given text may come from the command line: $ ./friar.py 'Do you want to do some cooking with me?' Do y'all want to do some cookin' with me? Or from an input file: $ ./friar.py ../inputs/nobody.txt I'm Nobody! Who are y'all? Are y'all -- Nobody -- too? Then there\u2019s a pair of us! Don't tell! they'd advertise -- y'all know! How dreary -- to be -- Somebody! How public -- like a Frog -- To tell one's name -- the livelong June -- To an admirin' Bog! Note that one-syllable words ending with \"-ing\" should be unchanged: $ ./friar.py swing swing If provided no arguments, the program should print a brief usage: $ ./friar.py usage: friar.py [-h] str friar.py: error: the following arguments are required: str Or a longer usage for -h and --help : $ ./friar.py -h usage: friar.py [-h] str Southern fry text positional arguments: str Input text or file optional arguments: -h, --help show this help message and exit Run the test suite to ensure your program works correctly: $ make test pytest -xv test.py ============================= test session starts ============================== ... collected 10 items test.py::test_exists PASSED [ 10%] test.py::test_usage PASSED [ 20%] test.py::test_two_syllable_ing_words PASSED [ 30%] test.py::test_one_syllable_ing_words PASSED [ 40%] test.py::test_you_yall PASSED [ 50%] test.py::test_blake PASSED [ 60%] test.py::test_banner PASSED [ 70%] test.py::test_raven PASSED [ 80%] test.py::test_dickinson PASSED [ 90%] test.py::test_shakespeare PASSED [100%] ============================== 10 passed in 0.73s ==============================","title":"The Kentucky Friar"},{"location":"books/python/16_scrambler/","text":"Scrambler https://www.youtube.com/playlist?list=PLhOuww6rJJNPcLby3JXlKSo6duCIjh93S Write a program that will randomly scramble the middle parts of words of 3 letters or more in a given text which may come from the command line: $ ./scrambler.py 'The quick brown fox jumps over the lazy dog.' The qiuck bwron fox jmpus over the lzay dog. Or from an input file: $ ./scrambler.py ../inputs/fox.txt The qucik borwn fox jpmus over the lazy dog. The program should accept a -s or --seed value for the random seed to ensure reproducibility: $ ./scrambler.py -s 1 ../inputs/fox.txt The qicuk bwron fox jupms over the lazy dog. It should print a usage if provided no arguments: $ ./scrambler.py usage: scrambler.py [-h] [-s int] str scrambler.py: error: the following arguments are required: str And a longer usage for -h or --help : $ ./scrambler.py -h usage: scrambler.py [-h] [-s int] str Scramble the letters of words positional arguments: str Input text or file optional arguments: -h, --help show this help message and exit -s int, --seed int Random seed (default: None) Run the test suite to ensure your program is working correctly: $ make test pytest -xv test.py ============================= test session starts ============================== ... collected 7 items test.py::test_exists PASSED [ 14%] test.py::test_usage PASSED [ 28%] test.py::test_text1 PASSED [ 42%] test.py::test_text2 PASSED [ 57%] test.py::test_file_bustle PASSED [ 71%] test.py::test_file_fox PASSED [ 85%] test.py::test_file_spiders PASSED [100%] ============================== 7 passed in 0.72s ===============================","title":"Scrambler"},{"location":"books/python/16_scrambler/#scrambler","text":"https://www.youtube.com/playlist?list=PLhOuww6rJJNPcLby3JXlKSo6duCIjh93S Write a program that will randomly scramble the middle parts of words of 3 letters or more in a given text which may come from the command line: $ ./scrambler.py 'The quick brown fox jumps over the lazy dog.' The qiuck bwron fox jmpus over the lzay dog. Or from an input file: $ ./scrambler.py ../inputs/fox.txt The qucik borwn fox jpmus over the lazy dog. The program should accept a -s or --seed value for the random seed to ensure reproducibility: $ ./scrambler.py -s 1 ../inputs/fox.txt The qicuk bwron fox jupms over the lazy dog. It should print a usage if provided no arguments: $ ./scrambler.py usage: scrambler.py [-h] [-s int] str scrambler.py: error: the following arguments are required: str And a longer usage for -h or --help : $ ./scrambler.py -h usage: scrambler.py [-h] [-s int] str Scramble the letters of words positional arguments: str Input text or file optional arguments: -h, --help show this help message and exit -s int, --seed int Random seed (default: None) Run the test suite to ensure your program is working correctly: $ make test pytest -xv test.py ============================= test session starts ============================== ... collected 7 items test.py::test_exists PASSED [ 14%] test.py::test_usage PASSED [ 28%] test.py::test_text1 PASSED [ 42%] test.py::test_text2 PASSED [ 57%] test.py::test_file_bustle PASSED [ 71%] test.py::test_file_fox PASSED [ 85%] test.py::test_file_spiders PASSED [100%] ============================== 7 passed in 0.72s ===============================","title":"Scrambler"},{"location":"books/python/17_mad_libs/","text":"Mad Libs https://www.youtube.com/playlist?list=PLhOuww6rJJNPnNx_Emds00y2RX1Tbk59r Write a \"Mad Libs\" program that will read a given file and prompt the user for the parts of speech indicated in angle brackets, e.g., <verb> , replacing those values and printing the new text a la the beloved \"Mad Libs\" game. For example, the input file might look like this: $ cat inputs/fox.txt The quick <adjective> <noun> jumps <preposition> the lazy <noun>. When run with this input, the program would prompt the user for \"adjective,\" \"noun,\" etc. When all the answers have been collected, the new text will be printed: $ ./mad.py inputs/fox.txt Give me an adjective: scary Give me a noun: chair Give me a preposition: behind Give me a noun: sky The quick scary chair jumps behind the lazy sky. In order to test, the program should also accept all the values as -i or --inputs : $ ./mad.py inputs/fox.txt -i scary chair behind sky The quick scary chair jumps behind the lazy sky. If provided no arguments, the program should print a brief usage: $ ./mad.py usage: mad.py [-h] [-i [str [str ...]]] FILE mad.py: error: the following arguments are required: FILE Or a longer usage for -h or --help : $ ./mad.py -h usage: mad.py [-h] [-i [str [str ...]]] FILE Mad Libs positional arguments: FILE Input file optional arguments: -h, --help show this help message and exit -i [str [str ...]], --inputs [str [str ...]] Inputs (for testing) (default: None) Run the test suite to ensure your program is working correctly: $ make test pytest -xv test.py ============================= test session starts ============================== ... collected 7 items test.py::test_exists PASSED [ 14%] test.py::test_usage PASSED [ 28%] test.py::test_bad_file PASSED [ 42%] test.py::test_no_blanks PASSED [ 57%] test.py::test_fox PASSED [ 71%] test.py::test_help PASSED [ 85%] test.py::test_verona PASSED [100%] ============================== 7 passed in 0.65s ===============================","title":"Mad Libs"},{"location":"books/python/17_mad_libs/#mad-libs","text":"https://www.youtube.com/playlist?list=PLhOuww6rJJNPnNx_Emds00y2RX1Tbk59r Write a \"Mad Libs\" program that will read a given file and prompt the user for the parts of speech indicated in angle brackets, e.g., <verb> , replacing those values and printing the new text a la the beloved \"Mad Libs\" game. For example, the input file might look like this: $ cat inputs/fox.txt The quick <adjective> <noun> jumps <preposition> the lazy <noun>. When run with this input, the program would prompt the user for \"adjective,\" \"noun,\" etc. When all the answers have been collected, the new text will be printed: $ ./mad.py inputs/fox.txt Give me an adjective: scary Give me a noun: chair Give me a preposition: behind Give me a noun: sky The quick scary chair jumps behind the lazy sky. In order to test, the program should also accept all the values as -i or --inputs : $ ./mad.py inputs/fox.txt -i scary chair behind sky The quick scary chair jumps behind the lazy sky. If provided no arguments, the program should print a brief usage: $ ./mad.py usage: mad.py [-h] [-i [str [str ...]]] FILE mad.py: error: the following arguments are required: FILE Or a longer usage for -h or --help : $ ./mad.py -h usage: mad.py [-h] [-i [str [str ...]]] FILE Mad Libs positional arguments: FILE Input file optional arguments: -h, --help show this help message and exit -i [str [str ...]], --inputs [str [str ...]] Inputs (for testing) (default: None) Run the test suite to ensure your program is working correctly: $ make test pytest -xv test.py ============================= test session starts ============================== ... collected 7 items test.py::test_exists PASSED [ 14%] test.py::test_usage PASSED [ 28%] test.py::test_bad_file PASSED [ 42%] test.py::test_no_blanks PASSED [ 57%] test.py::test_fox PASSED [ 71%] test.py::test_help PASSED [ 85%] test.py::test_verona PASSED [100%] ============================== 7 passed in 0.65s ===============================","title":"Mad Libs"},{"location":"books/python/18_gematria/","text":"Gematria https://www.youtube.com/playlist?list=PLhOuww6rJJNMI45XbeSAiLdivKhzygwgr Write a program that will encode each word of a given text by summing the ASCII values of the characters. The text may come from the command line: $ ./gematria.py 'The quick brown fox jumps over the lazy dog.' 289 541 552 333 559 444 321 448 314 Or from an input file: $ ./gematria.py ../inputs/fox.txt 289 541 552 333 559 444 321 448 314 When run with no arguments, the program should print a brief usage: $ ./gematria.py usage: gematria.py [-h] str gematria.py: error: the following arguments are required: str Or a longer usage for -h and --help : $ ./gematria.py -h usage: gematria.py [-h] str Gematria positional arguments: str Input text or file optional arguments: -h, --help show this help message and exit Run the test suite to ensure that your program is working correctly: $ make test pytest -xv test.py ============================= test session starts ============================== ... collected 6 items test.py::test_exists PASSED [ 16%] test.py::test_usage PASSED [ 33%] test.py::test_text PASSED [ 50%] test.py::test_fox PASSED [ 66%] test.py::test_spiders PASSED [ 83%] test.py::test_sonnet PASSED [100%] ============================== 6 passed in 0.60s ===============================","title":"Gematria"},{"location":"books/python/18_gematria/#gematria","text":"https://www.youtube.com/playlist?list=PLhOuww6rJJNMI45XbeSAiLdivKhzygwgr Write a program that will encode each word of a given text by summing the ASCII values of the characters. The text may come from the command line: $ ./gematria.py 'The quick brown fox jumps over the lazy dog.' 289 541 552 333 559 444 321 448 314 Or from an input file: $ ./gematria.py ../inputs/fox.txt 289 541 552 333 559 444 321 448 314 When run with no arguments, the program should print a brief usage: $ ./gematria.py usage: gematria.py [-h] str gematria.py: error: the following arguments are required: str Or a longer usage for -h and --help : $ ./gematria.py -h usage: gematria.py [-h] str Gematria positional arguments: str Input text or file optional arguments: -h, --help show this help message and exit Run the test suite to ensure that your program is working correctly: $ make test pytest -xv test.py ============================= test session starts ============================== ... collected 6 items test.py::test_exists PASSED [ 16%] test.py::test_usage PASSED [ 33%] test.py::test_text PASSED [ 50%] test.py::test_fox PASSED [ 66%] test.py::test_spiders PASSED [ 83%] test.py::test_sonnet PASSED [100%] ============================== 6 passed in 0.60s ===============================","title":"Gematria"},{"location":"books/python/19_wod/","text":"WOD (Workout of the Day) https://www.youtube.com/playlist?list=PLhOuww6rJJNM2jtyu3zw3aIeZ8Ov7hSy- Create a program that will read a CSV -f or --file of exercises (default exercises.csv ) and create a Workout of the Day: $ ./wod.py Exercise Reps ------------------ ------ Pushups 74 Hand-stand pushups 10 Squats 29 Burpees 33 The program should accept an alternate --file : $ ./wod.py -f silly-exercises.csv Exercise Reps -------------------- ------ Erstwhile Lunges 18 Hanging Chads 90 Red Barchettas 36 Masochistic Eardowns 29 And should reject non-existent file arguments: $ ./wod.py -f lkjdflkj usage: wod.py [-h] [-f str] [-s int] [-n int] [-e] wod.py: error: argument -f/--file: can't open 'lkjdflkj': \\ [Errno 2] No such file or directory: 'lkjdflkj' The file structure looks like this: $ cat exercises.csv exercise,reps Burpees,20-50 Situps,40-100 Pushups,25-75 Squats,20-50 Pullups,10-30 Hand-stand pushups,5-20 Lunges,20-40 Plank,30-60 Crunches,20-30 The program should accept an -n or --num argument to control the number of exercises which are randomly chosen from the input file. The \"Reps\" value will be randomly chosen from the given low/high range in the \"reps\" column: $ ./wod.py -n 2 Exercise Reps ---------- ------ Situps 83 Pullups 30 The program should accept a -s or --seed value for the random seed to ensure reproducibility: $ ./wod.py -s 1 Exercise Reps ---------- ------ Pushups 56 Situps 88 Crunches 27 Burpees 35 As well as a -e or --easy flag to indicate that the reps should be halved: $ ./wod.py -s 1 -e Exercise Reps ---------- ------ Pushups 28 Situps 44 Crunches 13 Burpees 17 The program should print a usage for the -h or --help flags: $ ./wod.py -h usage: wod.py [-h] [-f str] [-s int] [-n int] [-e] Create Workout Of (the) Day (WOD) optional arguments: -h, --help show this help message and exit -f str, --file str CSV input file of exercises (default: exercises.csv) -s int, --seed int Random seed (default: None) -n int, --num int Number of exercises (default: 4) -e, --easy Halve the reps (default: False) Run the test suite to ensure your program is working correctly: $ make test pytest -xv test.py ============================= test session starts ============================== ... collected 8 items test.py::test_exists PASSED [ 12%] test.py::test_usage PASSED [ 25%] test.py::test_bad_num PASSED [ 37%] test.py::test_bad_file PASSED [ 50%] test.py::test_seed1 PASSED [ 62%] test.py::test_seed1_easy PASSED [ 75%] test.py::test_seed2_num8 PASSED [ 87%] test.py::test_seed4_num3_input2 PASSED [100%] ============================== 8 passed in 0.64s =============================== The test suite only checks your program using well-formed input files. There are several \"bad\" input files provided which are not used by the test but are provided for you to try with your program. These represent several types of real-world problems you might encounter parsing delimited text files.","title":"WOD (Workout of the Day)"},{"location":"books/python/19_wod/#wod-workout-of-the-day","text":"https://www.youtube.com/playlist?list=PLhOuww6rJJNM2jtyu3zw3aIeZ8Ov7hSy- Create a program that will read a CSV -f or --file of exercises (default exercises.csv ) and create a Workout of the Day: $ ./wod.py Exercise Reps ------------------ ------ Pushups 74 Hand-stand pushups 10 Squats 29 Burpees 33 The program should accept an alternate --file : $ ./wod.py -f silly-exercises.csv Exercise Reps -------------------- ------ Erstwhile Lunges 18 Hanging Chads 90 Red Barchettas 36 Masochistic Eardowns 29 And should reject non-existent file arguments: $ ./wod.py -f lkjdflkj usage: wod.py [-h] [-f str] [-s int] [-n int] [-e] wod.py: error: argument -f/--file: can't open 'lkjdflkj': \\ [Errno 2] No such file or directory: 'lkjdflkj' The file structure looks like this: $ cat exercises.csv exercise,reps Burpees,20-50 Situps,40-100 Pushups,25-75 Squats,20-50 Pullups,10-30 Hand-stand pushups,5-20 Lunges,20-40 Plank,30-60 Crunches,20-30 The program should accept an -n or --num argument to control the number of exercises which are randomly chosen from the input file. The \"Reps\" value will be randomly chosen from the given low/high range in the \"reps\" column: $ ./wod.py -n 2 Exercise Reps ---------- ------ Situps 83 Pullups 30 The program should accept a -s or --seed value for the random seed to ensure reproducibility: $ ./wod.py -s 1 Exercise Reps ---------- ------ Pushups 56 Situps 88 Crunches 27 Burpees 35 As well as a -e or --easy flag to indicate that the reps should be halved: $ ./wod.py -s 1 -e Exercise Reps ---------- ------ Pushups 28 Situps 44 Crunches 13 Burpees 17 The program should print a usage for the -h or --help flags: $ ./wod.py -h usage: wod.py [-h] [-f str] [-s int] [-n int] [-e] Create Workout Of (the) Day (WOD) optional arguments: -h, --help show this help message and exit -f str, --file str CSV input file of exercises (default: exercises.csv) -s int, --seed int Random seed (default: None) -n int, --num int Number of exercises (default: 4) -e, --easy Halve the reps (default: False) Run the test suite to ensure your program is working correctly: $ make test pytest -xv test.py ============================= test session starts ============================== ... collected 8 items test.py::test_exists PASSED [ 12%] test.py::test_usage PASSED [ 25%] test.py::test_bad_num PASSED [ 37%] test.py::test_bad_file PASSED [ 50%] test.py::test_seed1 PASSED [ 62%] test.py::test_seed1_easy PASSED [ 75%] test.py::test_seed2_num8 PASSED [ 87%] test.py::test_seed4_num3_input2 PASSED [100%] ============================== 8 passed in 0.64s =============================== The test suite only checks your program using well-formed input files. There are several \"bad\" input files provided which are not used by the test but are provided for you to try with your program. These represent several types of real-world problems you might encounter parsing delimited text files.","title":"WOD (Workout of the Day)"},{"location":"books/python/20_password/","text":"Password https://www.youtube.com/playlist?list=PLhOuww6rJJNMRNnUQyUkGjpztCBUCiwZt Cf. https://xkcd.com/936/ Create a program that will randomly combine words from given text(s) to create novel, memorable, unbreakable passwords: $ ./password.py EchinochloaJapeCollinglyRadiotrician EthanedithiolRefleePrebudgetPolyphonism BerriChamaecyparisOutdraftArcifera By default, the program should read the standard word dictionary /usr/share/dict/words for the word list but should also accept optional positional arguments. The program should create a list of unique words with all non-word characters removed, randomly select some -w or --num_words for each password, and join the titlecased selections into new passwords: $ ./password.py -w 3 scarlet/* ShouldOfferPeculiar LongDeathWill LikeVenerableBear The words selected should have a -m or --min_word_len that defaults to 3 in order to remove short, unmemorable words: $ ./password.py -m 5 sonnets/* IndigestPublishPaintingParticular AccidentImprintDancePosterity ExcuseGrossStateLaughd The program should accept a -n and --num flag to control the number of passwords that are created: $ ./password.py -n 2 const/* NumberFollowExtraordinaryCompel ThinkLegislationAppellateEligible Be sure to accept a -s or --seed option to use as the random seed to ensure reproducibility: $ ./password.py -s 1 ChromePorometerUnwastableUnconditionated ThujaAwesomelyEyeglanceCatabolin OptiveThicketMoratoriaNoncompetent If the --l33t flag is present, the passwords should be obfuscated by: Using the \"ransom\" algorightm from chapter 13 Using a character substitution as in chapter 5 Add a randomly selected punctuation at the end Here is the substitution table: a => @ A => 4 o => 0 O => 0 t => + e => 3 E => 3 I => 1 S => 5 Here is what the output would look like without: $ ./password.py sonnets/* -s 1 EagerCarcanetLilyDial WantTempestTwireRondure HealCrawlVerdictBase And the same passwords with the encoding: $ ./password.py sonnets/* -s 1 --l33t 34G3rc4rC4n3TliLydi@L. 5p0r+1V3B@sT@RDhURT5uFf3Rd\\ rh3T0r1cC0n+3ndsU1T3Dw1l+` The program should print a usage for the -h and --help flags: $ ./password.py -h usage: password.py [-h] [-n int] [-w int] [-m int] [-s int] [-l] [FILE [FILE ...]] Password maker positional arguments: FILE Input file(s) (default: [<_io.TextIOWrapper name='/usr/share/dict/words' mode='r' encoding='UTF-8'>]) optional arguments: -h, --help show this help message and exit -n int, --num int Number of passwords to generate (default: 3) -w int, --num_words int Number of words to use for password (default: 4) -m int, --min_word_len int Minimum word length (default: 4) -s int, --seed int Random seed (default: None) -l, --l33t Obfuscate letters (default: False) Run the test suite to ensure your program is correct: $ make test pytest -xv test.py ============================= test session starts ============================== ... collected 7 items test.py::test_exists PASSED [ 14%] test.py::test_usage PASSED [ 28%] test.py::test_bad_file PASSED [ 42%] test.py::test_bad_num PASSED [ 57%] test.py::test_bad_num_words PASSED [ 71%] test.py::test_bad_min_word_len PASSED [ 85%] test.py::test_bad_seed PASSED [100%] ============================== 7 passed in 0.46s ===============================","title":"Password"},{"location":"books/python/20_password/#password","text":"https://www.youtube.com/playlist?list=PLhOuww6rJJNMRNnUQyUkGjpztCBUCiwZt Cf. https://xkcd.com/936/ Create a program that will randomly combine words from given text(s) to create novel, memorable, unbreakable passwords: $ ./password.py EchinochloaJapeCollinglyRadiotrician EthanedithiolRefleePrebudgetPolyphonism BerriChamaecyparisOutdraftArcifera By default, the program should read the standard word dictionary /usr/share/dict/words for the word list but should also accept optional positional arguments. The program should create a list of unique words with all non-word characters removed, randomly select some -w or --num_words for each password, and join the titlecased selections into new passwords: $ ./password.py -w 3 scarlet/* ShouldOfferPeculiar LongDeathWill LikeVenerableBear The words selected should have a -m or --min_word_len that defaults to 3 in order to remove short, unmemorable words: $ ./password.py -m 5 sonnets/* IndigestPublishPaintingParticular AccidentImprintDancePosterity ExcuseGrossStateLaughd The program should accept a -n and --num flag to control the number of passwords that are created: $ ./password.py -n 2 const/* NumberFollowExtraordinaryCompel ThinkLegislationAppellateEligible Be sure to accept a -s or --seed option to use as the random seed to ensure reproducibility: $ ./password.py -s 1 ChromePorometerUnwastableUnconditionated ThujaAwesomelyEyeglanceCatabolin OptiveThicketMoratoriaNoncompetent If the --l33t flag is present, the passwords should be obfuscated by: Using the \"ransom\" algorightm from chapter 13 Using a character substitution as in chapter 5 Add a randomly selected punctuation at the end Here is the substitution table: a => @ A => 4 o => 0 O => 0 t => + e => 3 E => 3 I => 1 S => 5 Here is what the output would look like without: $ ./password.py sonnets/* -s 1 EagerCarcanetLilyDial WantTempestTwireRondure HealCrawlVerdictBase And the same passwords with the encoding: $ ./password.py sonnets/* -s 1 --l33t 34G3rc4rC4n3TliLydi@L. 5p0r+1V3B@sT@RDhURT5uFf3Rd\\ rh3T0r1cC0n+3ndsU1T3Dw1l+` The program should print a usage for the -h and --help flags: $ ./password.py -h usage: password.py [-h] [-n int] [-w int] [-m int] [-s int] [-l] [FILE [FILE ...]] Password maker positional arguments: FILE Input file(s) (default: [<_io.TextIOWrapper name='/usr/share/dict/words' mode='r' encoding='UTF-8'>]) optional arguments: -h, --help show this help message and exit -n int, --num int Number of passwords to generate (default: 3) -w int, --num_words int Number of words to use for password (default: 4) -m int, --min_word_len int Minimum word length (default: 4) -s int, --seed int Random seed (default: None) -l, --l33t Obfuscate letters (default: False) Run the test suite to ensure your program is correct: $ make test pytest -xv test.py ============================= test session starts ============================== ... collected 7 items test.py::test_exists PASSED [ 14%] test.py::test_usage PASSED [ 28%] test.py::test_bad_file PASSED [ 42%] test.py::test_bad_num PASSED [ 57%] test.py::test_bad_num_words PASSED [ 71%] test.py::test_bad_min_word_len PASSED [ 85%] test.py::test_bad_seed PASSED [100%] ============================== 7 passed in 0.46s ===============================","title":"Password"},{"location":"books/python/21_tictactoe/","text":"Tic-Tac-Toe https://www.youtube.com/playlist?list=PLhOuww6rJJNObtig0Kr-jgTJly1x04jgz Create a Python program called tictactoe.py that will play a single round of the game Tic-Tac-Toe. The program should accept the following parameters: -b | --board : The optional state of the board for the play. This will be a string of 9 characters representing the 9 cells of the 3x3 board. The string should be composed only of X and O to denote a player occupying that cell or . to show that the cell is open. The default is 9 '.' as all cells are open. -p | --player : An optional player which must be either X or O . -c | --cell : An optional cell which must be in the range 1-9 (inclusive). Here is the usage the program should print for -h or --help : $ ./tictactoe.py -h usage: tictactoe.py [-h] [-b str] [-p str] [-c int] Tic-Tac-Toe optional arguments: -h, --help show this help message and exit -b str, --board str The state of the board (default: .........) -p str, --player str Player (default: None) -c int, --cell int Cell 1-9 (default: None) The program will print the state of the board plus any modifications to the state made by --player and --cell along with the final outcome of the game which can either be \"No winner\" or \"{player} has won.\" When run with no arguments, it should print a blank Tic-Tac-Toe board and \"No winner\": $ ./tictactoe.py ------------- | 1 | 2 | 3 | ------------- | 4 | 5 | 6 | ------------- | 7 | 8 | 9 | ------------- No winner. Given a valid --player trying to take an unoccupied --cell , the program should modify the state before printing the board and deciding the outcome: $ ./tictactoe.py -p X -c 1 ------------- | X | 2 | 3 | ------------- | 4 | 5 | 6 | ------------- | 7 | 8 | 9 | ------------- No winner. The program should error out for a bad --board : $ ./tictactoe.py -b ABC...... usage: tictactoe.py [-h] [-b str] [-p str] [-c int] tictactoe.py: error: --board \"ABC......\" must be 9 characters of ., X, O Or a bad --cell : $ ./tictactoe.py -p X -c 10 usage: tictactoe.py [-h] [-b str] [-p str] [-c int] tictactoe.py: error: argument -c/--cell: invalid choice: 10 \\ (choose from 1, 2, 3, 4, 5, 6, 7, 8, 9) Or a bad --player : $ ./tictactoe.py -p A -c 1 usage: tictactoe.py [-h] [-b str] [-p str] [-c int] tictactoe.py: error: argument -p/--player: invalid choice: 'A' \\ (choose from 'X', 'O') Or in the event a --player is trying to take an occupied --cell : $ ./tictactoe.py -b X........ -p O -c 1 usage: tictactoe.py [-h] [-b str] [-p str] [-c int] tictactoe.py: error: --cell \"1\" already taken Or if only --player or --cell is provided: $ ./tictactoe.py --player X usage: tictactoe.py [-h] [-b board] [-p player] [-c cell] tictactoe.py: error: Must provide both --player and --cell The program should detect a winning state: $ ./tictactoe.py -b .XX....OO -p X -c 1 ------------- | X | X | X | ------------- | 4 | 5 | 6 | ------------- | 7 | O | O | ------------- X has won! The program should pass all tests: $ make test pytest -xv test.py ============================= test session starts ============================== ... collected 15 items test.py::test_exists PASSED [ 6%] test.py::test_usage PASSED [ 13%] test.py::test_no_input PASSED [ 20%] test.py::test_bad_board PASSED [ 26%] test.py::test_bad_player PASSED [ 33%] test.py::test_bad_cell_int PASSED [ 40%] test.py::test_bad_cell_str PASSED [ 46%] test.py::test_both_player_and_cell PASSED [ 53%] test.py::test_good_board_01 PASSED [ 60%] test.py::test_good_board_02 PASSED [ 66%] test.py::test_mutate_board_01 PASSED [ 73%] test.py::test_mutate_board_02 PASSED [ 80%] test.py::test_mutate_cell_taken PASSED [ 86%] test.py::test_winning PASSED [ 93%] test.py::test_losing PASSED [100%] ============================== 15 passed in 2.12s ==============================","title":"Tic-Tac-Toe"},{"location":"books/python/21_tictactoe/#tic-tac-toe","text":"https://www.youtube.com/playlist?list=PLhOuww6rJJNObtig0Kr-jgTJly1x04jgz Create a Python program called tictactoe.py that will play a single round of the game Tic-Tac-Toe. The program should accept the following parameters: -b | --board : The optional state of the board for the play. This will be a string of 9 characters representing the 9 cells of the 3x3 board. The string should be composed only of X and O to denote a player occupying that cell or . to show that the cell is open. The default is 9 '.' as all cells are open. -p | --player : An optional player which must be either X or O . -c | --cell : An optional cell which must be in the range 1-9 (inclusive). Here is the usage the program should print for -h or --help : $ ./tictactoe.py -h usage: tictactoe.py [-h] [-b str] [-p str] [-c int] Tic-Tac-Toe optional arguments: -h, --help show this help message and exit -b str, --board str The state of the board (default: .........) -p str, --player str Player (default: None) -c int, --cell int Cell 1-9 (default: None) The program will print the state of the board plus any modifications to the state made by --player and --cell along with the final outcome of the game which can either be \"No winner\" or \"{player} has won.\" When run with no arguments, it should print a blank Tic-Tac-Toe board and \"No winner\": $ ./tictactoe.py ------------- | 1 | 2 | 3 | ------------- | 4 | 5 | 6 | ------------- | 7 | 8 | 9 | ------------- No winner. Given a valid --player trying to take an unoccupied --cell , the program should modify the state before printing the board and deciding the outcome: $ ./tictactoe.py -p X -c 1 ------------- | X | 2 | 3 | ------------- | 4 | 5 | 6 | ------------- | 7 | 8 | 9 | ------------- No winner. The program should error out for a bad --board : $ ./tictactoe.py -b ABC...... usage: tictactoe.py [-h] [-b str] [-p str] [-c int] tictactoe.py: error: --board \"ABC......\" must be 9 characters of ., X, O Or a bad --cell : $ ./tictactoe.py -p X -c 10 usage: tictactoe.py [-h] [-b str] [-p str] [-c int] tictactoe.py: error: argument -c/--cell: invalid choice: 10 \\ (choose from 1, 2, 3, 4, 5, 6, 7, 8, 9) Or a bad --player : $ ./tictactoe.py -p A -c 1 usage: tictactoe.py [-h] [-b str] [-p str] [-c int] tictactoe.py: error: argument -p/--player: invalid choice: 'A' \\ (choose from 'X', 'O') Or in the event a --player is trying to take an occupied --cell : $ ./tictactoe.py -b X........ -p O -c 1 usage: tictactoe.py [-h] [-b str] [-p str] [-c int] tictactoe.py: error: --cell \"1\" already taken Or if only --player or --cell is provided: $ ./tictactoe.py --player X usage: tictactoe.py [-h] [-b board] [-p player] [-c cell] tictactoe.py: error: Must provide both --player and --cell The program should detect a winning state: $ ./tictactoe.py -b .XX....OO -p X -c 1 ------------- | X | X | X | ------------- | 4 | 5 | 6 | ------------- | 7 | O | O | ------------- X has won! The program should pass all tests: $ make test pytest -xv test.py ============================= test session starts ============================== ... collected 15 items test.py::test_exists PASSED [ 6%] test.py::test_usage PASSED [ 13%] test.py::test_no_input PASSED [ 20%] test.py::test_bad_board PASSED [ 26%] test.py::test_bad_player PASSED [ 33%] test.py::test_bad_cell_int PASSED [ 40%] test.py::test_bad_cell_str PASSED [ 46%] test.py::test_both_player_and_cell PASSED [ 53%] test.py::test_good_board_01 PASSED [ 60%] test.py::test_good_board_02 PASSED [ 66%] test.py::test_mutate_board_01 PASSED [ 73%] test.py::test_mutate_board_02 PASSED [ 80%] test.py::test_mutate_cell_taken PASSED [ 86%] test.py::test_winning PASSED [ 93%] test.py::test_losing PASSED [100%] ============================== 15 passed in 2.12s ==============================","title":"Tic-Tac-Toe"},{"location":"books/python/22_itictactoe/","text":"Interactive Tic-Tac-Toe https://www.youtube.com/playlist?list=PLhOuww6rJJNOlaMDHHIQrvWZn--GGNlHU Write a Python program called itictactoe.py that will play an interactive game of Tic-Tac-Toe starting from a blank board and iterating between players X and O until the game is finished due to a draw or a win. When the game starts, a blank board with cells 1-9 should be shown along with a prompt for the current player (always starting with X ) to select a cell: ------------- | 1 | 2 | 3 | ------------- | 4 | 5 | 6 | ------------- | 7 | 8 | 9 | ------------- Player X, what is your move? [q to quit]: 1 If a player tries to select an occupied cell, the move is disallowed and the same player goes until a valid choice is made: ------------- | X | 2 | 3 | ------------- | 4 | 5 | 6 | ------------- | 7 | 8 | 9 | ------------- Player O, what is your move? [q to quit]: 1 ------------- | X | 2 | 3 | ------------- | 4 | 5 | 6 | ------------- | 7 | 8 | 9 | ------------- Cell \"1\" already taken Player O, what is your move? [q to quit]: Play should stop when a player has won: ------------- | X | O | 3 | ------------- | X | O | 6 | ------------- | 7 | 8 | 9 | ------------- Player X, what is your move? [q to quit]: 7 X has won! Or when the game is a draw: ------------- | X | O | O | ------------- | O | X | X | ------------- | X | 8 | O | ------------- Player X, what is your move? [q to quit]: 8 All right, we'll call it a draw.","title":"Interactive Tic-Tac-Toe"},{"location":"books/python/22_itictactoe/#interactive-tic-tac-toe","text":"https://www.youtube.com/playlist?list=PLhOuww6rJJNOlaMDHHIQrvWZn--GGNlHU Write a Python program called itictactoe.py that will play an interactive game of Tic-Tac-Toe starting from a blank board and iterating between players X and O until the game is finished due to a draw or a win. When the game starts, a blank board with cells 1-9 should be shown along with a prompt for the current player (always starting with X ) to select a cell: ------------- | 1 | 2 | 3 | ------------- | 4 | 5 | 6 | ------------- | 7 | 8 | 9 | ------------- Player X, what is your move? [q to quit]: 1 If a player tries to select an occupied cell, the move is disallowed and the same player goes until a valid choice is made: ------------- | X | 2 | 3 | ------------- | 4 | 5 | 6 | ------------- | 7 | 8 | 9 | ------------- Player O, what is your move? [q to quit]: 1 ------------- | X | 2 | 3 | ------------- | 4 | 5 | 6 | ------------- | 7 | 8 | 9 | ------------- Cell \"1\" already taken Player O, what is your move? [q to quit]: Play should stop when a player has won: ------------- | X | O | 3 | ------------- | X | O | 6 | ------------- | 7 | 8 | 9 | ------------- Player X, what is your move? [q to quit]: 7 X has won! Or when the game is a draw: ------------- | X | O | O | ------------- | O | X | X | ------------- | X | 8 | O | ------------- Player X, what is your move? [q to quit]: 8 All right, we'll call it a draw.","title":"Interactive Tic-Tac-Toe"},{"location":"books/python/appendix_argparse/","text":"Examples of programs using argparse This is a collection of example programs to show how you can use the standard Python module argparse to handle command-line aruguments. one_arg.py : one positional argument two_args.py : two positional arguments nargs2.py : another way to handle two positional arguments nargs+.py : one or more positional arguments manual.py : manually validating an argument inside get_args choices.py : using choices to restrict values cat_n.py : a Python implementation of cat -n","title":"Examples of programs using `argparse`"},{"location":"books/python/appendix_argparse/#examples-of-programs-using-argparse","text":"This is a collection of example programs to show how you can use the standard Python module argparse to handle command-line aruguments. one_arg.py : one positional argument two_args.py : two positional arguments nargs2.py : another way to handle two positional arguments nargs+.py : one or more positional arguments manual.py : manually validating an argument inside get_args choices.py : using choices to restrict values cat_n.py : a Python implementation of cat -n","title":"Examples of programs using argparse"},{"location":"books/python/docker/","text":"Tiny Python Projects Docker If you like, you can run and test all the code using Python 3.8.3 in a Docker image: $ docker pull kyclark/tiny_python_projects:0.2.0 $ docker run -it --rm kyclark/tiny_python_projects:0.2.0 bash","title":"Tiny Python Projects Docker"},{"location":"books/python/docker/#tiny-python-projects-docker","text":"If you like, you can run and test all the code using Python 3.8.3 in a Docker image: $ docker pull kyclark/tiny_python_projects:0.2.0 $ docker run -it --rm kyclark/tiny_python_projects:0.2.0 bash","title":"Tiny Python Projects Docker"},{"location":"books/python/extra/","text":"Extras These are additional coding challenges for which I will not provide solutions, only tests. Good luck!","title":"Extras"},{"location":"books/python/extra/#extras","text":"These are additional coding challenges for which I will not provide solutions, only tests. Good luck!","title":"Extras"},{"location":"git/","text":"Git-it (Desktop App) Git-it is a desktop (Mac, Windows and Linux) app that teaches you how to use Git and GitHub on the command line . \ud83d\udea9The app includes translations in these languages: Spanish (ES), Spanish (CO), French, Portugese (BR), Ukrainian, Traditional Chinese, Japanese, and Korean. \ud83d\udea9 Previously it ran in terminal (the command line application) with a guide online but now the guide is the app and it runs on your desktop on its own :sparkles: This will be the only maintained version going forward :arrow_right: Hello future Forkers, Branchers and Pull Requesters! This application contains challenges for learning Git and GitHub\u2014by using real Git and GitHub, not emulators. You'll be learning the awesome (and not so scary) command line and GitHub which means when you finish all of the challenges you'll have real repositories on your GitHub account and green squares on your contribution chart . What to Install You will need this app, Git-it as well as a text editor. You'll also of course need Git and the first challenge in Git-it helps you get that set up. But if you want to get a head start, go for it! You'll continue to use Git and your text editor throughout your bright social coding future. As a part of the challenges you'll also create a (free) account on GitHub. If you've already got one, high-five! Git We recommend installing GitHub Desktop (free) because it installs Git in the most consistent way across supported operating systems (Windows and Mac). We won't use the app itself in the challenges (but it is really useful once you get going in Git!), just the Git that it install for you. Note\u2014If you're using Windows, you should use the Git Shell app as your terminal\u2014it is installed with GitHub Desktop. In Mac and Linux you can use the app Terminal , which is already on your computer. Text Editor I'm quite partial (I'm on the team!) but Atom is a great text editor (also free) and it is built on Electron.js , just like Git-it. Visit the website and download the version for your operating system. Sublime , Microsoft VS Code and Adobe Brackets are other options. Git-it You can view the releases section of this repository to find the download for your operating system. Click to download your version. Once it has downloaded to your default Downloads directory, unzip the folder and run the Git-it executable. The executables for Mac, Windows and Linux: Mac Right (control) click the Git-it icon, select Open and then Open again. You can drag the icon into your Applications directory if you want, but it's not required. If needed, more detailed installation instructions can be found in this issue. Windows Double-click the executable. Linux Double-click the executable. If the app isn't running, see this issue . Get Started! Open Git-it and click the button to begin the first challenge. Have your terminal and text editor open, too. Follow along with the instructions in each challenge and use the terminal or editor as instructed. When you've completed the steps in a challenge click 'Verify'. Depending on the challenge you may need to also select the folder you did your work in for Git-it to verify. Questions? Open an issue on this repository. Want to contribute or build locally? See the contributing documentation Tips For Getting Started Code snippets often times look like $ some code-stuff --here . The dollar sign identifies the line as one a user would enter into the command line, but you don't actually include it when you type it into terminal. In this case, you'd actually just type some code-stuff --here . Variables are indicated by <VARIABLENAME> in code snippets. When you actually use the line of code, replace <VARIABLENAME> , with your variable. For instance to make a new folder in terminal the format is, mkdir <FOLDERNAME> , so if you wanted to make a folder named 'octocat', you'd type: mkdir octocat . Command line, terminal and bash all basically mean the same thing: the MS-DOS, Doogie Howser looking screen full of words and numbers. It's awesomely powerful and allows you to control your computer with text commands. You can do a lot of things from your terminal like delete, rename, copy or create files and folders; run scripts and send things back and forth between servers (like the ones storing things on GitHub.com) and your computer (also a server!).","title":"Git-it (Desktop App)"},{"location":"git/#git-it-desktop-app","text":"Git-it is a desktop (Mac, Windows and Linux) app that teaches you how to use Git and GitHub on the command line . \ud83d\udea9The app includes translations in these languages: Spanish (ES), Spanish (CO), French, Portugese (BR), Ukrainian, Traditional Chinese, Japanese, and Korean. \ud83d\udea9 Previously it ran in terminal (the command line application) with a guide online but now the guide is the app and it runs on your desktop on its own :sparkles: This will be the only maintained version going forward :arrow_right:","title":"Git-it (Desktop App)"},{"location":"git/#hello-future-forkers-branchers-and-pull-requesters","text":"This application contains challenges for learning Git and GitHub\u2014by using real Git and GitHub, not emulators. You'll be learning the awesome (and not so scary) command line and GitHub which means when you finish all of the challenges you'll have real repositories on your GitHub account and green squares on your contribution chart .","title":"Hello future Forkers, Branchers and Pull Requesters!"},{"location":"git/#what-to-install","text":"You will need this app, Git-it as well as a text editor. You'll also of course need Git and the first challenge in Git-it helps you get that set up. But if you want to get a head start, go for it! You'll continue to use Git and your text editor throughout your bright social coding future. As a part of the challenges you'll also create a (free) account on GitHub. If you've already got one, high-five!","title":"What to Install"},{"location":"git/#git","text":"We recommend installing GitHub Desktop (free) because it installs Git in the most consistent way across supported operating systems (Windows and Mac). We won't use the app itself in the challenges (but it is really useful once you get going in Git!), just the Git that it install for you. Note\u2014If you're using Windows, you should use the Git Shell app as your terminal\u2014it is installed with GitHub Desktop. In Mac and Linux you can use the app Terminal , which is already on your computer.","title":"Git"},{"location":"git/#text-editor","text":"I'm quite partial (I'm on the team!) but Atom is a great text editor (also free) and it is built on Electron.js , just like Git-it. Visit the website and download the version for your operating system. Sublime , Microsoft VS Code and Adobe Brackets are other options.","title":"Text Editor"},{"location":"git/#git-it","text":"You can view the releases section of this repository to find the download for your operating system. Click to download your version. Once it has downloaded to your default Downloads directory, unzip the folder and run the Git-it executable. The executables for Mac, Windows and Linux: Mac Right (control) click the Git-it icon, select Open and then Open again. You can drag the icon into your Applications directory if you want, but it's not required. If needed, more detailed installation instructions can be found in this issue. Windows Double-click the executable. Linux Double-click the executable. If the app isn't running, see this issue .","title":"Git-it"},{"location":"git/#get-started","text":"Open Git-it and click the button to begin the first challenge. Have your terminal and text editor open, too. Follow along with the instructions in each challenge and use the terminal or editor as instructed. When you've completed the steps in a challenge click 'Verify'. Depending on the challenge you may need to also select the folder you did your work in for Git-it to verify. Questions? Open an issue on this repository. Want to contribute or build locally? See the contributing documentation","title":"Get Started!"},{"location":"git/#tips-for-getting-started","text":"Code snippets often times look like $ some code-stuff --here . The dollar sign identifies the line as one a user would enter into the command line, but you don't actually include it when you type it into terminal. In this case, you'd actually just type some code-stuff --here . Variables are indicated by <VARIABLENAME> in code snippets. When you actually use the line of code, replace <VARIABLENAME> , with your variable. For instance to make a new folder in terminal the format is, mkdir <FOLDERNAME> , so if you wanted to make a folder named 'octocat', you'd type: mkdir octocat . Command line, terminal and bash all basically mean the same thing: the MS-DOS, Doogie Howser looking screen full of words and numbers. It's awesomely powerful and allows you to control your computer with text commands. You can do a lot of things from your terminal like delete, rename, copy or create files and folders; run scripts and send things back and forth between servers (like the ones storing things on GitHub.com) and your computer (also a server!).","title":"Tips For Getting Started"},{"location":"git/CONTRIBUTING/","text":"Contributing to Git-it Contributions are more than welcome! Checkout the help wanted labels for ideas! \ud83d\udce3 Provide a description in your Issue/Pull Request. In your pull request please explain what the problem was (with gifs or screenshots would be fantastic!) and how your changes fix it. \ud83d\udeab \ud83d\ude40 :fire: No description provided. :fire: \ud83d\ude40 \ud83d\udeab Code style is JS Standard and no ES6 syntax :tada: but open to relevant new methods. Changes to the content of the pages must be made in the challenge-content directory (for appropriate language). For more information on how the app works, see the documentation . Building Locally If you want to build this locally you'll need Node.js on your computer. Then clone this repository, install dependencies and launch: $ git clone https://github.com/jlord/git-it-electron $ cd git-it-electron $ npm install $ npm start Packaging for OS X, Windows or Linux Here's how to create a Git-it executable for Windows, OS X and Linux. You'll need Node.js on your computer and Wine if you're packaging for Windows from a non Windows machine (more on this below). Use npm 3 To package a release you'll need atleast npm version 3 on your computer. To check your version of npm: $ npm -v This is because the newer version of npm flattens the dependency tree. This is essential for creating a version of Git-it that runs on Windows, which has limits to file path lengths. Clone and Install Dependencies Clone this repository and install the dependencies: $ git clone https://github.com/jlord/git-it-electron $ cd git-it-electron $ npm install Package If you have made any changes to the code or you just cloned this project from github, you'll need to rebuild all of the challenges and/or pages. If you haven't, skip to the next step! $ npm run build-all OS X, Linux, Windows Each generated folder is put in the /out directory. $ npm run pack-mac This will output the contents of the application to a folder at ../out/Git-it-darwin-x64 . $ npm run pack-lin This will output the contents of the application to a folder at ../out/Git-it-linux-x64 . $ npm run pack-win A note from electron-packager , the module we use to package these apps: Building Windows apps from non-Windows platforms Building an Electron app for the Windows platform with a custom icon requires editing the Electron.exe file. Currently, electron-packager uses node-rcedit to accomplish this. A Windows executable is bundled in that node package and needs to be run in order for this functionality to work, so on non-Windows platforms, Wine needs to be installed. On OS X, it is installable via Homebrew . This will output the contents of the application to a folder at ../out/Git-it-win32-ia32 . Translations to other languages If you want to add a new language to this project, here are some step you need to do. Add locale code First, edit locale.js and add locale code in it. You can use any editor you like. $ vim lib/locale.js In locale.js , there must have a variable called 'available', and add your language in it. For example, we have already had three languages, and wanted to add German(Germany): var available = { 'en-US': 'English', 'ja-JP': '\u65e5\u672c\u8a9e', 'zh-TW': '\u4e2d\u6587(\u81fa\u7063)', 'de-DE': 'Deutsch' } Before colon is your language code, it must look like '\\<lang>-\\<location>'. '\\<lang>' is your language, in this case, 'de' is the language code of 'German'. '\\<location>' is your location code, in this case, 'DE' is the location code of 'Germany'. If you don't know what your language/location code, you can find it here . The language code MUST be all lowercase, and location code MUST be all uppercase. If there are lots of locations using same language, you could add your language in variable 'aliases'. App will auto-redirect to target language. For example, There are five locations using 'German' as their language (de-AT, de-CH, de-DE, de-LI and de-LU), you can add 'de' into 'aliases' and let app using 'de-DE' for default 'de' language. var aliases = { 'en': 'en-US', 'ja': 'ja-JP', 'zh': 'zh-TW', 'de': 'de-DE' } Locale in aliases MUST point to a locale existed in available. Translate files All files that translator should edit is in resources/contents . We suggest translator using 'en-US' as original language to translate. cd resources/contents cp en-US '<your-lang>-<your-location>' Folder name in resources/contents MUST be the same as the locale you added in locale.js. Build Don't forget to build to generate built file. npm run build-all","title":"Contributing to Git-it"},{"location":"git/CONTRIBUTING/#contributing-to-git-it","text":"Contributions are more than welcome! Checkout the help wanted labels for ideas! \ud83d\udce3 Provide a description in your Issue/Pull Request. In your pull request please explain what the problem was (with gifs or screenshots would be fantastic!) and how your changes fix it. \ud83d\udeab \ud83d\ude40 :fire: No description provided. :fire: \ud83d\ude40 \ud83d\udeab Code style is JS Standard and no ES6 syntax :tada: but open to relevant new methods. Changes to the content of the pages must be made in the challenge-content directory (for appropriate language). For more information on how the app works, see the documentation .","title":"Contributing to Git-it"},{"location":"git/CONTRIBUTING/#building-locally","text":"If you want to build this locally you'll need Node.js on your computer. Then clone this repository, install dependencies and launch: $ git clone https://github.com/jlord/git-it-electron $ cd git-it-electron $ npm install $ npm start","title":"Building Locally"},{"location":"git/CONTRIBUTING/#packaging-for-os-x-windows-or-linux","text":"Here's how to create a Git-it executable for Windows, OS X and Linux. You'll need Node.js on your computer and Wine if you're packaging for Windows from a non Windows machine (more on this below).","title":"Packaging for OS X, Windows or Linux"},{"location":"git/CONTRIBUTING/#use-npm-3","text":"To package a release you'll need atleast npm version 3 on your computer. To check your version of npm: $ npm -v This is because the newer version of npm flattens the dependency tree. This is essential for creating a version of Git-it that runs on Windows, which has limits to file path lengths.","title":"Use npm 3"},{"location":"git/CONTRIBUTING/#clone-and-install-dependencies","text":"Clone this repository and install the dependencies: $ git clone https://github.com/jlord/git-it-electron $ cd git-it-electron $ npm install","title":"Clone and Install Dependencies"},{"location":"git/CONTRIBUTING/#package","text":"If you have made any changes to the code or you just cloned this project from github, you'll need to rebuild all of the challenges and/or pages. If you haven't, skip to the next step! $ npm run build-all","title":"Package"},{"location":"git/CONTRIBUTING/#os-x-linux-windows","text":"Each generated folder is put in the /out directory. $ npm run pack-mac This will output the contents of the application to a folder at ../out/Git-it-darwin-x64 . $ npm run pack-lin This will output the contents of the application to a folder at ../out/Git-it-linux-x64 . $ npm run pack-win A note from electron-packager , the module we use to package these apps: Building Windows apps from non-Windows platforms Building an Electron app for the Windows platform with a custom icon requires editing the Electron.exe file. Currently, electron-packager uses node-rcedit to accomplish this. A Windows executable is bundled in that node package and needs to be run in order for this functionality to work, so on non-Windows platforms, Wine needs to be installed. On OS X, it is installable via Homebrew . This will output the contents of the application to a folder at ../out/Git-it-win32-ia32 .","title":"OS X, Linux, Windows"},{"location":"git/CONTRIBUTING/#translations-to-other-languages","text":"If you want to add a new language to this project, here are some step you need to do.","title":"Translations to other languages"},{"location":"git/CONTRIBUTING/#add-locale-code","text":"First, edit locale.js and add locale code in it. You can use any editor you like. $ vim lib/locale.js In locale.js , there must have a variable called 'available', and add your language in it. For example, we have already had three languages, and wanted to add German(Germany): var available = { 'en-US': 'English', 'ja-JP': '\u65e5\u672c\u8a9e', 'zh-TW': '\u4e2d\u6587(\u81fa\u7063)', 'de-DE': 'Deutsch' } Before colon is your language code, it must look like '\\<lang>-\\<location>'. '\\<lang>' is your language, in this case, 'de' is the language code of 'German'. '\\<location>' is your location code, in this case, 'DE' is the location code of 'Germany'. If you don't know what your language/location code, you can find it here . The language code MUST be all lowercase, and location code MUST be all uppercase. If there are lots of locations using same language, you could add your language in variable 'aliases'. App will auto-redirect to target language. For example, There are five locations using 'German' as their language (de-AT, de-CH, de-DE, de-LI and de-LU), you can add 'de' into 'aliases' and let app using 'de-DE' for default 'de' language. var aliases = { 'en': 'en-US', 'ja': 'ja-JP', 'zh': 'zh-TW', 'de': 'de-DE' } Locale in aliases MUST point to a locale existed in available.","title":"Add locale code"},{"location":"git/CONTRIBUTING/#translate-files","text":"All files that translator should edit is in resources/contents . We suggest translator using 'en-US' as original language to translate. cd resources/contents cp en-US '<your-lang>-<your-location>' Folder name in resources/contents MUST be the same as the locale you added in locale.js.","title":"Translate files"},{"location":"git/CONTRIBUTING/#build","text":"Don't forget to build to generate built file. npm run build-all","title":"Build"},{"location":"gnupg/","text":"GPG Encryption 101 GnuPG, popularly known as GPG , is an extremely versatile encryption tool. It is widely used as the industry standard for encryption for things like emails, messages, files, or just anything you need to send to someone securely. GPG (and it's cousin PGP) are commonly used for two things: Encryption: encrypt emails and files like Edward Snowden does every day, so bad actors can\u2019t read your encrypted emails and files. Signing: create digital signatures for signing documents or your outgoing emails. This ensured the recipient can know the email hasn\u2019t been tampered with or that it is authentic. This tutorial will cover using GPG on a MacOS system both via the gui application and the command line. This will get you familiar with the basics of encryption and signature verification, sending private messages and some privacy best practices. So why do we need GPG? Some first principles \"Privacy is necessary for an open society in the electronic age. Privacy is not secrecy. A private matter is something one doesn't want the whole world to know, but a secret matter is something one doesn't want anybody to know. Privacy is the power to selectively reveal oneself to the world.\" This is the opening line of A Cypherpunk's Manifesto by Eric Hughes in 1993. The original cypherpunks believed that privacy was not only a necessity in the digital age but a basic human right. One of their ambitions was to create a digital money which could be transacted without the need for a trusted third party. Bitcoin is the solution to this problem. Ultimately what it set out to solve was the problem of double spending, but it did so by using digital signatures in an open peer-to-peer network . Satoshi Nakamoto wrote about privacy in Bitcoin\u2019s Whitepaper: \u201cSome linking of transactions to a common owner is still unavoidable, and could reveal other transactions that belonged to the same owner\u201d While private transactions on Bitcoin network are not fully anonymous, it is our responsibility as individuals to understand why encryption matters for a trustless network to function. Privacy in the digital age requires cryptography. This allows us to reveal our data and identity when desired and only to whom desired. This is the essence of privacy. As the old adage goes: don't trust, verify. Some basics Encryption is the process of converting data into secret, incomprehensible code such that only intended parties are capable of understanding the information. The GPG Tools support provides a fantastic rabbit hole to dive deeper into the technicalities of cryptography, hash functions, digital certificates etc. We will cover many of these topics here but with a focus on the tools and application of them using the command line and some basic exercises. How to use GPG encryption GPG keys work by using two files, a private key and a public key. These two keys are tied to each other when we generate a keypair, and are both needed for encrypting and decrypting files. Private and Public Keys We use our private key to encrypt a file, folder or text with GPG. This key is what we keep secret and secure FOR YOUR EYES ONLY. This is also the key we use for signing. We then need the paired public key to decrypt the file, folder or text which has been previously encrypted. This key can and should be shared publicly with desired recipients and/or on a public server. This also works in the opposite direction! Other people can use our public key to encrypt a file, folder or text. The only way it can be decrypted in turn is with your private key. In other words, if a file was encrypted with a private key, it can only be decrypted with the corresponding public key. And if a file was encrypted with a public key, it can only be decrypted with the corresponding private key. Installing the GPG suite The GPG Suite is a fantastic tool for getting started that helps us create, store, export and import private and public keys. We will first start to get familiar with encryption using this GUI application to create and manage our keys and do some basic exercises. Go to the link and follow the download instructions. Creating a New Keypair When you open up the GPG suite, if you have not created a key before the key creation dialogue will appear. Enter a name and email. Add a strong passphrase. Store your passphrase securely with a password manager. Under advanced options: Use the RSA encryption default option Add if you want the key to expire on a certain date Uploading the key to Keyserver After setting up a new key pair GPG will ask you if you want to send your public key to the key server. If you do this will prompt a verification email something like this: The GPG default key server is keys.openpgp.org . Verifying your public key on the key server means anyone can search for your email address on the key server, and find access to your public key. Once the email address is verified your key can be found when others search for your email address on the key server. Search opengpg return mail and public key See more about the Keyserver User Guide Backup your keys You don't want to loose your keys. Yet it can still happen: drive failures, physical damage to your computer or whatever other disasters may strike. Just like with your Bitcoin seed phrases for your wallet, we highly encourage you to back them up and store them in a secure location. As this will be in a .asc file containing a lot of code which is hard to write down so we recommend using a an encrypted USB stick that you use ONLY for secret key storage. On the GPG Suite select key to backup. You can optionally also backup all keys at once. Click File > Export or press \u2318E to include the secret key enable the Include secret key in exported file option (do this only to transfer your key to another computer or create a backup. NEVER SHARE YOUR SECRET KEY VIA EMAIL OR A CLOUD SERVICE!! Click Save Following defaults a file with the following format Name (keyID) \u2013 Public.asc or Name (keyID) \u2013 Secret.asc in case you opted to also export your secret key will be created See more on GPG key backup and recovery here. Important: If you use the same sec/pub keys on more than one machine, make sure to update or change your keys only on one machine and then always transfer the updated key to your other mac. ## Encrypt your email We highly recommend setting up you email with GPGTools to send, receive and sign encrypted emails with fellow plebs using your GPG keys. This is not in the scope of this encryption 101 class, but follow the above link as GPG makes it super easy to setup on your MacOS mail app. Importing public keys When we want to communicate or share files using PGP encryption we need the recipient to have access to our public key, and they need to have ours. We can find and import other people's GPG public key from keys.openpgp.org , or straight from the GPG Suite app on the Toolbar has a Lookup Key which searches the public server. When you have a verified email address, you can import it's associated public key. Your GPG Suite will end up looking something like this: Exporting public keys To share our public key, right click your newly created key and select Export . You can see in the dropdown the various options available. This creates a .asc file which can be exported to your documents or desktop. Beware if you are sharing your public key with others DO NOT check the include secret key box ONLY include the private key to backup your keypair or when you want to export your key pair to another machine that only you access. Here is the public key file that is created and which you can share with your network: Share your public key by uploading the file on the Time Machine Academy discord / gnupg chat. Here you will find other users public keys which you can download and import to your GPG Suite. This now allows you to communicate securely with them, as well as share encrypted files and messages. Encrypting files or folders Right-click the file or folder you want to encrypt in Finder and select Services > OpenPGP: Encrypt File Select recipients whose public keys you already have imported to encrypt the message with their public keys. Notice you can add an optional passphrase required to decrypt the message. If you only want to encrypt for yourself you need to tick the Add to Recipients option in the Your Key: section. Optionally sign the file to ensure it did not get tampered with when decrypting after some time. Click Encrypt A new .gpg file will be created next to the original file, if you do not want to keep the unencrypted file make sure to delete it securely You can now share these files with your chosen recipients securely over a public channel or as an email attachment without fear of snooping eyes. Managing your keys You can right click on any of the keys in the GPG Suite and that will bring up a bunch of options, including seeing the keys and user IDs. A the very bottom you can set the Owner Trust level in accordance with a chosen address that you have been verifying and interacting with with greater frequency. The default owner trust of an imported public key is Never . ## Verifying signatures ## Using GPG in the command line ## Attaching GPG to your GitHub","title":"GPG Encryption 101"},{"location":"gnupg/#gpg-encryption-101","text":"GnuPG, popularly known as GPG , is an extremely versatile encryption tool. It is widely used as the industry standard for encryption for things like emails, messages, files, or just anything you need to send to someone securely. GPG (and it's cousin PGP) are commonly used for two things: Encryption: encrypt emails and files like Edward Snowden does every day, so bad actors can\u2019t read your encrypted emails and files. Signing: create digital signatures for signing documents or your outgoing emails. This ensured the recipient can know the email hasn\u2019t been tampered with or that it is authentic. This tutorial will cover using GPG on a MacOS system both via the gui application and the command line. This will get you familiar with the basics of encryption and signature verification, sending private messages and some privacy best practices. So why do we need GPG?","title":"GPG Encryption 101"},{"location":"gnupg/#some-first-principles","text":"\"Privacy is necessary for an open society in the electronic age. Privacy is not secrecy. A private matter is something one doesn't want the whole world to know, but a secret matter is something one doesn't want anybody to know. Privacy is the power to selectively reveal oneself to the world.\" This is the opening line of A Cypherpunk's Manifesto by Eric Hughes in 1993. The original cypherpunks believed that privacy was not only a necessity in the digital age but a basic human right. One of their ambitions was to create a digital money which could be transacted without the need for a trusted third party. Bitcoin is the solution to this problem. Ultimately what it set out to solve was the problem of double spending, but it did so by using digital signatures in an open peer-to-peer network . Satoshi Nakamoto wrote about privacy in Bitcoin\u2019s Whitepaper: \u201cSome linking of transactions to a common owner is still unavoidable, and could reveal other transactions that belonged to the same owner\u201d While private transactions on Bitcoin network are not fully anonymous, it is our responsibility as individuals to understand why encryption matters for a trustless network to function. Privacy in the digital age requires cryptography. This allows us to reveal our data and identity when desired and only to whom desired. This is the essence of privacy. As the old adage goes: don't trust, verify.","title":"Some first principles"},{"location":"gnupg/#some-basics","text":"Encryption is the process of converting data into secret, incomprehensible code such that only intended parties are capable of understanding the information. The GPG Tools support provides a fantastic rabbit hole to dive deeper into the technicalities of cryptography, hash functions, digital certificates etc. We will cover many of these topics here but with a focus on the tools and application of them using the command line and some basic exercises.","title":"Some basics"},{"location":"gnupg/#how-to-use-gpg-encryption","text":"GPG keys work by using two files, a private key and a public key. These two keys are tied to each other when we generate a keypair, and are both needed for encrypting and decrypting files.","title":"How to use GPG encryption"},{"location":"gnupg/#private-and-public-keys","text":"We use our private key to encrypt a file, folder or text with GPG. This key is what we keep secret and secure FOR YOUR EYES ONLY. This is also the key we use for signing. We then need the paired public key to decrypt the file, folder or text which has been previously encrypted. This key can and should be shared publicly with desired recipients and/or on a public server. This also works in the opposite direction! Other people can use our public key to encrypt a file, folder or text. The only way it can be decrypted in turn is with your private key. In other words, if a file was encrypted with a private key, it can only be decrypted with the corresponding public key. And if a file was encrypted with a public key, it can only be decrypted with the corresponding private key.","title":"Private and Public Keys"},{"location":"gnupg/#installing-the-gpg-suite","text":"The GPG Suite is a fantastic tool for getting started that helps us create, store, export and import private and public keys. We will first start to get familiar with encryption using this GUI application to create and manage our keys and do some basic exercises. Go to the link and follow the download instructions.","title":"Installing the GPG suite"},{"location":"gnupg/#creating-a-new-keypair","text":"When you open up the GPG suite, if you have not created a key before the key creation dialogue will appear. Enter a name and email. Add a strong passphrase. Store your passphrase securely with a password manager. Under advanced options: Use the RSA encryption default option Add if you want the key to expire on a certain date","title":"Creating a New Keypair"},{"location":"gnupg/#uploading-the-key-to-keyserver","text":"After setting up a new key pair GPG will ask you if you want to send your public key to the key server. If you do this will prompt a verification email something like this: The GPG default key server is keys.openpgp.org . Verifying your public key on the key server means anyone can search for your email address on the key server, and find access to your public key. Once the email address is verified your key can be found when others search for your email address on the key server. Search opengpg return mail and public key See more about the Keyserver User Guide","title":"Uploading the key to Keyserver"},{"location":"gnupg/#backup-your-keys","text":"You don't want to loose your keys. Yet it can still happen: drive failures, physical damage to your computer or whatever other disasters may strike. Just like with your Bitcoin seed phrases for your wallet, we highly encourage you to back them up and store them in a secure location. As this will be in a .asc file containing a lot of code which is hard to write down so we recommend using a an encrypted USB stick that you use ONLY for secret key storage. On the GPG Suite select key to backup. You can optionally also backup all keys at once. Click File > Export or press \u2318E to include the secret key enable the Include secret key in exported file option (do this only to transfer your key to another computer or create a backup. NEVER SHARE YOUR SECRET KEY VIA EMAIL OR A CLOUD SERVICE!! Click Save Following defaults a file with the following format Name (keyID) \u2013 Public.asc or Name (keyID) \u2013 Secret.asc in case you opted to also export your secret key will be created See more on GPG key backup and recovery here. Important: If you use the same sec/pub keys on more than one machine, make sure to update or change your keys only on one machine and then always transfer the updated key to your other mac. ## Encrypt your email We highly recommend setting up you email with GPGTools to send, receive and sign encrypted emails with fellow plebs using your GPG keys. This is not in the scope of this encryption 101 class, but follow the above link as GPG makes it super easy to setup on your MacOS mail app.","title":"Backup your keys"},{"location":"gnupg/#importing-public-keys","text":"When we want to communicate or share files using PGP encryption we need the recipient to have access to our public key, and they need to have ours. We can find and import other people's GPG public key from keys.openpgp.org , or straight from the GPG Suite app on the Toolbar has a Lookup Key which searches the public server. When you have a verified email address, you can import it's associated public key. Your GPG Suite will end up looking something like this:","title":"Importing public keys"},{"location":"gnupg/#exporting-public-keys","text":"To share our public key, right click your newly created key and select Export . You can see in the dropdown the various options available. This creates a .asc file which can be exported to your documents or desktop. Beware if you are sharing your public key with others DO NOT check the include secret key box ONLY include the private key to backup your keypair or when you want to export your key pair to another machine that only you access. Here is the public key file that is created and which you can share with your network: Share your public key by uploading the file on the Time Machine Academy discord / gnupg chat. Here you will find other users public keys which you can download and import to your GPG Suite. This now allows you to communicate securely with them, as well as share encrypted files and messages.","title":"Exporting public keys"},{"location":"gnupg/#encrypting-files-or-folders","text":"Right-click the file or folder you want to encrypt in Finder and select Services > OpenPGP: Encrypt File Select recipients whose public keys you already have imported to encrypt the message with their public keys. Notice you can add an optional passphrase required to decrypt the message. If you only want to encrypt for yourself you need to tick the Add to Recipients option in the Your Key: section. Optionally sign the file to ensure it did not get tampered with when decrypting after some time. Click Encrypt A new .gpg file will be created next to the original file, if you do not want to keep the unencrypted file make sure to delete it securely You can now share these files with your chosen recipients securely over a public channel or as an email attachment without fear of snooping eyes.","title":"Encrypting files or folders"},{"location":"gnupg/#managing-your-keys","text":"You can right click on any of the keys in the GPG Suite and that will bring up a bunch of options, including seeing the keys and user IDs. A the very bottom you can set the Owner Trust level in accordance with a chosen address that you have been verifying and interacting with with greater frequency. The default owner trust of an imported public key is Never . ## Verifying signatures ## Using GPG in the command line ## Attaching GPG to your GitHub","title":"Managing your keys"},{"location":"ide/CONTRIBUTING/","text":"Contributing Ace is a community project and wouldn't be what it is without contributions! We actively encourage and support contributions. The Ace source code is released under the BSD License. This license is very simple, and is friendly to all kinds of projects, whether open source or not. Take charge of your editor and add your favorite language highlighting and keybindings! Feel free to fork and improve/enhance Ace any way you want. If you feel that the editor or the Ace community will benefit from your changes, please open a pull request. To protect the interests of the Ace contributors and users we require contributors to sign a Contributors License Agreement (CLA) before we pull the changes into the main repository. Our CLA is the simplest of agreements, requiring that the contributions you make to an ajax.org project are only those you're allowed to make. This helps us significantly reduce future legal risk for everyone involved. It is easy, helps everyone, takes ten minutes, and only needs to be completed once. There are two versions of the agreement: The Individual CLA : use this version if you're working on an ajax.org in your spare time, or can clearly claim ownership of copyright in what you'll be submitting. The Corporate CLA : have your corporate lawyer review and submit this if your company is going to be contributing to ajax.org projects If you want to contribute to an ajax.org project please print the CLA and fill it out and sign it. Then either send it by snail mail or fax to us or send it back scanned (or as a photo) by email. Email: ace+cla@c9.io Fax: +31 (0) 206388953 Address: Ajax.org B.V. Keizersgracht 241 1016 EA, Amsterdam the Netherlands","title":"CONTRIBUTING"},{"location":"ide/CONTRIBUTING/#contributing","text":"Ace is a community project and wouldn't be what it is without contributions! We actively encourage and support contributions. The Ace source code is released under the BSD License. This license is very simple, and is friendly to all kinds of projects, whether open source or not. Take charge of your editor and add your favorite language highlighting and keybindings! Feel free to fork and improve/enhance Ace any way you want. If you feel that the editor or the Ace community will benefit from your changes, please open a pull request. To protect the interests of the Ace contributors and users we require contributors to sign a Contributors License Agreement (CLA) before we pull the changes into the main repository. Our CLA is the simplest of agreements, requiring that the contributions you make to an ajax.org project are only those you're allowed to make. This helps us significantly reduce future legal risk for everyone involved. It is easy, helps everyone, takes ten minutes, and only needs to be completed once. There are two versions of the agreement: The Individual CLA : use this version if you're working on an ajax.org in your spare time, or can clearly claim ownership of copyright in what you'll be submitting. The Corporate CLA : have your corporate lawyer review and submit this if your company is going to be contributing to ajax.org projects If you want to contribute to an ajax.org project please print the CLA and fill it out and sign it. Then either send it by snail mail or fax to us or send it back scanned (or as a photo) by email. Email: ace+cla@c9.io Fax: +31 (0) 206388953 Address: Ajax.org B.V. Keizersgracht 241 1016 EA, Amsterdam the Netherlands","title":"Contributing"},{"location":"ide/Readme/","text":"Bitcoin Script IDE A Bitcoin Script IDE to facilitate the learning, testing, and teaching of Bitcoin Script. Features Syntax highlighting Auto-complete Translation to and from assembly Stack visualizer Step-by-step debugger Try it out! Open up IDE in https://siminchen.github.io/bitcoinIDE/ In the Script pane , type in some script code: ex. 1 2 OP_ADD ex. 123 OP_HASH256 ex. 1 OP_IF 2 OP_ELSE 3 OP_ENDIF View the equivalent assembly code by clicking the Assembly tab To execute the script, return to the Script tab and hit the Run button on the bottom to run the code Note the stack operations in the Stack pane on the right. To process the script one command at a time, hit the Step button on the bottom Note the stack operations Note the text box on the bottom that shows the next command To process the remainder of the commands, hit the Continue button on the bottom If the script was a valid script, then the text box on the bottom will be green and the stack elements will be orange. If the script was invalid, then the text box and the stack elements will be red","title":"Readme"},{"location":"ide/Readme/#bitcoin-script-ide","text":"A Bitcoin Script IDE to facilitate the learning, testing, and teaching of Bitcoin Script.","title":"Bitcoin Script IDE"},{"location":"ide/Readme/#features","text":"Syntax highlighting Auto-complete Translation to and from assembly Stack visualizer Step-by-step debugger","title":"Features"},{"location":"ide/Readme/#try-it-out","text":"Open up IDE in https://siminchen.github.io/bitcoinIDE/ In the Script pane , type in some script code: ex. 1 2 OP_ADD ex. 123 OP_HASH256 ex. 1 OP_IF 2 OP_ELSE 3 OP_ENDIF View the equivalent assembly code by clicking the Assembly tab To execute the script, return to the Script tab and hit the Run button on the bottom to run the code Note the stack operations in the Stack pane on the right. To process the script one command at a time, hit the Step button on the bottom Note the stack operations Note the text box on the bottom that shows the next command To process the remainder of the commands, hit the Continue button on the bottom If the script was a valid script, then the text box on the bottom will be green and the stack elements will be orange. If the script was invalid, then the text box and the stack elements will be red","title":"Try it out!"},{"location":"ide/demo/kitchen-sink/docs/markdown/","text":"Ace (Ajax.org Cloud9 Editor) Ace is a standalone code editor written in JavaScript. Our goal is to create a browser based editor that matches and extends the features, usability and performance of existing native editors such as TextMate, Vim or Eclipse. It can be easily embedded in any web page or JavaScript application. Ace is developed as the primary editor for Cloud9 IDE and the successor of the Mozilla Skywriter (Bespin) Project. Features Syntax highlighting Automatic indent and outdent An optional command line Handles huge documents (100,000 lines and more are no problem) Fully customizable key bindings including VI and Emacs modes Themes (TextMate themes can be imported) Search and replace with regular expressions Highlight matching parentheses Toggle between soft tabs and real tabs Displays hidden characters Drag and drop text using the mouse Line wrapping Unstructured / user code folding Live syntax checker (currently JavaScript/CoffeeScript) Take Ace for a spin! Check out the Ace live demo or get a Cloud9 IDE account to experience Ace while editing one of your own GitHub projects. If you want, you can use Ace as a textarea replacement thanks to the Ace Bookmarklet . History Previously known as \u201cBespin\u201d and \u201cSkywriter\u201d it\u2019s now known as Ace (Ajax.org Cloud9 Editor)! Bespin and Ace started as two independent projects, both aiming to build a no-compromise code editor component for the web. Bespin started as part of Mozilla Labs and was based on the canvas tag, while Ace is the Editor component of the Cloud9 IDE and is using the DOM for rendering. After the release of Ace at JSConf.eu 2010 in Berlin the Skywriter team decided to merge Ace with a simplified version of Skywriter's plugin system and some of Skywriter's extensibility points. All these changes have been merged back to Ace. Both Ajax.org and Mozilla are actively developing and maintaining Ace. Getting the code Ace is a community project. We actively encourage and support contributions. The Ace source code is hosted on GitHub. It is released under the BSD License. This license is very simple, and is friendly to all kinds of projects, whether open source or not. Take charge of your editor and add your favorite language highlighting and keybindings! git clone git://github.com/ajaxorg/ace.git cd ace git submodule update --init --recursive Embedding Ace Ace can be easily embedded into any existing web page. The Ace git repository ships with a pre-packaged version of Ace inside of the build directory. The same packaged files are also available as a separate download . Simply copy the contents of the src subdirectory somewhere into your project and take a look at the included demos of how to use Ace. The easiest version is simply: <div id=\"editor\">some text</div> <script src=\"src/ace.js\" type=\"text/javascript\" charset=\"utf-8\"></script> <script> window.onload = function() { var editor = ace.edit(\"editor\"); }; </script> With \"editor\" being the id of the DOM element, which should be converted to an editor. Note that this element must be explicitly sized and positioned absolute or relative for Ace to work. e.g. #editor { position: absolute; width: 500px; height: 400px; } To change the theme simply include the Theme's JavaScript file <script src=\"src/theme-twilight.js\" type=\"text/javascript\" charset=\"utf-8\"></script> and configure the editor to use the theme: editor.setTheme(\"ace/theme/twilight\"); By default the editor only supports plain text mode; many other languages are available as separate modules. After including the mode's JavaScript file: <script src=\"src/mode-javascript.js\" type=\"text/javascript\" charset=\"utf-8\"></script> Then the mode can be used like this: var JavaScriptMode = require(\"ace/mode/javascript\").Mode; editor.getSession().setMode(new JavaScriptMode()); Documentation You find a lot more sample code in the demo app . There is also some documentation on the wiki page . If you still need help, feel free to drop a mail on the ace mailing list . Running Ace After the checkout Ace works out of the box. No build step is required. Open 'editor.html' in any browser except Google Chrome. Google Chrome doesn't allow XMLHTTPRequests from files loaded from disc (i.e. with a file:/// URL). To open Ace in Chrome simply start the bundled mini HTTP server: ./static.py Or using Node.JS ./static.js The editor can then be opened at http://localhost:8888/index.html. Package Ace To package Ace we use the dryice build tool developed by the Mozilla Skywriter team. Before you can build you need to make sure that the submodules are up to date. git submodule update --init --recursive Afterwards Ace can be built by calling ./Makefile.dryice.js normal The packaged Ace will be put in the 'build' folder. To build the bookmarklet version execute ./Makefile.dryice.js bm Running the Unit Tests The Ace unit tests run on node.js. Before the first run a couple of node modules have to be installed. The easiest way to do this is by using the node package manager (npm). In the Ace base directory simply call npm link . To run the tests call: node lib/ace/test/all.js You can also run the tests in your browser by serving: http://localhost:8888/lib/ace/test/tests.html This makes debugging failing tests way more easier. Contributing Ace wouldn't be what it is without contributions! Feel free to fork and improve/enhance Ace any way you want. If you feel that the editor or the Ace community will benefit from your changes, please open a pull request. To protect the interests of the Ace contributors and users we require contributors to sign a Contributors License Agreement (CLA) before we pull the changes into the main repository. Our CLA is the simplest of agreements, requiring that the contributions you make to an ajax.org project are only those you're allowed to make. This helps us significantly reduce future legal risk for everyone involved. It is easy, helps everyone, takes ten minutes, and only needs to be completed once. There are two versions of the agreement: The Individual CLA : use this version if you're working on an ajax.org in your spare time, or can clearly claim ownership of copyright in what you'll be submitting. The Corporate CLA : have your corporate lawyer review and submit this if your company is going to be contributing to ajax.org projects If you want to contribute to an ajax.org project please print the CLA and fill it out and sign it. Then either send it by snail mail or fax to us or send it back scanned (or as a photo) by email. Email: fabian.jakobs@web.de Fax: +31 (0) 206388953 Address: Ajax.org B.V. Keizersgracht 241 1016 EA, Amsterdam the Netherlands","title":"Markdown"},{"location":"ide/demo/kitchen-sink/docs/markdown/#ace-ajaxorg-cloud9-editor","text":"Ace is a standalone code editor written in JavaScript. Our goal is to create a browser based editor that matches and extends the features, usability and performance of existing native editors such as TextMate, Vim or Eclipse. It can be easily embedded in any web page or JavaScript application. Ace is developed as the primary editor for Cloud9 IDE and the successor of the Mozilla Skywriter (Bespin) Project.","title":"Ace (Ajax.org Cloud9 Editor)"},{"location":"ide/demo/kitchen-sink/docs/markdown/#features","text":"Syntax highlighting Automatic indent and outdent An optional command line Handles huge documents (100,000 lines and more are no problem) Fully customizable key bindings including VI and Emacs modes Themes (TextMate themes can be imported) Search and replace with regular expressions Highlight matching parentheses Toggle between soft tabs and real tabs Displays hidden characters Drag and drop text using the mouse Line wrapping Unstructured / user code folding Live syntax checker (currently JavaScript/CoffeeScript)","title":"Features"},{"location":"ide/demo/kitchen-sink/docs/markdown/#take-ace-for-a-spin","text":"Check out the Ace live demo or get a Cloud9 IDE account to experience Ace while editing one of your own GitHub projects. If you want, you can use Ace as a textarea replacement thanks to the Ace Bookmarklet .","title":"Take Ace for a spin!"},{"location":"ide/demo/kitchen-sink/docs/markdown/#history","text":"Previously known as \u201cBespin\u201d and \u201cSkywriter\u201d it\u2019s now known as Ace (Ajax.org Cloud9 Editor)! Bespin and Ace started as two independent projects, both aiming to build a no-compromise code editor component for the web. Bespin started as part of Mozilla Labs and was based on the canvas tag, while Ace is the Editor component of the Cloud9 IDE and is using the DOM for rendering. After the release of Ace at JSConf.eu 2010 in Berlin the Skywriter team decided to merge Ace with a simplified version of Skywriter's plugin system and some of Skywriter's extensibility points. All these changes have been merged back to Ace. Both Ajax.org and Mozilla are actively developing and maintaining Ace.","title":"History"},{"location":"ide/demo/kitchen-sink/docs/markdown/#getting-the-code","text":"Ace is a community project. We actively encourage and support contributions. The Ace source code is hosted on GitHub. It is released under the BSD License. This license is very simple, and is friendly to all kinds of projects, whether open source or not. Take charge of your editor and add your favorite language highlighting and keybindings! git clone git://github.com/ajaxorg/ace.git cd ace git submodule update --init --recursive","title":"Getting the code"},{"location":"ide/demo/kitchen-sink/docs/markdown/#embedding-ace","text":"Ace can be easily embedded into any existing web page. The Ace git repository ships with a pre-packaged version of Ace inside of the build directory. The same packaged files are also available as a separate download . Simply copy the contents of the src subdirectory somewhere into your project and take a look at the included demos of how to use Ace. The easiest version is simply: <div id=\"editor\">some text</div> <script src=\"src/ace.js\" type=\"text/javascript\" charset=\"utf-8\"></script> <script> window.onload = function() { var editor = ace.edit(\"editor\"); }; </script> With \"editor\" being the id of the DOM element, which should be converted to an editor. Note that this element must be explicitly sized and positioned absolute or relative for Ace to work. e.g. #editor { position: absolute; width: 500px; height: 400px; } To change the theme simply include the Theme's JavaScript file <script src=\"src/theme-twilight.js\" type=\"text/javascript\" charset=\"utf-8\"></script> and configure the editor to use the theme: editor.setTheme(\"ace/theme/twilight\"); By default the editor only supports plain text mode; many other languages are available as separate modules. After including the mode's JavaScript file: <script src=\"src/mode-javascript.js\" type=\"text/javascript\" charset=\"utf-8\"></script> Then the mode can be used like this: var JavaScriptMode = require(\"ace/mode/javascript\").Mode; editor.getSession().setMode(new JavaScriptMode());","title":"Embedding Ace"},{"location":"ide/demo/kitchen-sink/docs/markdown/#documentation","text":"You find a lot more sample code in the demo app . There is also some documentation on the wiki page . If you still need help, feel free to drop a mail on the ace mailing list .","title":"Documentation"},{"location":"ide/demo/kitchen-sink/docs/markdown/#running-ace","text":"After the checkout Ace works out of the box. No build step is required. Open 'editor.html' in any browser except Google Chrome. Google Chrome doesn't allow XMLHTTPRequests from files loaded from disc (i.e. with a file:/// URL). To open Ace in Chrome simply start the bundled mini HTTP server: ./static.py Or using Node.JS ./static.js The editor can then be opened at http://localhost:8888/index.html.","title":"Running Ace"},{"location":"ide/demo/kitchen-sink/docs/markdown/#package-ace","text":"To package Ace we use the dryice build tool developed by the Mozilla Skywriter team. Before you can build you need to make sure that the submodules are up to date. git submodule update --init --recursive Afterwards Ace can be built by calling ./Makefile.dryice.js normal The packaged Ace will be put in the 'build' folder. To build the bookmarklet version execute ./Makefile.dryice.js bm","title":"Package Ace"},{"location":"ide/demo/kitchen-sink/docs/markdown/#running-the-unit-tests","text":"The Ace unit tests run on node.js. Before the first run a couple of node modules have to be installed. The easiest way to do this is by using the node package manager (npm). In the Ace base directory simply call npm link . To run the tests call: node lib/ace/test/all.js You can also run the tests in your browser by serving: http://localhost:8888/lib/ace/test/tests.html This makes debugging failing tests way more easier.","title":"Running the Unit Tests"},{"location":"ide/demo/kitchen-sink/docs/markdown/#contributing","text":"Ace wouldn't be what it is without contributions! Feel free to fork and improve/enhance Ace any way you want. If you feel that the editor or the Ace community will benefit from your changes, please open a pull request. To protect the interests of the Ace contributors and users we require contributors to sign a Contributors License Agreement (CLA) before we pull the changes into the main repository. Our CLA is the simplest of agreements, requiring that the contributions you make to an ajax.org project are only those you're allowed to make. This helps us significantly reduce future legal risk for everyone involved. It is easy, helps everyone, takes ten minutes, and only needs to be completed once. There are two versions of the agreement: The Individual CLA : use this version if you're working on an ajax.org in your spare time, or can clearly claim ownership of copyright in what you'll be submitting. The Corporate CLA : have your corporate lawyer review and submit this if your company is going to be contributing to ajax.org projects If you want to contribute to an ajax.org project please print the CLA and fill it out and sign it. Then either send it by snail mail or fax to us or send it back scanned (or as a photo) by email. Email: fabian.jakobs@web.de Fax: +31 (0) 206388953 Address: Ajax.org B.V. Keizersgracht 241 1016 EA, Amsterdam the Netherlands","title":"Contributing"},{"location":"ide/doc/","text":"Ace API Reference Welcome to the Ace API Reference Guide. Ace is a standalone code editor written in JavaScript that you can embed onto any website. We're used in a bunch of places already, like GitHub, Google, and Facebook. On the left, you'll find a list of all of our currently documented classes. There are plenty more to do, but these represent the \"core\" set. For more information on how to work with Ace, check out the main Ace website .","title":"Ace API Reference"},{"location":"ide/doc/#ace-api-reference","text":"Welcome to the Ace API Reference Guide. Ace is a standalone code editor written in JavaScript that you can embed onto any website. We're used in a bunch of places already, like GitHub, Google, and Facebook. On the left, you'll find a list of all of our currently documented classes. There are plenty more to do, but these represent the \"core\" set. For more information on how to work with Ace, check out the main Ace website .","title":"Ace API Reference"},{"location":"ide/tool/Readme/","text":"Helper Scripts for Ace To use this you need to install node.js. and run npm install in this directory. add_mode.js Run node add_mode.js ModeName \"extension1|extension2|^FullName\" to create all the files needed for a new mode named ModeName this adds stubs for: ace/mode/mode_name.js ace/mode/mode_name_hightlight_rules.js ace/snippets/mode_name.js ace/demo/kitchen_sink/docs/mode_name.extension1 and adds entry for the new mode to ace/ext/modelist.js tmlanguage.js node tmlanguage.js ./templates/dummy.JSON-tmLanguage","title":"Readme"},{"location":"ide/tool/Readme/#helper-scripts-for-ace","text":"To use this you need to install node.js. and run npm install in this directory.","title":"Helper Scripts for Ace"},{"location":"ide/tool/Readme/#add_modejs","text":"Run node add_mode.js ModeName \"extension1|extension2|^FullName\" to create all the files needed for a new mode named ModeName this adds stubs for: ace/mode/mode_name.js ace/mode/mode_name_hightlight_rules.js ace/snippets/mode_name.js ace/demo/kitchen_sink/docs/mode_name.extension1 and adds entry for the new mode to ace/ext/modelist.js","title":"add_mode.js"},{"location":"ide/tool/Readme/#tmlanguagejs","text":"node tmlanguage.js ./templates/dummy.JSON-tmLanguage","title":"tmlanguage.js"},{"location":"lnbits/","text":"LNBits Beginner Workshop Proposed workshop syllabus for timechain.academy Target Audience: Plebs New to lightning and interested in running their own website or store that could accept lightning as tips, online payments or an application that either sends or receives lightning sats. Good for small online businesses, podcasts, blogs, and game developers. Prerequisites: No formal Lightning experience required, however a basic understanding of sending and receiving using Lightning wallets and a wallet with testnet sats required. Some basic understanding of programming in python helpful. Estimated time for a session - ( ~2-3 hrs ) Time for workshop assumes students already have an plebnet instance up. This workshop is partly lecture but also a lot of hands on with running and moving sats around on a LNBits instance, students should be prepared to send/receive lightning using testnet sats. What this workshop will cover: What is LNBits and what does it do? LNBits is a Free and Open source lightning accounting system. Easy to set up and lightweight, LNbits can run on any lightning-network funding source, currently supporting LND, c-lightning, OpenNode, lntxbot, LNPay and even LNbits itself! You can run LNbits for yourself, or easily offer a custodian solution for others. Setting up LNBits on plebnet Ideally workshop participants already have plebnet docker setup If not, they can use a public instance of lnbits to follow along but its live, not testnet LNBits makes uses of Bolt11(Invoice protocol for lightning payments) Review of Bolt 11 Specification before diving in https://github.com/lightning/bolts/blob/master/00-introduction.md Create a new user, core wallet functions Walk through of LNBits features: Each wallet has its own API keys and there is no limit to the number of wallets you can make. Being able to partition funds makes LNbits a useful tool for money management and as a development tool. Brief overview of Extensions Sending and receiving Lightning payments on LNBits Limitations of the LNBits System Some Key Extensions and how they work: (with hands on exercises) User Manager LNURLp LNURLw LndHub (LND only) Some simple Application Extensions: (with hands on exercises) TipJar Paywall Lightning Addresses What are they? How do they work? How can you use Lightning Addresses with LNBits - with Any website - with an extension Getting started with Building Applications on LNBits The LNBits API The pylnbits API library (with hands on exercises) Some configuration options for LNBits (with hands on exercises) Where to go Next LNBits in production Where to get help Q & A session Note : Other workshop ideas: - advanced workshop for building sample production ready applications on LNBits - workshop on LNURL/webLN applications, e.g. lnurl-auth, lightning addresses, webln.dev About the Instructor: @bitkarrot on github and twitter; shadowy super coder contributing to bitcoin and lightning.","title":"LNBits Beginner Workshop"},{"location":"lnbits/#lnbits-beginner-workshop","text":"Proposed workshop syllabus for timechain.academy","title":"LNBits Beginner Workshop"},{"location":"lnbits/#target-audience","text":"Plebs New to lightning and interested in running their own website or store that could accept lightning as tips, online payments or an application that either sends or receives lightning sats. Good for small online businesses, podcasts, blogs, and game developers.","title":"Target Audience:"},{"location":"lnbits/#prerequisites","text":"No formal Lightning experience required, however a basic understanding of sending and receiving using Lightning wallets and a wallet with testnet sats required. Some basic understanding of programming in python helpful.","title":"Prerequisites:"},{"location":"lnbits/#estimated-time-for-a-session-2-3-hrs","text":"Time for workshop assumes students already have an plebnet instance up. This workshop is partly lecture but also a lot of hands on with running and moving sats around on a LNBits instance, students should be prepared to send/receive lightning using testnet sats.","title":"Estimated time for a session - ( ~2-3 hrs )"},{"location":"lnbits/#what-this-workshop-will-cover","text":"What is LNBits and what does it do? LNBits is a Free and Open source lightning accounting system. Easy to set up and lightweight, LNbits can run on any lightning-network funding source, currently supporting LND, c-lightning, OpenNode, lntxbot, LNPay and even LNbits itself! You can run LNbits for yourself, or easily offer a custodian solution for others. Setting up LNBits on plebnet Ideally workshop participants already have plebnet docker setup If not, they can use a public instance of lnbits to follow along but its live, not testnet LNBits makes uses of Bolt11(Invoice protocol for lightning payments) Review of Bolt 11 Specification before diving in https://github.com/lightning/bolts/blob/master/00-introduction.md Create a new user, core wallet functions Walk through of LNBits features: Each wallet has its own API keys and there is no limit to the number of wallets you can make. Being able to partition funds makes LNbits a useful tool for money management and as a development tool. Brief overview of Extensions Sending and receiving Lightning payments on LNBits Limitations of the LNBits System Some Key Extensions and how they work: (with hands on exercises) User Manager LNURLp LNURLw LndHub (LND only) Some simple Application Extensions: (with hands on exercises) TipJar Paywall Lightning Addresses What are they? How do they work? How can you use Lightning Addresses with LNBits - with Any website - with an extension Getting started with Building Applications on LNBits The LNBits API The pylnbits API library (with hands on exercises) Some configuration options for LNBits (with hands on exercises) Where to go Next LNBits in production Where to get help Q & A session Note : Other workshop ideas: - advanced workshop for building sample production ready applications on LNBits - workshop on LNURL/webLN applications, e.g. lnurl-auth, lightning addresses, webln.dev","title":"What this workshop will cover:"},{"location":"lnbits/#about-the-instructor","text":"@bitkarrot on github and twitter; shadowy super coder contributing to bitcoin and lightning.","title":"About the Instructor:"},{"location":"lnbits/lnbits/","text":"LNBits Beginner Workshop Proposed workshop syllabus for timechain.academy Target Audience: Plebs New to lightning and interested in running their own website or store that could accept lightning as tips, online payments or an application that either sends or receives lightning sats. Good for small online businesses, podcasts, blogs, and game developers. Prerequisites: No formal Lightning experience required, however a basic understanding of sending and receiving using Lightning wallets and a wallet with testnet sats required. Some basic understanding of programming in python helpful. Estimated time for a session - ( ~2-3 hrs ) Time for workshop assumes students already have an plebnet instance up. This workshop is partly lecture but also a lot of hands on with running and moving sats around on a LNBits instance, students should be prepared to send/receive lightning using testnet sats. What this workshop will cover: What is LNBits and what does it do? LNBits is a Free and Open source lightning accounting system. Easy to set up and lightweight, LNbits can run on any lightning-network funding source, currently supporting LND, c-lightning, OpenNode, lntxbot, LNPay and even LNbits itself! You can run LNbits for yourself, or easily offer a custodian solution for others. Setting up LNBits on plebnet Ideally workshop participants already have plebnet docker setup If not, they can use a public instance of lnbits to follow along but its live, not testnet LNBits makes uses of Bolt11(Invoice protocol for lightning payments) Review of Bolt 11 Specification before diving in https://github.com/lightning/bolts/blob/master/00-introduction.md Create a new user, core wallet functions Walk through of LNBits features: Each wallet has its own API keys and there is no limit to the number of wallets you can make. Being able to partition funds makes LNbits a useful tool for money management and as a development tool. Brief overview of Extensions Sending and receiving Lightning payments on LNBits Limitations of the LNBits System Some Key Extensions and how they work: (with hands on exercises) User Manager LNURLp LNURLw LndHub (LND only) Some simple Application Extensions: (with hands on exercises) TipJar Paywall Lightning Addresses What are they? How do they work? How can you use Lightning Addresses with LNBits - with Any website - with an extension Getting started with Building Applications on LNBits The LNBits API The pylnbits API library (with hands on exercises) Some configuration options for LNBits (with hands on exercises) Where to go Next LNBits in production Where to get help Q & A session Note : Other workshop ideas: - advanced workshop for building sample production ready applications on LNBits - workshop on LNURL/webLN applications, e.g. lnurl-auth, lightning addresses, webln.dev About the Instructor: @bitkarrot on github and twitter; shadowy super coder contributing to bitcoin and lightning.","title":"LnBits"},{"location":"lnbits/lnbits/#lnbits-beginner-workshop","text":"Proposed workshop syllabus for timechain.academy","title":"LNBits Beginner Workshop"},{"location":"lnbits/lnbits/#target-audience","text":"Plebs New to lightning and interested in running their own website or store that could accept lightning as tips, online payments or an application that either sends or receives lightning sats. Good for small online businesses, podcasts, blogs, and game developers.","title":"Target Audience:"},{"location":"lnbits/lnbits/#prerequisites","text":"No formal Lightning experience required, however a basic understanding of sending and receiving using Lightning wallets and a wallet with testnet sats required. Some basic understanding of programming in python helpful.","title":"Prerequisites:"},{"location":"lnbits/lnbits/#estimated-time-for-a-session-2-3-hrs","text":"Time for workshop assumes students already have an plebnet instance up. This workshop is partly lecture but also a lot of hands on with running and moving sats around on a LNBits instance, students should be prepared to send/receive lightning using testnet sats.","title":"Estimated time for a session - ( ~2-3 hrs )"},{"location":"lnbits/lnbits/#what-this-workshop-will-cover","text":"What is LNBits and what does it do? LNBits is a Free and Open source lightning accounting system. Easy to set up and lightweight, LNbits can run on any lightning-network funding source, currently supporting LND, c-lightning, OpenNode, lntxbot, LNPay and even LNbits itself! You can run LNbits for yourself, or easily offer a custodian solution for others. Setting up LNBits on plebnet Ideally workshop participants already have plebnet docker setup If not, they can use a public instance of lnbits to follow along but its live, not testnet LNBits makes uses of Bolt11(Invoice protocol for lightning payments) Review of Bolt 11 Specification before diving in https://github.com/lightning/bolts/blob/master/00-introduction.md Create a new user, core wallet functions Walk through of LNBits features: Each wallet has its own API keys and there is no limit to the number of wallets you can make. Being able to partition funds makes LNbits a useful tool for money management and as a development tool. Brief overview of Extensions Sending and receiving Lightning payments on LNBits Limitations of the LNBits System Some Key Extensions and how they work: (with hands on exercises) User Manager LNURLp LNURLw LndHub (LND only) Some simple Application Extensions: (with hands on exercises) TipJar Paywall Lightning Addresses What are they? How do they work? How can you use Lightning Addresses with LNBits - with Any website - with an extension Getting started with Building Applications on LNBits The LNBits API The pylnbits API library (with hands on exercises) Some configuration options for LNBits (with hands on exercises) Where to go Next LNBits in production Where to get help Q & A session Note : Other workshop ideas: - advanced workshop for building sample production ready applications on LNBits - workshop on LNURL/webLN applications, e.g. lnurl-auth, lightning addresses, webln.dev","title":"What this workshop will cover:"},{"location":"lnbits/lnbits/#about-the-instructor","text":"@bitkarrot on github and twitter; shadowy super coder contributing to bitcoin and lightning.","title":"About the Instructor:"},{"location":"playground/","text":"Setting up Plebnet Playground on MacOS Resources: Plebnet Playground Docker Readme Bitcoin Core Bitcoin MacOS Build Guide Plebnet Fun Aim Plebnet Playground is a sandbox environment to help Bitcoin plebs get under the hood with Lightning LND and mess around without using real sats. This brief tutorial is aimed to help noobies setup Plebnet Playground and Bitcoin Core on MacOS in less that hald and hour. CHECK: You can install all of this in a virtual environment if you have one. For simplicity we will be doing this on our everyday admin user account. Nothing in this tutorial should break or interfere with the daily running of your machine. Prerequisites MacOS laptop or desktop running MacOS Mojave or above. We have not tested on earlier versions. I am using MacOS Catalina 10.15 but this process is compatible with later versions as well. ? are there any known compatability issues with newest M1 chips vs Intel?? The Xcode Command Line Tools are a collection of build tools for macOS. These tools must be installed in order to build Bitcoin Core from source. More about that here . To install, run the following command from your terminal: xcode-select --install You will need a Github account. If you haven't got one, set one up. We will use the git version control to fork and clone both Bitcoin Core and Plebnet Playground onto our local machine. NOTE: If you are not familiar with Git yet, don't worry, there is another lesson on this. For the moment just think of it as a version control protocol that allows you to copy a version of the source code onto your local machine to then compile and run it locally. Plebnet Playground runs on Docker which is an open-source platform used for developing, deploying, and managing applications in lightweight virtual environments called containers. The default Terminal that runs either bash or zsh and the Homebrew Package manager. Using the Command Line This tutorial asumes basic to no experience using the Command Line. If this freaks you out DO NOT WORRY , follow the steps and you will slowly become familiar with using basic commands, installing the necessary dependencies to run Plebnet Playground and getting under the hood running Bitcoin Core on your machine. If you are familiar with CLI already bare with us. If you haven't already, install Homebrew Package manager . Homebrew helps install packages to their own directory and then symlinks their files into /usr/local (on macOS Intel). Homebrew makes it super easy and safe to install and uninstall open source software dependencies compatible with Linux. /bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\" If you haven't already, make sure you have git installed: brew install git Once installed you can use brew info git to confirm the version of git you are using: We are also going to need Python 3 installed. Python is a programming language. If you are already managing different python versions consider using Pyenv to manage these, alternatively: brew install python@3 check the Python version: python --version ...and you should see something like: Now we will install GNU Make is a tool which will allow us to build and compile our package source code locally. brew install make Finally let's install Docker. We could do this straight from the website, but we are now command line ninjas and just need a couple of brewskies: brew install docker-compose followed by: brew install --cask docker Now we're ready to rock and roll forking our code from Github. Forking repositories We are going to use Github to \"fork\" or copy the latest version of the Bitcoin Core and the Plebnet Playground Docker repositories. Enter your Github and follow the links to both accounts. Bitcoin Plebnet Playground Click on the fork button to fork the original repositories into your own Github account. It will ask you to name the new fork, but you can keep the default name. Here is what my Github looks like below. You should see both forks under your remote Repositories tab. Git cloning repositories We are now going to use the git clone command to yes, clone the version you just forked onto your Github, onto to your local machine. Github conveniantly gives you an easy way to copy the comand straight to your terminal. Enter your forked Github repostiory and find the green Code button. On the drop down you will see options to clone. Unless you already have SSH setup with your Github (Github class) Copy the one under HTTPS. In your Terminal first lets create a new directory in Documents and call it Github. You can do this in the Finder, alternatively type: cd ~/Documents mkdir Github cd ~/Documents/Github Now type: git clone and then paste or CMD + V the address you just copied. It should look like this only addressed to your own Github: git clone https://github.com/addyourgithubhere/bitcoin.git Now lets do the same for the same for the Plebnet Playground repo. NOTE: Make sure you are actually inside the directory you want to clone into. git clone https://github.com/addyourgithubhere/plebnet-playground-docker.git Now you should see in your Finder window the two cloned repositories something like this: Pretty cool huh. Git Checkout Now for the the Bitcoin clone we want to check out that the version we have downloaded can be verified with the latest released commit. We do this by going into the Bitcoin/bitcoin original repo, scroll down to the bottom right Releases > Latest This brings up Bitcoin Core 23.0 as of time of writing, and on the subheading we can see a hash on the right which begins with fcf6c8 Click on this and we can see the commit hash on the right: fcf6c8f4eb217763545ede1766831a6b93f583bd Lets copy this and go back to Terminal and type: git checkout fcf6c8f4eb217763545ede1766831a6b93f583bd This will report back to us: You are in 'detached HEAD' state. You can look around, make experimental changes and commit them, and you can discard any commits you make in this state without impacting any branches by switching back to a branch. This confirms we are indeed using the latest commit. Building Plebnet Docker Now we are going to build and compile the code base of the Plebnet Playground Docker. See here for the Github README documentation. Enter the directory where the plebnet-playground-docker has been cloned. cd ~/Documents/Github/plebnet-playground-docker Now let's compile: make init NOTE: If our other dependencies have not been yet installed this will fail as it will require a version of python 3 and docker to work. This can be done via make build or make initialize . See other make commands using just typing make . Install and start all services ./install.sh Builiding Bitcoin Core Enter the directory where the bitcoin repository has been cloned. See MacOs Bitcoin Buildguide . I reccomend reading through this to usnderstand the various dependencies and options available. We will go with a bare bones simple compiliation. The first step is to download the required dependencies. These dependencies represent the packages required to get a bare bones installation up and running. brew install automake libtool boost pkg-config libevent NOTE: These are 5 different dependencies which we are installing in one brew command. Awesome! Also we will AVOID installing berkeley-db@4 dependency because we do not need support for legacy wallets. Bitcoin Core includes a GUI built with the cross-platform Qt Framework. To compile the GUI, we need to install qt@5. brew install qt@5 Configuration There are various ways to configure Bitcoin core, but we will be doing the bare minimal as we don't require legacy support. ./autogen.sh Now we add some configuration options to disable tests and other stuff. ./configure --disable-tests --disable-man --disable-bench --without-bdb Again db@4 is only required to support for legacy wallets, which we don't need thus --without-bdb Compiling Now lets compile Bitcoin Core: make Now: ./src/bitcoind -conf=/Users/$(whoami)/Documents/GitHub/plebnet-playground-docker/bitcoin-signet/bitcoin.conf !!! Would like to break down what this command does. We did not make and empty configuration file like in the instructions !! This will take a while to compile so be patient. Launching Plebnet From within the plebnet repo we can start to run the play commands: play play-bitcoin play-bitcoin gettxoutsetinfo play-bitcoin-iftop docker ps To start the docker we can use: This will prompt Docker Desktop to request priviledged access: Docker Desktop will start up: play-lnd play-lnd newaddress tb1q0yfkqcs384w3hlq8ksgzcgcxq9dmyydg9h9unr play-getcoins play-lnd walletbalance play-bitcoin netinfo 5 Ride The Lightning Baby RTL will at http://localhost:3000 the default password is password and it will ask you to change this on first login. open http://localhost:3000","title":"Setting up Plebnet Playground on MacOS"},{"location":"playground/#setting-up-plebnet-playground-on-macos","text":"","title":"Setting up Plebnet Playground on MacOS"},{"location":"playground/#resources","text":"Plebnet Playground Docker Readme Bitcoin Core Bitcoin MacOS Build Guide Plebnet Fun","title":"Resources:"},{"location":"playground/#aim","text":"Plebnet Playground is a sandbox environment to help Bitcoin plebs get under the hood with Lightning LND and mess around without using real sats. This brief tutorial is aimed to help noobies setup Plebnet Playground and Bitcoin Core on MacOS in less that hald and hour. CHECK: You can install all of this in a virtual environment if you have one. For simplicity we will be doing this on our everyday admin user account. Nothing in this tutorial should break or interfere with the daily running of your machine.","title":"Aim"},{"location":"playground/#prerequisites","text":"MacOS laptop or desktop running MacOS Mojave or above. We have not tested on earlier versions. I am using MacOS Catalina 10.15 but this process is compatible with later versions as well. ? are there any known compatability issues with newest M1 chips vs Intel?? The Xcode Command Line Tools are a collection of build tools for macOS. These tools must be installed in order to build Bitcoin Core from source. More about that here . To install, run the following command from your terminal: xcode-select --install You will need a Github account. If you haven't got one, set one up. We will use the git version control to fork and clone both Bitcoin Core and Plebnet Playground onto our local machine. NOTE: If you are not familiar with Git yet, don't worry, there is another lesson on this. For the moment just think of it as a version control protocol that allows you to copy a version of the source code onto your local machine to then compile and run it locally. Plebnet Playground runs on Docker which is an open-source platform used for developing, deploying, and managing applications in lightweight virtual environments called containers. The default Terminal that runs either bash or zsh and the Homebrew Package manager.","title":"Prerequisites"},{"location":"playground/#using-the-command-line","text":"This tutorial asumes basic to no experience using the Command Line. If this freaks you out DO NOT WORRY , follow the steps and you will slowly become familiar with using basic commands, installing the necessary dependencies to run Plebnet Playground and getting under the hood running Bitcoin Core on your machine. If you are familiar with CLI already bare with us. If you haven't already, install Homebrew Package manager . Homebrew helps install packages to their own directory and then symlinks their files into /usr/local (on macOS Intel). Homebrew makes it super easy and safe to install and uninstall open source software dependencies compatible with Linux. /bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\" If you haven't already, make sure you have git installed: brew install git Once installed you can use brew info git to confirm the version of git you are using: We are also going to need Python 3 installed. Python is a programming language. If you are already managing different python versions consider using Pyenv to manage these, alternatively: brew install python@3 check the Python version: python --version ...and you should see something like: Now we will install GNU Make is a tool which will allow us to build and compile our package source code locally. brew install make Finally let's install Docker. We could do this straight from the website, but we are now command line ninjas and just need a couple of brewskies: brew install docker-compose followed by: brew install --cask docker Now we're ready to rock and roll forking our code from Github.","title":"Using the Command Line"},{"location":"playground/#forking-repositories","text":"We are going to use Github to \"fork\" or copy the latest version of the Bitcoin Core and the Plebnet Playground Docker repositories. Enter your Github and follow the links to both accounts. Bitcoin Plebnet Playground Click on the fork button to fork the original repositories into your own Github account. It will ask you to name the new fork, but you can keep the default name. Here is what my Github looks like below. You should see both forks under your remote Repositories tab.","title":"Forking repositories"},{"location":"playground/#git-cloning-repositories","text":"We are now going to use the git clone command to yes, clone the version you just forked onto your Github, onto to your local machine. Github conveniantly gives you an easy way to copy the comand straight to your terminal. Enter your forked Github repostiory and find the green Code button. On the drop down you will see options to clone. Unless you already have SSH setup with your Github (Github class) Copy the one under HTTPS. In your Terminal first lets create a new directory in Documents and call it Github. You can do this in the Finder, alternatively type: cd ~/Documents mkdir Github cd ~/Documents/Github Now type: git clone and then paste or CMD + V the address you just copied. It should look like this only addressed to your own Github: git clone https://github.com/addyourgithubhere/bitcoin.git Now lets do the same for the same for the Plebnet Playground repo. NOTE: Make sure you are actually inside the directory you want to clone into. git clone https://github.com/addyourgithubhere/plebnet-playground-docker.git Now you should see in your Finder window the two cloned repositories something like this: Pretty cool huh.","title":"Git cloning repositories"},{"location":"playground/#git-checkout","text":"Now for the the Bitcoin clone we want to check out that the version we have downloaded can be verified with the latest released commit. We do this by going into the Bitcoin/bitcoin original repo, scroll down to the bottom right Releases > Latest This brings up Bitcoin Core 23.0 as of time of writing, and on the subheading we can see a hash on the right which begins with fcf6c8 Click on this and we can see the commit hash on the right: fcf6c8f4eb217763545ede1766831a6b93f583bd Lets copy this and go back to Terminal and type: git checkout fcf6c8f4eb217763545ede1766831a6b93f583bd This will report back to us: You are in 'detached HEAD' state. You can look around, make experimental changes and commit them, and you can discard any commits you make in this state without impacting any branches by switching back to a branch. This confirms we are indeed using the latest commit.","title":"Git Checkout"},{"location":"playground/#building-plebnet-docker","text":"Now we are going to build and compile the code base of the Plebnet Playground Docker. See here for the Github README documentation. Enter the directory where the plebnet-playground-docker has been cloned. cd ~/Documents/Github/plebnet-playground-docker Now let's compile: make init NOTE: If our other dependencies have not been yet installed this will fail as it will require a version of python 3 and docker to work. This can be done via make build or make initialize . See other make commands using just typing make .","title":"Building Plebnet Docker"},{"location":"playground/#install-and-start-all-services","text":"./install.sh","title":"Install and start all services"},{"location":"playground/#builiding-bitcoin-core","text":"Enter the directory where the bitcoin repository has been cloned. See MacOs Bitcoin Buildguide . I reccomend reading through this to usnderstand the various dependencies and options available. We will go with a bare bones simple compiliation. The first step is to download the required dependencies. These dependencies represent the packages required to get a bare bones installation up and running. brew install automake libtool boost pkg-config libevent NOTE: These are 5 different dependencies which we are installing in one brew command. Awesome! Also we will AVOID installing berkeley-db@4 dependency because we do not need support for legacy wallets. Bitcoin Core includes a GUI built with the cross-platform Qt Framework. To compile the GUI, we need to install qt@5. brew install qt@5","title":"Builiding Bitcoin Core"},{"location":"playground/#configuration","text":"There are various ways to configure Bitcoin core, but we will be doing the bare minimal as we don't require legacy support. ./autogen.sh Now we add some configuration options to disable tests and other stuff. ./configure --disable-tests --disable-man --disable-bench --without-bdb Again db@4 is only required to support for legacy wallets, which we don't need thus --without-bdb","title":"Configuration"},{"location":"playground/#compiling","text":"Now lets compile Bitcoin Core: make Now: ./src/bitcoind -conf=/Users/$(whoami)/Documents/GitHub/plebnet-playground-docker/bitcoin-signet/bitcoin.conf !!! Would like to break down what this command does. We did not make and empty configuration file like in the instructions !! This will take a while to compile so be patient.","title":"Compiling"},{"location":"playground/#launching-plebnet","text":"From within the plebnet repo we can start to run the play commands: play play-bitcoin play-bitcoin gettxoutsetinfo play-bitcoin-iftop docker ps To start the docker we can use: This will prompt Docker Desktop to request priviledged access: Docker Desktop will start up: play-lnd play-lnd newaddress tb1q0yfkqcs384w3hlq8ksgzcgcxq9dmyydg9h9unr play-getcoins play-lnd walletbalance play-bitcoin netinfo 5","title":"Launching Plebnet"},{"location":"playground/#ride-the-lightning-baby","text":"RTL will at http://localhost:3000 the default password is password and it will ask you to change this on first login. open http://localhost:3000","title":"Ride The Lightning Baby"},{"location":"playground/docker/","text":"Plebnet Playground Sandbox Docker Package This package will setup a bitcoind, lnd, and tor daemon that will connect to the Plebnet Playground Sandbox (Signet) Chain. This allows users to use and test bitcoin and lightning technologies without the financial risk involved with running on the mainnet chain. RTL (Ride The Lightning) and ThunderHub Web UI is also include to provide a more user friendly experience. Donate to Project Crowdfund for Playground + Plebnet.wiki running costs Direct Donation to Xenonfun Notes Package currently on works/tested on x64 Linux (Ubuntu specifically) All data for containers are bind mapped into volumes/ directory inside the clone repo for ease of editing them. Bitcoind is not using tor, simply because it takes much longer to sync the chain, and while testing this slows me down. The playground signet chain is only around 1MB at time of writing, and takes my machine ~15 seconds to be fully synced clearnet, via tor it is taking minutes. You will need to setup LND wallet from scratch, instructions below PM @xenonfun on Telegram to get access to the Plebnet Playground Telegram group All ports are completely exposed to local host, this is mostly to make it easy for end-users to tinker, and as the signet coins in the playground are worthless so there is little risk of hacking. You can modify the docker-compose.yaml should these cause conflicts. For Windows users you will need to use something like git bash until we make some powershell scripts to provide cleaner functionality Basic Setup Clone Repo & Install Requirements git clone https://github.com/PLEBNET-PLAYGROUND/plebnet-playground-docker --config core.autocrlf=input cd plebnet-playground-docker pip3 install -r requirements.txt Supported System Architectures Architecture TRIPLET build-arg Intel x64 x86_64-linux-gnu OSX 64-bit aarch64-linux-gnu ARM64 linux aarch64-linux-gnu Services Service Description bitcoind Bitcoin Core Daemon lnd Lightning Labs LND Daemon tor tor network daemon rtl Ride The Lightning Daemon thunderhub Thunderhub Lightning UI docs MKDocs documentation notebook Jupyter Notebook environment setup for lightning development dashboard Jupyter Dashboard lndg lndg Dashboard (available on port 8889) Install and start all services (Intel x64 example) TRIPLET=x86_64-linux-gnu ./install.sh Install and start just the bitcoind , lnd services (comma separate them) TRIPLET=x86_64-linux-gnu services=bitcoind,lnd ./install.sh Start containers docker-compose up -d Stop containers docker-compose stop Full removal of Plebnet Playground (this deletes all data out of volumes directory) ./uninstall.sh Make Command Ubuntu Linux apt install make MacOS Change default shell to bash cat /etc/shells chsh -s /bin/bash Install Homebrew /bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\" brew install make docker-compose brew install --cask docker open /Applications/Docker.app Play Command make make init make install && play help Aliases alias lncli='docker exec -it playground-lnd lncli --macaroonpath /root/.lnd/data/chain/bitcoin/signet/admin.macaroon ' alias change-password-playground='docker exec -it playground-lnd lncli --macaroonpath /root/.lnd/data/chain/bitcoin/signet/admin.macaroon changepassword' alias connect-playground='docker exec -it playground-lnd lncli --macaroonpath /root/.lnd/data/chain/bitcoin/signet/admin.macaroon connect 03ee9d906caa8e8e66fe97d7a76c2bd9806813b0b0f1cee8b9d03904b538f53c4e@104.131.10.218:9735' alias logs-bitcoind='docker logs playground-bitcoind' alias logs-lnd='docker logs playground-lnd' alias logs-tor='docker logs playground-tor' alias logs-rtl='docker logs playground-rtl' alias logs-thub='docker logs playground-thub' alias restart-bitcoind='docker restart playground-bitcoind' alias restart-lnd='docker restart playground-lnd' alias restart-tor='docker restart playground-tor' alias restart-rtl='docker restart playground-rtl' alias restart-thub='docker restart playground-thub' alias bos=\"docker run -it --rm -v $PWD/volumes/bos_datadir:/home/node/.bos:rw --network plebnet-playground-docker_default alexbosworth/balanceofsatoshis\" Your first playground LND wallet The wallet will automatically be made for you and use the default password is 12345678 You can change the password with the change-password-playground alias. If you do change your password make sure to update the unlock.password file with your new password. Make your first peer with the seed node for Plebnet Playground Signet connect-playground Now you should get some gossip about the network and be able to run something like this lncli describegraph | jq .nodes[] | grep \"alias\" and see a list of the various node aliases on the network FYI, your alias is not set in default configuration to avoid confusion, go ahead and edit your lnd.conf and make an alias=YourNewAliasName parameter and restart the container. Get into the telegram group and ask for some playground signet coins and go wild. Get some coins Install requirements pip3 install -r requirements.txt Run the ./getcoins.py script and you will get 1tBTC put into your lightning on-chain wallet. RTL Setup RTL will at http://localhost:3000 , the default password is password and it will ask you to change this on first login. ThunderHub Setup ThunderHub will at at http://localhost:3001 , the default password is password . You can change that by editing the volumes/thub_datadir/thubConfig.yaml . Change masterPassword: thunderhub-$2a$12$oRzmFZSOmvYv1heHkU053uv0a1tX9MXNqmcMpZs2hQ0t8k1Onnk1a to masterPassword: mynewpassword . Then restart thunderhub using alias restart-thub . The masterPassword entry should automatically be converted to the hashed version of the password. How to setup Balance of Satoshis (BOS) You may install bos only after you have generated an lnd wallet with create-lnd-wallet . sudo python3 ./install_bos.py If you created the bos alias above, you should be good to go bos --version 10.9.2 How to setup plebnet dashboard The interactive dashboard is an experimental visualization engine for viewing the lightning network. If you used the docker-compose up -d command above, then the dashboard will run on http://localhost:8050 By default only the playground nodes are visualized. However, you can also visualize real lightning network data by placing a describegraph.json file in the repo's dashboard/ directory, then restart the dashboard setting environment variable USE_TEST_DATA=TRUE : USE_TEST_DATA=TRUE docker-compose up dashboard Additional reference material Links Plebnet Wiki Bitcoin Wiki Lightning Wiki Plebnet Telegram Contributors Richard Safier Nan Liu Lamar Wilson @Exfrog @stflowstate John Doe @rafgxyz @asherp @RandyMcMillan @nitesh_btc","title":"Index"},{"location":"playground/docker/#plebnet-playground-sandbox-docker-package","text":"This package will setup a bitcoind, lnd, and tor daemon that will connect to the Plebnet Playground Sandbox (Signet) Chain. This allows users to use and test bitcoin and lightning technologies without the financial risk involved with running on the mainnet chain. RTL (Ride The Lightning) and ThunderHub Web UI is also include to provide a more user friendly experience.","title":"Plebnet Playground Sandbox Docker Package"},{"location":"playground/docker/#donate-to-project","text":"Crowdfund for Playground + Plebnet.wiki running costs Direct Donation to Xenonfun","title":"Donate to Project"},{"location":"playground/docker/#notes","text":"Package currently on works/tested on x64 Linux (Ubuntu specifically) All data for containers are bind mapped into volumes/ directory inside the clone repo for ease of editing them. Bitcoind is not using tor, simply because it takes much longer to sync the chain, and while testing this slows me down. The playground signet chain is only around 1MB at time of writing, and takes my machine ~15 seconds to be fully synced clearnet, via tor it is taking minutes. You will need to setup LND wallet from scratch, instructions below PM @xenonfun on Telegram to get access to the Plebnet Playground Telegram group All ports are completely exposed to local host, this is mostly to make it easy for end-users to tinker, and as the signet coins in the playground are worthless so there is little risk of hacking. You can modify the docker-compose.yaml should these cause conflicts. For Windows users you will need to use something like git bash until we make some powershell scripts to provide cleaner functionality","title":"Notes"},{"location":"playground/docker/#basic-setup","text":"","title":"Basic Setup"},{"location":"playground/docker/#clone-repo-install-requirements","text":"git clone https://github.com/PLEBNET-PLAYGROUND/plebnet-playground-docker --config core.autocrlf=input cd plebnet-playground-docker pip3 install -r requirements.txt","title":"Clone Repo &amp; Install Requirements"},{"location":"playground/docker/#supported-system-architectures","text":"Architecture TRIPLET build-arg Intel x64 x86_64-linux-gnu OSX 64-bit aarch64-linux-gnu ARM64 linux aarch64-linux-gnu","title":"Supported System Architectures"},{"location":"playground/docker/#services","text":"Service Description bitcoind Bitcoin Core Daemon lnd Lightning Labs LND Daemon tor tor network daemon rtl Ride The Lightning Daemon thunderhub Thunderhub Lightning UI docs MKDocs documentation notebook Jupyter Notebook environment setup for lightning development dashboard Jupyter Dashboard lndg lndg Dashboard (available on port 8889)","title":"Services"},{"location":"playground/docker/#install-and-start-all-services-intel-x64-example","text":"TRIPLET=x86_64-linux-gnu ./install.sh","title":"Install and start all services (Intel x64 example)"},{"location":"playground/docker/#install-and-start-just-the-bitcoindlnd-services-comma-separate-them","text":"TRIPLET=x86_64-linux-gnu services=bitcoind,lnd ./install.sh","title":"Install and start just the bitcoind,lnd services (comma separate them)"},{"location":"playground/docker/#start-containers","text":"docker-compose up -d","title":"Start containers"},{"location":"playground/docker/#stop-containers","text":"docker-compose stop","title":"Stop containers"},{"location":"playground/docker/#full-removal-of-plebnet-playground-this-deletes-all-data-out-of-volumes-directory","text":"./uninstall.sh","title":"Full removal of Plebnet Playground (this deletes all data out of volumes directory)"},{"location":"playground/docker/#make-command","text":"","title":"Make Command"},{"location":"playground/docker/#ubuntu-linux","text":"apt install make","title":"Ubuntu Linux"},{"location":"playground/docker/#macos","text":"","title":"MacOS"},{"location":"playground/docker/#change-default-shell-to-bash","text":"cat /etc/shells chsh -s /bin/bash","title":"Change default shell to bash"},{"location":"playground/docker/#install-homebrew","text":"/bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\" brew install make docker-compose brew install --cask docker open /Applications/Docker.app","title":"Install Homebrew"},{"location":"playground/docker/#play-command","text":"make make init make install && play help","title":"Play Command"},{"location":"playground/docker/#aliases","text":"alias lncli='docker exec -it playground-lnd lncli --macaroonpath /root/.lnd/data/chain/bitcoin/signet/admin.macaroon ' alias change-password-playground='docker exec -it playground-lnd lncli --macaroonpath /root/.lnd/data/chain/bitcoin/signet/admin.macaroon changepassword' alias connect-playground='docker exec -it playground-lnd lncli --macaroonpath /root/.lnd/data/chain/bitcoin/signet/admin.macaroon connect 03ee9d906caa8e8e66fe97d7a76c2bd9806813b0b0f1cee8b9d03904b538f53c4e@104.131.10.218:9735' alias logs-bitcoind='docker logs playground-bitcoind' alias logs-lnd='docker logs playground-lnd' alias logs-tor='docker logs playground-tor' alias logs-rtl='docker logs playground-rtl' alias logs-thub='docker logs playground-thub' alias restart-bitcoind='docker restart playground-bitcoind' alias restart-lnd='docker restart playground-lnd' alias restart-tor='docker restart playground-tor' alias restart-rtl='docker restart playground-rtl' alias restart-thub='docker restart playground-thub' alias bos=\"docker run -it --rm -v $PWD/volumes/bos_datadir:/home/node/.bos:rw --network plebnet-playground-docker_default alexbosworth/balanceofsatoshis\"","title":"Aliases"},{"location":"playground/docker/#your-first-playground-lnd-wallet","text":"The wallet will automatically be made for you and use the default password is 12345678 You can change the password with the change-password-playground alias. If you do change your password make sure to update the unlock.password file with your new password.","title":"Your first playground LND wallet"},{"location":"playground/docker/#make-your-first-peer-with-the-seed-node-for-plebnet-playground-signet","text":"connect-playground Now you should get some gossip about the network and be able to run something like this lncli describegraph | jq .nodes[] | grep \"alias\" and see a list of the various node aliases on the network FYI, your alias is not set in default configuration to avoid confusion, go ahead and edit your lnd.conf and make an alias=YourNewAliasName parameter and restart the container. Get into the telegram group and ask for some playground signet coins and go wild.","title":"Make your first peer with the seed node for Plebnet Playground Signet"},{"location":"playground/docker/#get-some-coins","text":"Install requirements pip3 install -r requirements.txt Run the ./getcoins.py script and you will get 1tBTC put into your lightning on-chain wallet.","title":"Get some coins"},{"location":"playground/docker/#rtl-setup","text":"RTL will at http://localhost:3000 , the default password is password and it will ask you to change this on first login.","title":"RTL Setup"},{"location":"playground/docker/#thunderhub-setup","text":"ThunderHub will at at http://localhost:3001 , the default password is password . You can change that by editing the volumes/thub_datadir/thubConfig.yaml . Change masterPassword: thunderhub-$2a$12$oRzmFZSOmvYv1heHkU053uv0a1tX9MXNqmcMpZs2hQ0t8k1Onnk1a to masterPassword: mynewpassword . Then restart thunderhub using alias restart-thub . The masterPassword entry should automatically be converted to the hashed version of the password.","title":"ThunderHub Setup"},{"location":"playground/docker/#how-to-setup-balance-of-satoshis-bos","text":"You may install bos only after you have generated an lnd wallet with create-lnd-wallet . sudo python3 ./install_bos.py If you created the bos alias above, you should be good to go bos --version 10.9.2","title":"How to setup Balance of Satoshis (BOS)"},{"location":"playground/docker/#how-to-setup-plebnet-dashboard","text":"The interactive dashboard is an experimental visualization engine for viewing the lightning network. If you used the docker-compose up -d command above, then the dashboard will run on http://localhost:8050 By default only the playground nodes are visualized. However, you can also visualize real lightning network data by placing a describegraph.json file in the repo's dashboard/ directory, then restart the dashboard setting environment variable USE_TEST_DATA=TRUE : USE_TEST_DATA=TRUE docker-compose up dashboard","title":"How to setup plebnet dashboard"},{"location":"playground/docker/#additional-reference-material","text":"","title":"Additional reference material"},{"location":"playground/docker/#links","text":"Plebnet Wiki Bitcoin Wiki Lightning Wiki Plebnet Telegram","title":"Links"},{"location":"playground/docker/#contributors","text":"Richard Safier Nan Liu Lamar Wilson @Exfrog @stflowstate John Doe @rafgxyz @asherp @RandyMcMillan @nitesh_btc","title":"Contributors"},{"location":"playground/docker/MAKE/","text":"MAKE COMMAND make[1]: Entering directory '/root/plebnet-playground-docker' [USAGE]: make [COMMAND] [EXTRA_ARGUMENTS] make make help print help make report print environment variables make initialize install dependencies make init initialize basic dependencies make build make build para=true parallelized build make install make run nocache=true verbose=true [DEV ENVIRONMENT]: make signin profile=gh-user ~/GH_TOKEN.txt required from github.com make build make package-all make install-python38-sh make install-python39-sh [EXAMPLES]: make run nocache=true verbose=true make init && play help make[1]: Leaving directory '/root/plebnet-playground-docker'","title":"make"},{"location":"playground/docker/MAKE/#make-command","text":"make[1]: Entering directory '/root/plebnet-playground-docker' [USAGE]: make [COMMAND] [EXTRA_ARGUMENTS] make make help print help make report print environment variables make initialize install dependencies make init initialize basic dependencies make build make build para=true parallelized build make install make run nocache=true verbose=true [DEV ENVIRONMENT]: make signin profile=gh-user ~/GH_TOKEN.txt required from github.com make build make package-all make install-python38-sh make install-python39-sh [EXAMPLES]: make run nocache=true verbose=true make init && play help make[1]: Leaving directory '/root/plebnet-playground-docker'","title":"MAKE COMMAND"},{"location":"playground/docker/PLAY/","text":"PLAY COMMAND play ids play top play shell play start play stop play iftop play ifconfig play newaddress play total-balance play confirmed-balance play unconfirmed-balance play lncli -n signet walletbalance play tor-iftop Examples: play bitcoin id play bitcoin iftop play bitcoin netinfo 5 play bitcoin gettxoutsetinfo play bitcoin getmininginfo play bitcoin '<COMMAND>' play bitcoin 'bitcoin-cli getblockhash 1000' play bitcoin 'bitcoin-cli getblock $(bitcoin-cli getblockhash 0)' play lnd play lnd id play lnd top play lnd info play lnd ifconfig play lnd newaddress play lnd total-balance play lnd '<COMMAND>' play-lnd balance","title":"play"},{"location":"playground/docker/PLAY/#play-command","text":"play ids play top play shell play start play stop play iftop play ifconfig play newaddress play total-balance play confirmed-balance play unconfirmed-balance play lncli -n signet walletbalance play tor-iftop Examples: play bitcoin id play bitcoin iftop play bitcoin netinfo 5 play bitcoin gettxoutsetinfo play bitcoin getmininginfo play bitcoin '<COMMAND>' play bitcoin 'bitcoin-cli getblockhash 1000' play bitcoin 'bitcoin-cli getblock $(bitcoin-cli getblockhash 0)' play lnd play lnd id play lnd top play lnd info play lnd ifconfig play lnd newaddress play lnd total-balance play lnd '<COMMAND>' play-lnd balance","title":"PLAY COMMAND"},{"location":"qt/","text":"Notes: QtWebEngine Installing dependencies on Ubuntu sudo apt-get install bison build-essential gperf flex python2 libasound2-dev \\ libcups2-dev libdrm-dev libegl1-mesa-dev libnss3-dev libpci-dev libpulse-dev libudev-dev nodejs \\ libxtst-dev gyp ninja-build Installing additional dependencies on Ubuntu 20.04+ (To save a bit time compiling the bundled variants from qtwebengine.git) sudo apt-get install libssl-dev libxcursor-dev libxcomposite-dev libxdamage-dev libxrandr-dev \\ libfontconfig1-dev libxss-dev libsrtp0-dev libwebp-dev libjsoncpp-dev libopus-dev libminizip-dev \\ libavutil-dev libavformat-dev libavcodec-dev libevent-dev libvpx-dev libsnappy-dev libre2-dev libprotobuf-dev protobuf-compiler","title":"Index"},{"location":"qt/#notes-qtwebengine","text":"","title":"Notes: QtWebEngine"},{"location":"qt/#installing-dependencies-on-ubuntu","text":"sudo apt-get install bison build-essential gperf flex python2 libasound2-dev \\ libcups2-dev libdrm-dev libegl1-mesa-dev libnss3-dev libpci-dev libpulse-dev libudev-dev nodejs \\ libxtst-dev gyp ninja-build","title":"Installing dependencies on Ubuntu"},{"location":"qt/#installing-additional-dependencies-on-ubuntu-2004","text":"","title":"Installing additional dependencies on Ubuntu 20.04+"},{"location":"qt/#to-save-a-bit-time-compiling-the-bundled-variants-from-qtwebenginegit","text":"sudo apt-get install libssl-dev libxcursor-dev libxcomposite-dev libxdamage-dev libxrandr-dev \\ libfontconfig1-dev libxss-dev libsrtp0-dev libwebp-dev libjsoncpp-dev libopus-dev libminizip-dev \\ libavutil-dev libavformat-dev libavcodec-dev libevent-dev libvpx-dev libsnappy-dev libre2-dev libprotobuf-dev protobuf-compiler","title":"(To save a bit time compiling the bundled variants from qtwebengine.git)"}]}