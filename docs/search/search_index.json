{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"TimeChain.Academy git clone https://github.com/timechain-academy/timechain.academy.git `````` help print help test test test test test test test test test test test test test test test test test test test test ##################### #####################","title":"Home"},{"location":"#timechainacademy","text":"git clone https://github.com/timechain-academy/timechain.academy.git `````` help print help test test test test test test test test test test test test test test test test test test test test ##################### #####################","title":"TimeChain.Academy"},{"location":"COMMANDS/","text":"Setup","title":"Setup"},{"location":"COMMANDS/#setup","text":"","title":"Setup"},{"location":"FOOTER/","text":"\ud83d\udc40 seq 0 947 | (while read -r n; do bitcoin-cli gettxout \\ 54e48e5f5c656b26c3bca14a8c95aa583d07ebe84dde3b7dd4a78f4e4186e713 $n \\ | jq -r '.scriptPubKey.asm' | awk '{ print $2 $3 $4 }'; done) | \\ tr -d '\\n' | cut -c 17-368600 | xxd -r -p > bitcoin.pdf","title":"FOOTER"},{"location":"HEADER/","text":"TimeChain.Academy git clone https://github.com/timechain-academy/timechain.academy.git","title":"HEADER"},{"location":"HEADER/#timechainacademy","text":"git clone https://github.com/timechain-academy/timechain.academy.git","title":"TimeChain.Academy"},{"location":"awesome/","text":"Platforms Node.js - Async non-blocking event-driven JavaScript runtime built on Chrome's V8 JavaScript engine. Cross-Platform - Writing cross-platform code on Node.js. Frontend Development iOS - Mobile operating system for Apple phones and tablets. Android - Mobile operating system developed by Google. IoT & Hybrid Apps Electron - Cross-platform native desktop apps using JavaScript/HTML/CSS. Cordova - JavaScript API for hybrid apps. React Native - JavaScript framework for writing natively rendering mobile apps for iOS and Android. Xamarin - Mobile app development IDE, testing, and distribution. Linux Containers eBPF - Virtual machine that allows you to write more efficient and powerful tracing and monitoring for Linux systems. Arch-based Projects - Linux distributions and projects based on Arch Linux. macOS - Operating system for Apple's Mac computers. Command-Line Screensavers Apps Open Source Apps watchOS - Operating system for the Apple Watch. JVM Salesforce Amazon Web Services Windows IPFS - P2P hypermedia protocol. Fuse - Mobile development tools. Heroku - Cloud platform as a service. Raspberry Pi - Credit card-sized computer aimed at teaching kids programming, but capable of a lot more. Qt - Cross-platform GUI app framework. WebExtensions - Cross-browser extension system. RubyMotion - Write cross-platform native apps for iOS, Android, macOS, tvOS, and watchOS in Ruby. Smart TV - Create apps for different TV platforms. GNOME - Simple and distraction-free desktop environment for Linux. KDE - A free software community dedicated to creating an open and user-friendly computing experience. .NET Core Roslyn - Open-source compilers and code analysis APIs for C# and VB.NET languages. Amazon Alexa - Virtual home assistant. DigitalOcean - Cloud computing platform designed for developers. Flutter - Google's mobile SDK for building native iOS and Android apps from a single codebase written in Dart. Home Assistant - Open source home automation that puts local control and privacy first. IBM Cloud - Cloud platform for developers and companies. Firebase - App development platform built on Google Cloud Platform. Robot Operating System 2.0 - Set of software libraries and tools that help you build robot apps. Adafruit IO - Visualize and store data from any device. Cloudflare - CDN, DNS, DDoS protection, and security for your site. Actions on Google - Developer platform for Google Assistant. ESP - Low-cost microcontrollers with WiFi and broad IoT applications. Deno - A secure runtime for JavaScript and TypeScript that uses V8 and is built in Rust. DOS - Operating system for x86-based personal computers that was popular during the 1980s and early 1990s. Nix - Package manager for Linux and other Unix systems that makes package management reliable and reproducible. Programming Languages JavaScript Promises Standard Style - Style guide and linter. Must Watch Talks Tips Network Layer Micro npm Packages Mad Science npm Packages - Impossible sounding projects that exist. Maintenance Modules - For npm packages. npm - Package manager. AVA - Test runner. ESLint - Linter. Functional Programming Observables npm scripts - Task runner. 30 Seconds of Code - Code snippets you can understand in 30 seconds. Ponyfills - Like polyfills but without overriding native APIs. Swift - Apple's compiled programming language that is secure, modern, programmer-friendly, and fast. Education Playgrounds Python - General-purpose programming language designed for readability. Asyncio - Asynchronous I/O in Python 3. Scientific Audio - Scientific research in audio/music. CircuitPython - A version of Python for microcontrollers. Data Science - Data analysis and machine learning. Typing - Optional static typing for Python. MicroPython - A lean and efficient implementation of Python 3 for microcontrollers. Rust Haskell PureScript Go Scala Scala Native - Optimizing ahead-of-time compiler for Scala based on LLVM. Ruby Clojure ClojureScript Elixir Elm Erlang Julia - High-level dynamic programming language designed to address the needs of high-performance numerical analysis and computational science. Lua C C/C++ - General-purpose language with a bias toward system programming and embedded, resource-constrained software. R - Functional programming language and environment for statistical computing and graphics. Learning D Common Lisp - Powerful dynamic multiparadigm language that facilitates iterative and interactive development. Learning Perl Groovy Dart Java - Popular secure object-oriented language designed for flexibility to \"write once, run anywhere\". RxJava Kotlin OCaml ColdFusion Fortran PHP - Server-side scripting language. Composer - Package manager. Pascal AutoHotkey AutoIt Crystal Frege - Haskell for the JVM. CMake - Build, test, and package software. ActionScript 3 - Object-oriented language targeting Adobe AIR. Eta - Functional programming language for the JVM. Idris - General purpose pure functional programming language with dependent types influenced by Haskell and ML. Ada/SPARK - Modern programming language designed for large, long-lived apps where reliability and efficiency are essential. Q# - Domain-specific programming language used for expressing quantum algorithms. Imba - Programming language inspired by Ruby and Python and compiles to performant JavaScript. Vala - Programming language designed to take full advantage of the GLib and GNOME ecosystems, while preserving the speed of C code. Coq - Formal language and environment for programming and specification which facilitates interactive development of machine-checked proofs. V - Simple, fast, safe, compiled language for developing maintainable software. Front-End Development ES6 Tools Web Performance Optimization Web Tools CSS - Style sheet language that specifies how HTML elements are displayed on screen. Critical-Path Tools Scalability Must-Watch Talks Protips Frameworks React - App framework. Relay - Framework for building data-driven React apps. React Hooks - A new feature that lets you use state and other React features without writing a class. Web Components Polymer - JavaScript library to develop Web Components. Angular - App framework. Backbone - App framework. HTML5 - Markup language used for websites & web apps. SVG - XML-based vector image format. Canvas KnockoutJS - JavaScript library. Dojo Toolkit - JavaScript toolkit. Inspiration Ember - App framework. Android UI iOS UI Meteor BEM Flexbox Web Typography Web Accessibility Material Design D3 - Library for producing dynamic, interactive data visualizations. Emails jQuery - Easy to use JavaScript library for DOM manipulation. Tips Web Audio Offline-First Static Website Services Cycle.js - Functional and reactive JavaScript framework. Text Editing Motion UI Design Vue.js - App framework. Marionette.js - App framework. Aurelia - App framework. Charting Ionic Framework 2 Chrome DevTools PostCSS - CSS tool. Draft.js - Rich text editor framework for React. Service Workers Progressive Web Apps choo - App framework. Redux - State container for JavaScript apps. webpack - Module bundler. Browserify - Module bundler. Sass - CSS preprocessor. Ant Design - Enterprise-class UI design language. Less - CSS preprocessor. WebGL - JavaScript API for rendering 3D graphics. Preact - App framework. Progressive Enhancement Next.js - Framework for server-rendered React apps. lit-html - HTML templating library for JavaScript. JAMstack - Modern web development architecture based on client-side JavaScript, reusable APIs, and prebuilt markup. WordPress-Gatsby - Web development technology stack with WordPress as a back end and Gatsby as a front end. Mobile Web Development - Creating a great mobile web experience. Storybook - Development environment for UI components. Blazor - .NET web framework using C#/Razor and HTML that runs in the browser with WebAssembly. PageSpeed Metrics - Metrics to help understand page speed and user experience. Tailwind CSS - Utility-first CSS framework for rapid UI development. Seed - Rust framework for creating web apps running in WebAssembly. Web Performance Budget - Techniques to ensure certain performance metrics for a website. Web Animation - Animations in the browser with JavaScript, CSS, SVG, etc. Yew - Rust framework inspired by Elm and React for creating multi-threaded frontend web apps with WebAssembly. Material-UI - Material Design React components for faster and easier web development. Building Blocks for Web Apps - Standalone features to be integrated into web apps. Svelte - App framework. Design systems - Collection of reusable components, guided by rules that ensure consistency and speed. Inertia.js - Make single-page apps without building an API. Back-End Development Flask - Python framework. Docker Vagrant - Automation virtual machine environment. Pyramid - Python framework. Play1 Framework CakePHP - PHP framework. Symfony - PHP framework. Education Laravel - PHP framework. Education TALL Stack - Full-stack development solution featuring libraries built by the Laravel community. Rails - Web app framework for Ruby. Gems - Packages. Phalcon - PHP framework. Useful .htaccess Snippets nginx - Web server. Dropwizard - Java framework. Kubernetes - Open-source platform that automates Linux container operations. Lumen - PHP micro-framework. Serverless Framework - Serverless computing and serverless architectures. Apache Wicket - Java web app framework. Vert.x - Toolkit for building reactive apps on the JVM. Terraform - Tool for building, changing, and versioning infrastructure. Vapor - Server-side development in Swift. Dash - Python web app framework. FastAPI - Python web app framework. CDK - Open-source software development framework for defining cloud infrastructure in code. IAM - User accounts, authentication and authorization. Computer Science University Courses Data Science Tutorials Machine Learning Tutorials ML with Ruby - Learning, implementing, and applying Machine Learning using Ruby. Core ML Models - Models for Apple's machine learning framework. H2O - Open source distributed machine learning platform written in Java with APIs in R, Python, and Scala. Software Engineering for Machine Learning - From experiment to production-level machine learning. AI in Finance - Solving problems in finance with machine learning. JAX - Automatic differentiation and XLA compilation brought together for high-performance machine learning research. XAI - Providing insight, explanations, and interpretability to machine learning methods. Speech and Natural Language Processing Spanish NLP with Ruby Question Answering - The science of asking and answering in natural language with a machine. Natural Language Generation - Generation of text used in data to text, conversational agents, and narrative generation applications. Linguistics Cryptography Papers - Theory basics for using cryptography by non-cryptographers. Computer Vision Deep Learning - Neural networks. TensorFlow - Library for machine intelligence. TensorFlow.js - WebGL-accelerated machine learning JavaScript library for training and deploying models. TensorFlow Lite - Framework that optimizes TensorFlow models for on-device machine learning. Papers - The most cited deep learning papers. Education Deep Vision Open Source Society University Functional Programming Empirical Software Engineering - Evidence-based research on software systems. Static Analysis & Code Quality Information Retrieval - Learn to develop your own search engine. Quantum Computing - Computing which utilizes quantum mechanics and qubits on quantum computers. Big Data Big Data Public Datasets Hadoop - Framework for distributed storage and processing of very large data sets. Data Engineering Streaming Apache Spark - Unified engine for large-scale data processing. Qlik - Business intelligence platform for data visualization, analytics, and reporting apps. Splunk - Platform for searching, monitoring, and analyzing structured and unstructured machine-generated big data in real-time. Theory Papers We Love Talks Algorithms Education - Learning and practicing. Algorithm Visualizations Artificial Intelligence Search Engine Optimization Competitive Programming Math Recursion Schemes - Traversing nested data structures. Books Free Programming Books Go Books R Books Mind Expanding Books Book Authoring Elixir Books Editors Sublime Text Vim Emacs Atom - Open-source and hackable text editor. Visual Studio Code - Cross-platform open-source text editor. Gaming Game Development Game Talks Godot - Game engine. Open Source Games Unity - Game engine. Chess L\u00d6VE - Game engine. PICO-8 - Fantasy console. Game Boy Development Construct 2 - Game engine. Gideros - Game engine. Minecraft - Sandbox video game. Game Datasets - Materials and datasets for Artificial Intelligence in games. Haxe Game Development - A high-level strongly typed programming language used to produce cross-platform native code. libGDX - Java game framework. PlayCanvas - Game engine. Game Remakes - Actively maintained open-source game remakes. Flame - Game engine for Flutter. Discord Communities - Chat with friends and communities. CHIP-8 - Virtual computer game machine from the 70s. Games of Coding - Learn a programming language by making games. Development Environment Quick Look Plugins - For macOS. Dev Env Dotfiles Shell Fish - User-friendly shell. Command-Line Apps ZSH Plugins GitHub - Hosting service for Git repositories. Browser Extensions Cheat Sheet Pinned Gists - Dynamic pinned gists for your GitHub profile. Git Cheat Sheet & Git Flow Git Tips Git Add-ons - Enhance the git CLI. Git Hooks - Scripts for automating tasks during git workflows. SSH FOSS for Developers Hyper - Cross-platform terminal app built on web technologies. PowerShell - Cross-platform object-oriented shell. Alfred Workflows - Productivity app for macOS. Terminals Are Sexy GitHub Actions - Create tasks to automate your workflow and share them with others on GitHub. Entertainment Science Fiction - Scifi. Fantasy Podcasts Email Newsletters IT Quotes Databases Database MySQL SQLAlchemy InfluxDB Neo4j MongoDB - NoSQL database. RethinkDB TinkerPop - Graph computing framework. PostgreSQL - Object-relational database. CouchDB - Document-oriented NoSQL database. HBase - Distributed, scalable, big data store. NoSQL Guides - Help on using non-relational, distributed, open-source, and horizontally scalable databases. Contexture - Abstracts queries/filters and results/aggregations from different backing data stores like ElasticSearch and MongoDB. Database Tools - Everything that makes working with databases easier. Grakn - Logical database to organize large and complex networks of data as one body of knowledge. Cassandra - Open-source, distributed, wide column store, NoSQL database management system. Media Creative Commons Media Fonts Codeface - Text editor fonts. Stock Resources GIF - Image format known for animated images. Music Open Source Documents Audio Visualization Broadcasting Pixel Art - Pixel-level digital art. FFmpeg - Cross-platform solution to record, convert and stream audio and video. Icons - Downloadable SVG/PNG/font icon projects. Audiovisual - Lighting, audio and video in professional environments. Learn CLI Workshoppers - Interactive tutorials. Learn to Program Speaking Tech Videos Dive into Machine Learning Computer History Programming for Kids Educational Games - Learn while playing. JavaScript Learning CSS Learning - Mainly about CSS \u2013 the language and the modules. Product Management - Learn how to be a better product manager. Roadmaps - Gives you a clear route to improve your knowledge and skills. YouTubers - Watch video tutorials from YouTubers that teach you about technology. Security Application Security Security CTF - Capture The Flag. Malware Analysis Android Security Hacking Honeypots - Deception trap, designed to entice an attacker into attempting to compromise the information systems in an organization. Incident Response Vehicle Security and Car Hacking Web Security - Security of web apps & services. Lockpicking - The art of unlocking a lock by manipulating its components without the key. Cybersecurity Blue Team - Groups of individuals who identify security flaws in information technology systems. Fuzzing - Automated software testing technique that involves feeding pseudo-randomly generated input data. Embedded and IoT Security GDPR - Regulation on data protection and privacy for all individuals within EU. DevSecOps - Integration of security practices into DevOps . Content Management Systems Umbraco Refinery CMS - Ruby on Rails CMS. Wagtail - Django CMS focused on flexibility and user experience. Textpattern - Lightweight PHP-based CMS. Drupal - Extensible PHP-based CMS. Craft CMS - Content-first CMS. Sitecore - .NET digital marketing platform that combines CMS with tools for managing multiple websites. Silverstripe CMS - PHP MVC framework that serves as a classic or headless CMS. Hardware Robotics Internet of Things Electronics - For electronic engineers and hobbyists. Bluetooth Beacons Electric Guitar Specifications - Checklist for building your own electric guitar. Plotters - Computer-controlled drawing machines and other visual art robots. Robotic Tooling - Free and open tools for professional robotic development. LIDAR - Sensor for measuring distances by illuminating the target with laser light. Business Open Companies Places to Post Your Startup OKR Methodology - Goal setting & communication best practices. Leading and Managing - Leading people and being a manager in a technology company/environment. Indie - Independent developer businesses. Tools of the Trade - Tools used by companies on Hacker News. Clean Tech - Fighting climate change with technology. Wardley Maps - Provides high situational awareness to help improve strategic planning and decision making. Social Enterprise - Building an organization primarily focused on social impact that is at least partially self-funded. Engineering Team Management - How to transition from software development to engineering management. Developer-First Products - Products that target developers as the user. Work Slack - Team collaboration. Communities Remote Jobs Productivity Niche Job Boards Programming Interviews Code Review - Reviewing code. Creative Technology - Businesses & groups that specialize in combining computing, design, art, and user experience. Networking Software-Defined Networking Network Analysis PCAPTools Real-Time Communications - Network protocols for near simultaneous exchange of media and data. Decentralized Systems Bitcoin - Bitcoin services and tools for software developers. Ripple - Open source distributed settlement network. Non-Financial Blockchain - Non-financial blockchain applications. Mastodon - Open source decentralized microblogging network. Ethereum - Distributed computing platform for smart contract development. Blockchain AI - Blockchain projects for artificial intelligence and machine learning. EOSIO - A decentralized operating system supporting industrial-scale apps. Corda - Open source blockchain platform designed for business. Waves - Open source blockchain platform and development toolset for Web 3.0 apps and decentralized solutions. Substrate - Framework for writing scalable, upgradeable blockchains in Rust. Higher Education Computational Neuroscience - A multidisciplinary science which uses computational approaches to study the nervous system. Digital History - Computer-aided scientific investigation of history. Scientific Writing - Distraction-free scientific writing with Markdown, reStructuredText and Jupyter notebooks. Events Creative Tech Events - Events around the globe for creative coding, tech, design, music, arts and cool stuff. Events in Italy - Tech-related events in Italy. Events in the Netherlands - Tech-related events in the Netherlands. Testing Testing - Software testing. Visual Regression Testing - Ensures changes did not break the functionality or style. Selenium - Open-source browser automation framework and ecosystem. Appium - Test automation tool for apps. TAP - Test Anything Protocol. JMeter - Load testing and performance measurement tool. k6 - Open-source, developer-centric performance monitoring and load testing solution. Playwright - Node.js library to automate Chromium, Firefox and WebKit with a single API. Quality Assurance Roadmap - How to start & build a career in software testing. Miscellaneous JSON - Text based data interchange format. GeoJSON Datasets CSV - A text file format that stores tabular data and uses a comma to separate values. Discounts for Student Developers Radio Awesome - Recursion illustrated. Analytics REST Continuous Integration and Continuous Delivery Services Engineering Free for Developers Answers - Stack Overflow, Quora, etc. Sketch - Design app for macOS. Boilerplate Projects Readme Design and Development Guides Software Engineering Blogs Self Hosted FOSS Production Apps Gulp - Task runner. AMA - Ask Me Anything. Answers Open Source Photography OpenGL - Cross-platform API for rendering 2D and 3D graphics. GraphQL Urban & Regional Planning - Concerning the built environment and communities. Transit Research Tools Data Visualization Social Media Share Links Microservices Unicode - Unicode standards, quirks, packages and resources. Code Points Beginner-Friendly Projects Katas Tools for Activism Citizen Science - For community-based and non-institutional scientists. MQTT - \"Internet of Things\" connectivity protocol. Hacking Spots For Girls Vorpal - Node.js CLI framework. Vulkan - Low-overhead, cross-platform 3D graphics and compute API. LaTeX - Typesetting language. Economics - An economist's starter kit. Funny Markov Chains Bioinformatics Cheminformatics - Informatics techniques applied to problems in chemistry. Colorful - Choose your next color scheme. Steam - Digital distribution platform. Bots - Building bots. Site Reliability Engineering Empathy in Engineering - Building and promoting more compassionate engineering cultures. DTrace - Dynamic tracing framework. Userscripts - Enhance your browsing experience. Pok\u00e9mon - Pok\u00e9mon and Pok\u00e9mon GO. ChatOps - Managing technical and business operations through a chat. Falsehood - Falsehoods programmers believe in. Domain-Driven Design - Software development approach for complex needs by connecting the implementation to an evolving model. Quantified Self - Self-tracking through technology. SaltStack - Python-based config management system. Web Design - For digital designers. Creative Coding - Programming something expressive instead of something functional. No-Login Web Apps - Web apps that work without login. Free Software - Free as in freedom. Framer - Prototyping interactive UI designs. Markdown - Markup language. Dev Fun - Funny developer projects. Healthcare - Open source healthcare software for facilities, providers, developers, policy experts, and researchers. Magento 2 - Open Source eCommerce built with PHP. TikZ - Graph drawing packages for TeX/LaTeX/ConTeXt. Neuroscience - Study of the nervous system and brain. Ad-Free - Ad-free alternatives. Esolangs - Programming languages designed for experimentation or as jokes rather than actual use. Prometheus - Open-source monitoring system. Homematic - Smart home devices. Ledger - Double-entry accounting on the command-line. Web Monetization - A free open web standard service that allows you to send money directly in your browser. Uncopyright - Public domain works. Crypto Currency Tools & Algorithms - Digital currency where encryption is used to regulate the generation of units and verify transfers. Diversity - Creating a more inclusive and diverse tech community. Open Source Supporters - Companies that offer their tools and services for free to open source projects. Design Principles - Create better and more consistent designs and experiences. Theravada - Teachings from the Theravada Buddhist tradition. inspectIT - Open source Java app performance management tool. Open Source Maintainers - The experience of being an open source maintainer. Calculators - Calculators for every platform. Captcha - A type of challenge\u2013response test used in computing to determine whether or not the user is human. Jupyter - Create and share documents that contain code, equations, visualizations and narrative text. FIRST Robotics Competition - International high school robotics championship. Humane Technology - Open source projects that help improve society. Speakers - Conference and meetup speakers in the programming and design community. Board Games - Table-top gaming fun for all. Software Patreons - Fund individual programmers or the development of open source projects. Parasite - Parasites and host-pathogen interactions. Food - Food-related projects on GitHub. Mental Health - Mental health awareness and self-care in the software industry. Bitcoin Payment Processors - Start accepting Bitcoin. Scientific Computing - Solving complex scientific problems using computers. Amazon Sellers Agriculture - Open source technology for farming and gardening. Product Design - Design a product from the initial concept to production. Prisma - Turn your database into a GraphQL API. Software Architecture - The discipline of designing and building software. Connectivity Data and Reports - Better understand who has access to telecommunication and internet infrastructure and on what terms. Stacks - Tech stacks for building different apps and features. Cytodata - Image-based profiling of biological phenotypes for computational biologists. IRC - Open source messaging protocol. Advertising - Advertising and programmatic media for websites. Earth - Find ways to resolve the climate crisis. Naming - Naming things in computer science done right. Biomedical Information Extraction - How to extract information from unstructured biomedical data and text. Web Archiving - An effort to preserve the Web for future generations. WP-CLI - Command-line interface for WordPress. Credit Modeling - Methods for classifying credit applicants into risk classes. Ansible - A Python-based, open source IT configuration management and automation platform. Biological Visualizations - Interactive visualization of biological data on the web. QR Code - A type of matrix barcode that can be used to store and share a small amount of information. Veganism - Making the plant-based lifestyle easy and accessible. Translations - The transfer of the meaning of a text from one language to another. Related All Awesome Lists - All the Awesome lists on GitHub. Awesome Indexed - Search the Awesome dataset. Awesome Search - Quick search for Awesome lists. StumbleUponAwesome - Discover random pages from the Awesome dataset using a browser extension. Awesome CLI - A simple command-line tool to dive into Awesome lists. Awesome Viewer - A visualizer for all of the above Awesome lists.","title":"Awesome"},{"location":"awesome/#platforms","text":"Node.js - Async non-blocking event-driven JavaScript runtime built on Chrome's V8 JavaScript engine. Cross-Platform - Writing cross-platform code on Node.js. Frontend Development iOS - Mobile operating system for Apple phones and tablets. Android - Mobile operating system developed by Google. IoT & Hybrid Apps Electron - Cross-platform native desktop apps using JavaScript/HTML/CSS. Cordova - JavaScript API for hybrid apps. React Native - JavaScript framework for writing natively rendering mobile apps for iOS and Android. Xamarin - Mobile app development IDE, testing, and distribution. Linux Containers eBPF - Virtual machine that allows you to write more efficient and powerful tracing and monitoring for Linux systems. Arch-based Projects - Linux distributions and projects based on Arch Linux. macOS - Operating system for Apple's Mac computers. Command-Line Screensavers Apps Open Source Apps watchOS - Operating system for the Apple Watch. JVM Salesforce Amazon Web Services Windows IPFS - P2P hypermedia protocol. Fuse - Mobile development tools. Heroku - Cloud platform as a service. Raspberry Pi - Credit card-sized computer aimed at teaching kids programming, but capable of a lot more. Qt - Cross-platform GUI app framework. WebExtensions - Cross-browser extension system. RubyMotion - Write cross-platform native apps for iOS, Android, macOS, tvOS, and watchOS in Ruby. Smart TV - Create apps for different TV platforms. GNOME - Simple and distraction-free desktop environment for Linux. KDE - A free software community dedicated to creating an open and user-friendly computing experience. .NET Core Roslyn - Open-source compilers and code analysis APIs for C# and VB.NET languages. Amazon Alexa - Virtual home assistant. DigitalOcean - Cloud computing platform designed for developers. Flutter - Google's mobile SDK for building native iOS and Android apps from a single codebase written in Dart. Home Assistant - Open source home automation that puts local control and privacy first. IBM Cloud - Cloud platform for developers and companies. Firebase - App development platform built on Google Cloud Platform. Robot Operating System 2.0 - Set of software libraries and tools that help you build robot apps. Adafruit IO - Visualize and store data from any device. Cloudflare - CDN, DNS, DDoS protection, and security for your site. Actions on Google - Developer platform for Google Assistant. ESP - Low-cost microcontrollers with WiFi and broad IoT applications. Deno - A secure runtime for JavaScript and TypeScript that uses V8 and is built in Rust. DOS - Operating system for x86-based personal computers that was popular during the 1980s and early 1990s. Nix - Package manager for Linux and other Unix systems that makes package management reliable and reproducible.","title":"Platforms"},{"location":"awesome/#programming-languages","text":"JavaScript Promises Standard Style - Style guide and linter. Must Watch Talks Tips Network Layer Micro npm Packages Mad Science npm Packages - Impossible sounding projects that exist. Maintenance Modules - For npm packages. npm - Package manager. AVA - Test runner. ESLint - Linter. Functional Programming Observables npm scripts - Task runner. 30 Seconds of Code - Code snippets you can understand in 30 seconds. Ponyfills - Like polyfills but without overriding native APIs. Swift - Apple's compiled programming language that is secure, modern, programmer-friendly, and fast. Education Playgrounds Python - General-purpose programming language designed for readability. Asyncio - Asynchronous I/O in Python 3. Scientific Audio - Scientific research in audio/music. CircuitPython - A version of Python for microcontrollers. Data Science - Data analysis and machine learning. Typing - Optional static typing for Python. MicroPython - A lean and efficient implementation of Python 3 for microcontrollers. Rust Haskell PureScript Go Scala Scala Native - Optimizing ahead-of-time compiler for Scala based on LLVM. Ruby Clojure ClojureScript Elixir Elm Erlang Julia - High-level dynamic programming language designed to address the needs of high-performance numerical analysis and computational science. Lua C C/C++ - General-purpose language with a bias toward system programming and embedded, resource-constrained software. R - Functional programming language and environment for statistical computing and graphics. Learning D Common Lisp - Powerful dynamic multiparadigm language that facilitates iterative and interactive development. Learning Perl Groovy Dart Java - Popular secure object-oriented language designed for flexibility to \"write once, run anywhere\". RxJava Kotlin OCaml ColdFusion Fortran PHP - Server-side scripting language. Composer - Package manager. Pascal AutoHotkey AutoIt Crystal Frege - Haskell for the JVM. CMake - Build, test, and package software. ActionScript 3 - Object-oriented language targeting Adobe AIR. Eta - Functional programming language for the JVM. Idris - General purpose pure functional programming language with dependent types influenced by Haskell and ML. Ada/SPARK - Modern programming language designed for large, long-lived apps where reliability and efficiency are essential. Q# - Domain-specific programming language used for expressing quantum algorithms. Imba - Programming language inspired by Ruby and Python and compiles to performant JavaScript. Vala - Programming language designed to take full advantage of the GLib and GNOME ecosystems, while preserving the speed of C code. Coq - Formal language and environment for programming and specification which facilitates interactive development of machine-checked proofs. V - Simple, fast, safe, compiled language for developing maintainable software.","title":"Programming Languages"},{"location":"awesome/#front-end-development","text":"ES6 Tools Web Performance Optimization Web Tools CSS - Style sheet language that specifies how HTML elements are displayed on screen. Critical-Path Tools Scalability Must-Watch Talks Protips Frameworks React - App framework. Relay - Framework for building data-driven React apps. React Hooks - A new feature that lets you use state and other React features without writing a class. Web Components Polymer - JavaScript library to develop Web Components. Angular - App framework. Backbone - App framework. HTML5 - Markup language used for websites & web apps. SVG - XML-based vector image format. Canvas KnockoutJS - JavaScript library. Dojo Toolkit - JavaScript toolkit. Inspiration Ember - App framework. Android UI iOS UI Meteor BEM Flexbox Web Typography Web Accessibility Material Design D3 - Library for producing dynamic, interactive data visualizations. Emails jQuery - Easy to use JavaScript library for DOM manipulation. Tips Web Audio Offline-First Static Website Services Cycle.js - Functional and reactive JavaScript framework. Text Editing Motion UI Design Vue.js - App framework. Marionette.js - App framework. Aurelia - App framework. Charting Ionic Framework 2 Chrome DevTools PostCSS - CSS tool. Draft.js - Rich text editor framework for React. Service Workers Progressive Web Apps choo - App framework. Redux - State container for JavaScript apps. webpack - Module bundler. Browserify - Module bundler. Sass - CSS preprocessor. Ant Design - Enterprise-class UI design language. Less - CSS preprocessor. WebGL - JavaScript API for rendering 3D graphics. Preact - App framework. Progressive Enhancement Next.js - Framework for server-rendered React apps. lit-html - HTML templating library for JavaScript. JAMstack - Modern web development architecture based on client-side JavaScript, reusable APIs, and prebuilt markup. WordPress-Gatsby - Web development technology stack with WordPress as a back end and Gatsby as a front end. Mobile Web Development - Creating a great mobile web experience. Storybook - Development environment for UI components. Blazor - .NET web framework using C#/Razor and HTML that runs in the browser with WebAssembly. PageSpeed Metrics - Metrics to help understand page speed and user experience. Tailwind CSS - Utility-first CSS framework for rapid UI development. Seed - Rust framework for creating web apps running in WebAssembly. Web Performance Budget - Techniques to ensure certain performance metrics for a website. Web Animation - Animations in the browser with JavaScript, CSS, SVG, etc. Yew - Rust framework inspired by Elm and React for creating multi-threaded frontend web apps with WebAssembly. Material-UI - Material Design React components for faster and easier web development. Building Blocks for Web Apps - Standalone features to be integrated into web apps. Svelte - App framework. Design systems - Collection of reusable components, guided by rules that ensure consistency and speed. Inertia.js - Make single-page apps without building an API.","title":"Front-End Development"},{"location":"awesome/#back-end-development","text":"Flask - Python framework. Docker Vagrant - Automation virtual machine environment. Pyramid - Python framework. Play1 Framework CakePHP - PHP framework. Symfony - PHP framework. Education Laravel - PHP framework. Education TALL Stack - Full-stack development solution featuring libraries built by the Laravel community. Rails - Web app framework for Ruby. Gems - Packages. Phalcon - PHP framework. Useful .htaccess Snippets nginx - Web server. Dropwizard - Java framework. Kubernetes - Open-source platform that automates Linux container operations. Lumen - PHP micro-framework. Serverless Framework - Serverless computing and serverless architectures. Apache Wicket - Java web app framework. Vert.x - Toolkit for building reactive apps on the JVM. Terraform - Tool for building, changing, and versioning infrastructure. Vapor - Server-side development in Swift. Dash - Python web app framework. FastAPI - Python web app framework. CDK - Open-source software development framework for defining cloud infrastructure in code. IAM - User accounts, authentication and authorization.","title":"Back-End Development"},{"location":"awesome/#computer-science","text":"University Courses Data Science Tutorials Machine Learning Tutorials ML with Ruby - Learning, implementing, and applying Machine Learning using Ruby. Core ML Models - Models for Apple's machine learning framework. H2O - Open source distributed machine learning platform written in Java with APIs in R, Python, and Scala. Software Engineering for Machine Learning - From experiment to production-level machine learning. AI in Finance - Solving problems in finance with machine learning. JAX - Automatic differentiation and XLA compilation brought together for high-performance machine learning research. XAI - Providing insight, explanations, and interpretability to machine learning methods. Speech and Natural Language Processing Spanish NLP with Ruby Question Answering - The science of asking and answering in natural language with a machine. Natural Language Generation - Generation of text used in data to text, conversational agents, and narrative generation applications. Linguistics Cryptography Papers - Theory basics for using cryptography by non-cryptographers. Computer Vision Deep Learning - Neural networks. TensorFlow - Library for machine intelligence. TensorFlow.js - WebGL-accelerated machine learning JavaScript library for training and deploying models. TensorFlow Lite - Framework that optimizes TensorFlow models for on-device machine learning. Papers - The most cited deep learning papers. Education Deep Vision Open Source Society University Functional Programming Empirical Software Engineering - Evidence-based research on software systems. Static Analysis & Code Quality Information Retrieval - Learn to develop your own search engine. Quantum Computing - Computing which utilizes quantum mechanics and qubits on quantum computers.","title":"Computer Science"},{"location":"awesome/#big-data","text":"Big Data Public Datasets Hadoop - Framework for distributed storage and processing of very large data sets. Data Engineering Streaming Apache Spark - Unified engine for large-scale data processing. Qlik - Business intelligence platform for data visualization, analytics, and reporting apps. Splunk - Platform for searching, monitoring, and analyzing structured and unstructured machine-generated big data in real-time.","title":"Big Data"},{"location":"awesome/#theory","text":"Papers We Love Talks Algorithms Education - Learning and practicing. Algorithm Visualizations Artificial Intelligence Search Engine Optimization Competitive Programming Math Recursion Schemes - Traversing nested data structures.","title":"Theory"},{"location":"awesome/#books","text":"Free Programming Books Go Books R Books Mind Expanding Books Book Authoring Elixir Books","title":"Books"},{"location":"awesome/#editors","text":"Sublime Text Vim Emacs Atom - Open-source and hackable text editor. Visual Studio Code - Cross-platform open-source text editor.","title":"Editors"},{"location":"awesome/#gaming","text":"Game Development Game Talks Godot - Game engine. Open Source Games Unity - Game engine. Chess L\u00d6VE - Game engine. PICO-8 - Fantasy console. Game Boy Development Construct 2 - Game engine. Gideros - Game engine. Minecraft - Sandbox video game. Game Datasets - Materials and datasets for Artificial Intelligence in games. Haxe Game Development - A high-level strongly typed programming language used to produce cross-platform native code. libGDX - Java game framework. PlayCanvas - Game engine. Game Remakes - Actively maintained open-source game remakes. Flame - Game engine for Flutter. Discord Communities - Chat with friends and communities. CHIP-8 - Virtual computer game machine from the 70s. Games of Coding - Learn a programming language by making games.","title":"Gaming"},{"location":"awesome/#development-environment","text":"Quick Look Plugins - For macOS. Dev Env Dotfiles Shell Fish - User-friendly shell. Command-Line Apps ZSH Plugins GitHub - Hosting service for Git repositories. Browser Extensions Cheat Sheet Pinned Gists - Dynamic pinned gists for your GitHub profile. Git Cheat Sheet & Git Flow Git Tips Git Add-ons - Enhance the git CLI. Git Hooks - Scripts for automating tasks during git workflows. SSH FOSS for Developers Hyper - Cross-platform terminal app built on web technologies. PowerShell - Cross-platform object-oriented shell. Alfred Workflows - Productivity app for macOS. Terminals Are Sexy GitHub Actions - Create tasks to automate your workflow and share them with others on GitHub.","title":"Development Environment"},{"location":"awesome/#entertainment","text":"Science Fiction - Scifi. Fantasy Podcasts Email Newsletters IT Quotes","title":"Entertainment"},{"location":"awesome/#databases","text":"Database MySQL SQLAlchemy InfluxDB Neo4j MongoDB - NoSQL database. RethinkDB TinkerPop - Graph computing framework. PostgreSQL - Object-relational database. CouchDB - Document-oriented NoSQL database. HBase - Distributed, scalable, big data store. NoSQL Guides - Help on using non-relational, distributed, open-source, and horizontally scalable databases. Contexture - Abstracts queries/filters and results/aggregations from different backing data stores like ElasticSearch and MongoDB. Database Tools - Everything that makes working with databases easier. Grakn - Logical database to organize large and complex networks of data as one body of knowledge. Cassandra - Open-source, distributed, wide column store, NoSQL database management system.","title":"Databases"},{"location":"awesome/#media","text":"Creative Commons Media Fonts Codeface - Text editor fonts. Stock Resources GIF - Image format known for animated images. Music Open Source Documents Audio Visualization Broadcasting Pixel Art - Pixel-level digital art. FFmpeg - Cross-platform solution to record, convert and stream audio and video. Icons - Downloadable SVG/PNG/font icon projects. Audiovisual - Lighting, audio and video in professional environments.","title":"Media"},{"location":"awesome/#learn","text":"CLI Workshoppers - Interactive tutorials. Learn to Program Speaking Tech Videos Dive into Machine Learning Computer History Programming for Kids Educational Games - Learn while playing. JavaScript Learning CSS Learning - Mainly about CSS \u2013 the language and the modules. Product Management - Learn how to be a better product manager. Roadmaps - Gives you a clear route to improve your knowledge and skills. YouTubers - Watch video tutorials from YouTubers that teach you about technology.","title":"Learn"},{"location":"awesome/#security","text":"Application Security Security CTF - Capture The Flag. Malware Analysis Android Security Hacking Honeypots - Deception trap, designed to entice an attacker into attempting to compromise the information systems in an organization. Incident Response Vehicle Security and Car Hacking Web Security - Security of web apps & services. Lockpicking - The art of unlocking a lock by manipulating its components without the key. Cybersecurity Blue Team - Groups of individuals who identify security flaws in information technology systems. Fuzzing - Automated software testing technique that involves feeding pseudo-randomly generated input data. Embedded and IoT Security GDPR - Regulation on data protection and privacy for all individuals within EU. DevSecOps - Integration of security practices into DevOps .","title":"Security"},{"location":"awesome/#content-management-systems","text":"Umbraco Refinery CMS - Ruby on Rails CMS. Wagtail - Django CMS focused on flexibility and user experience. Textpattern - Lightweight PHP-based CMS. Drupal - Extensible PHP-based CMS. Craft CMS - Content-first CMS. Sitecore - .NET digital marketing platform that combines CMS with tools for managing multiple websites. Silverstripe CMS - PHP MVC framework that serves as a classic or headless CMS.","title":"Content Management Systems"},{"location":"awesome/#hardware","text":"Robotics Internet of Things Electronics - For electronic engineers and hobbyists. Bluetooth Beacons Electric Guitar Specifications - Checklist for building your own electric guitar. Plotters - Computer-controlled drawing machines and other visual art robots. Robotic Tooling - Free and open tools for professional robotic development. LIDAR - Sensor for measuring distances by illuminating the target with laser light.","title":"Hardware"},{"location":"awesome/#business","text":"Open Companies Places to Post Your Startup OKR Methodology - Goal setting & communication best practices. Leading and Managing - Leading people and being a manager in a technology company/environment. Indie - Independent developer businesses. Tools of the Trade - Tools used by companies on Hacker News. Clean Tech - Fighting climate change with technology. Wardley Maps - Provides high situational awareness to help improve strategic planning and decision making. Social Enterprise - Building an organization primarily focused on social impact that is at least partially self-funded. Engineering Team Management - How to transition from software development to engineering management. Developer-First Products - Products that target developers as the user.","title":"Business"},{"location":"awesome/#work","text":"Slack - Team collaboration. Communities Remote Jobs Productivity Niche Job Boards Programming Interviews Code Review - Reviewing code. Creative Technology - Businesses & groups that specialize in combining computing, design, art, and user experience.","title":"Work"},{"location":"awesome/#networking","text":"Software-Defined Networking Network Analysis PCAPTools Real-Time Communications - Network protocols for near simultaneous exchange of media and data.","title":"Networking"},{"location":"awesome/#decentralized-systems","text":"Bitcoin - Bitcoin services and tools for software developers. Ripple - Open source distributed settlement network. Non-Financial Blockchain - Non-financial blockchain applications. Mastodon - Open source decentralized microblogging network. Ethereum - Distributed computing platform for smart contract development. Blockchain AI - Blockchain projects for artificial intelligence and machine learning. EOSIO - A decentralized operating system supporting industrial-scale apps. Corda - Open source blockchain platform designed for business. Waves - Open source blockchain platform and development toolset for Web 3.0 apps and decentralized solutions. Substrate - Framework for writing scalable, upgradeable blockchains in Rust.","title":"Decentralized Systems"},{"location":"awesome/#higher-education","text":"Computational Neuroscience - A multidisciplinary science which uses computational approaches to study the nervous system. Digital History - Computer-aided scientific investigation of history. Scientific Writing - Distraction-free scientific writing with Markdown, reStructuredText and Jupyter notebooks.","title":"Higher Education"},{"location":"awesome/#events","text":"Creative Tech Events - Events around the globe for creative coding, tech, design, music, arts and cool stuff. Events in Italy - Tech-related events in Italy. Events in the Netherlands - Tech-related events in the Netherlands.","title":"Events"},{"location":"awesome/#testing","text":"Testing - Software testing. Visual Regression Testing - Ensures changes did not break the functionality or style. Selenium - Open-source browser automation framework and ecosystem. Appium - Test automation tool for apps. TAP - Test Anything Protocol. JMeter - Load testing and performance measurement tool. k6 - Open-source, developer-centric performance monitoring and load testing solution. Playwright - Node.js library to automate Chromium, Firefox and WebKit with a single API. Quality Assurance Roadmap - How to start & build a career in software testing.","title":"Testing"},{"location":"awesome/#miscellaneous","text":"JSON - Text based data interchange format. GeoJSON Datasets CSV - A text file format that stores tabular data and uses a comma to separate values. Discounts for Student Developers Radio Awesome - Recursion illustrated. Analytics REST Continuous Integration and Continuous Delivery Services Engineering Free for Developers Answers - Stack Overflow, Quora, etc. Sketch - Design app for macOS. Boilerplate Projects Readme Design and Development Guides Software Engineering Blogs Self Hosted FOSS Production Apps Gulp - Task runner. AMA - Ask Me Anything. Answers Open Source Photography OpenGL - Cross-platform API for rendering 2D and 3D graphics. GraphQL Urban & Regional Planning - Concerning the built environment and communities. Transit Research Tools Data Visualization Social Media Share Links Microservices Unicode - Unicode standards, quirks, packages and resources. Code Points Beginner-Friendly Projects Katas Tools for Activism Citizen Science - For community-based and non-institutional scientists. MQTT - \"Internet of Things\" connectivity protocol. Hacking Spots For Girls Vorpal - Node.js CLI framework. Vulkan - Low-overhead, cross-platform 3D graphics and compute API. LaTeX - Typesetting language. Economics - An economist's starter kit. Funny Markov Chains Bioinformatics Cheminformatics - Informatics techniques applied to problems in chemistry. Colorful - Choose your next color scheme. Steam - Digital distribution platform. Bots - Building bots. Site Reliability Engineering Empathy in Engineering - Building and promoting more compassionate engineering cultures. DTrace - Dynamic tracing framework. Userscripts - Enhance your browsing experience. Pok\u00e9mon - Pok\u00e9mon and Pok\u00e9mon GO. ChatOps - Managing technical and business operations through a chat. Falsehood - Falsehoods programmers believe in. Domain-Driven Design - Software development approach for complex needs by connecting the implementation to an evolving model. Quantified Self - Self-tracking through technology. SaltStack - Python-based config management system. Web Design - For digital designers. Creative Coding - Programming something expressive instead of something functional. No-Login Web Apps - Web apps that work without login. Free Software - Free as in freedom. Framer - Prototyping interactive UI designs. Markdown - Markup language. Dev Fun - Funny developer projects. Healthcare - Open source healthcare software for facilities, providers, developers, policy experts, and researchers. Magento 2 - Open Source eCommerce built with PHP. TikZ - Graph drawing packages for TeX/LaTeX/ConTeXt. Neuroscience - Study of the nervous system and brain. Ad-Free - Ad-free alternatives. Esolangs - Programming languages designed for experimentation or as jokes rather than actual use. Prometheus - Open-source monitoring system. Homematic - Smart home devices. Ledger - Double-entry accounting on the command-line. Web Monetization - A free open web standard service that allows you to send money directly in your browser. Uncopyright - Public domain works. Crypto Currency Tools & Algorithms - Digital currency where encryption is used to regulate the generation of units and verify transfers. Diversity - Creating a more inclusive and diverse tech community. Open Source Supporters - Companies that offer their tools and services for free to open source projects. Design Principles - Create better and more consistent designs and experiences. Theravada - Teachings from the Theravada Buddhist tradition. inspectIT - Open source Java app performance management tool. Open Source Maintainers - The experience of being an open source maintainer. Calculators - Calculators for every platform. Captcha - A type of challenge\u2013response test used in computing to determine whether or not the user is human. Jupyter - Create and share documents that contain code, equations, visualizations and narrative text. FIRST Robotics Competition - International high school robotics championship. Humane Technology - Open source projects that help improve society. Speakers - Conference and meetup speakers in the programming and design community. Board Games - Table-top gaming fun for all. Software Patreons - Fund individual programmers or the development of open source projects. Parasite - Parasites and host-pathogen interactions. Food - Food-related projects on GitHub. Mental Health - Mental health awareness and self-care in the software industry. Bitcoin Payment Processors - Start accepting Bitcoin. Scientific Computing - Solving complex scientific problems using computers. Amazon Sellers Agriculture - Open source technology for farming and gardening. Product Design - Design a product from the initial concept to production. Prisma - Turn your database into a GraphQL API. Software Architecture - The discipline of designing and building software. Connectivity Data and Reports - Better understand who has access to telecommunication and internet infrastructure and on what terms. Stacks - Tech stacks for building different apps and features. Cytodata - Image-based profiling of biological phenotypes for computational biologists. IRC - Open source messaging protocol. Advertising - Advertising and programmatic media for websites. Earth - Find ways to resolve the climate crisis. Naming - Naming things in computer science done right. Biomedical Information Extraction - How to extract information from unstructured biomedical data and text. Web Archiving - An effort to preserve the Web for future generations. WP-CLI - Command-line interface for WordPress. Credit Modeling - Methods for classifying credit applicants into risk classes. Ansible - A Python-based, open source IT configuration management and automation platform. Biological Visualizations - Interactive visualization of biological data on the web. QR Code - A type of matrix barcode that can be used to store and share a small amount of information. Veganism - Making the plant-based lifestyle easy and accessible. Translations - The transfer of the meaning of a text from one language to another.","title":"Miscellaneous"},{"location":"awesome/#related","text":"All Awesome Lists - All the Awesome lists on GitHub. Awesome Indexed - Search the Awesome dataset. Awesome Search - Quick search for Awesome lists. StumbleUponAwesome - Discover random pages from the Awesome dataset using a browser extension. Awesome CLI - A simple command-line tool to dive into Awesome lists. Awesome Viewer - A visualizer for all of the above Awesome lists.","title":"Related"},{"location":"bitcoinbook/","text":"Code Examples: Mastering Bitcoin Mastering Bitcoin is a book for developers, although the first two chapters cover bitcoin at a level that is also approachable to non-programmers. Anyone with a basic understanding of technology can read the first two chapters to get a great understanding of bitcoin. This repository contains the complete first edition, second print , published in December 2014, and the complete second edition, third print , published in March 2018, as published by O'Reilly Media in paperback and ebook formats. Issues, Errors, Comments, Contributions If you know how to make a pull request to contribute a fix, please write the correction and use a pull request to submit it for consideration against the develop branch . If you are making several changes, please use a separate commit for each to make it easier to cherry-pick or resolve conflicts. Otherwise, please submit an issue, explaining the error or comment. If you would like to contribute extensive changes or new material, please coordinate with the author first; contact information can be found on his website: https://antonopoulos.com/ Reading this book To read this book, see book.html . Click on each of the chapters to read in your browser. Other parties may choose to release PDFs of the book online. Chapters Chapter 1: ' Introduction ' Chapter 2: ' How Bitcoin Works ' Chapter 3: ' Bitcoin Core: The Reference Implementation ' Chapter 4: ' Keys, Addresses ' Chapter 5: ' Wallets ' Chapter 6: ' Transactions ' Chapter 7: ' Advanced Transactions and Scripting ' Chapter 8: ' The Bitcoin Network ' Chapter 9: ' The Blockchain ' Chapter 10: ' Mining and Consensus ' Chapter 11: ' Bitcoin Security ' Chapter 12: ' Blockchain Applications ' Published \"Mastering Bitcoin (Second Edition, Second Print): Programming the Open Blockchain\" is now available in paperback and ebook formats by many booksellers worldwide: Amazon Mastering Bitcoin (First Edition Second Print) is also published in Japanese, Korean, and Chinese (Simplified) by publishers in the respective countries. Mastering Bitcoin (Open Edition), based on the First Edition, has been translated by volunteers into more than a dozen languages. Translations are available for free under CC-BY-SA license at: https://bitcoinbook.info Source The book's source code, found in this repository, is kept synchronized with the print and ebook editions. Mastering Bitcoin - First Edition The tags Edition1Print1 , Edition1Print2 correspond to the two existing prints of Mastering Bitcoin (First Edition) as published by O'Reilly Media. Mastering Bitcoin - First Edition by Andreas M. Antonopoulos LLC is licensed under a Creative Commons Attribution-ShareAlike 4.0 International License . This \"Free Culture\" compliant license was approved by my publisher O'Reilly Media (http://oreilly.com), who understands the value of open source. O'Reilly Media is not just the world's best publisher of technical books, but is also a strong supporter of this open culture and the sharing of knowledge. Thank you O'Reilly Media! Mastering Bitcoin - Second Edition The tags, second_edition_print_1 and second_edition_print2 , correspond to the first (June 8th, 2017) and second (July 20th, 2017) print of Mastering Bitcoin (Second Edition), as published by O'Reilly Media. Mastering Bitcoin - Second Edition by Andreas M. Antonopoulos LLC is licensed under a Creative Commons Attribution-ShareAlike 4.0 International License . Translations If you are interested in translating this book, please join our team of volunteers at: https://www.transifex.com/aantonop/mastering-bitcoin Free copies of \"Mastering Bitcoin Open Edition,\" translated in many languages, can be downloaded from: https://bitcoinbook.info","title":"Index"},{"location":"bitcoinbook/#mastering-bitcoin","text":"Mastering Bitcoin is a book for developers, although the first two chapters cover bitcoin at a level that is also approachable to non-programmers. Anyone with a basic understanding of technology can read the first two chapters to get a great understanding of bitcoin. This repository contains the complete first edition, second print , published in December 2014, and the complete second edition, third print , published in March 2018, as published by O'Reilly Media in paperback and ebook formats.","title":"Mastering Bitcoin"},{"location":"bitcoinbook/#issues-errors-comments-contributions","text":"If you know how to make a pull request to contribute a fix, please write the correction and use a pull request to submit it for consideration against the develop branch . If you are making several changes, please use a separate commit for each to make it easier to cherry-pick or resolve conflicts. Otherwise, please submit an issue, explaining the error or comment. If you would like to contribute extensive changes or new material, please coordinate with the author first; contact information can be found on his website: https://antonopoulos.com/","title":"Issues, Errors, Comments, Contributions"},{"location":"bitcoinbook/#reading-this-book","text":"To read this book, see book.html . Click on each of the chapters to read in your browser. Other parties may choose to release PDFs of the book online.","title":"Reading this book"},{"location":"bitcoinbook/#chapters","text":"Chapter 1: ' Introduction ' Chapter 2: ' How Bitcoin Works ' Chapter 3: ' Bitcoin Core: The Reference Implementation ' Chapter 4: ' Keys, Addresses ' Chapter 5: ' Wallets ' Chapter 6: ' Transactions ' Chapter 7: ' Advanced Transactions and Scripting ' Chapter 8: ' The Bitcoin Network ' Chapter 9: ' The Blockchain ' Chapter 10: ' Mining and Consensus ' Chapter 11: ' Bitcoin Security ' Chapter 12: ' Blockchain Applications '","title":"Chapters"},{"location":"bitcoinbook/#published","text":"\"Mastering Bitcoin (Second Edition, Second Print): Programming the Open Blockchain\" is now available in paperback and ebook formats by many booksellers worldwide: Amazon Mastering Bitcoin (First Edition Second Print) is also published in Japanese, Korean, and Chinese (Simplified) by publishers in the respective countries. Mastering Bitcoin (Open Edition), based on the First Edition, has been translated by volunteers into more than a dozen languages. Translations are available for free under CC-BY-SA license at: https://bitcoinbook.info","title":"Published"},{"location":"bitcoinbook/#source","text":"The book's source code, found in this repository, is kept synchronized with the print and ebook editions.","title":"Source"},{"location":"bitcoinbook/#mastering-bitcoin-first-edition","text":"The tags Edition1Print1 , Edition1Print2 correspond to the two existing prints of Mastering Bitcoin (First Edition) as published by O'Reilly Media. Mastering Bitcoin - First Edition by Andreas M. Antonopoulos LLC is licensed under a Creative Commons Attribution-ShareAlike 4.0 International License . This \"Free Culture\" compliant license was approved by my publisher O'Reilly Media (http://oreilly.com), who understands the value of open source. O'Reilly Media is not just the world's best publisher of technical books, but is also a strong supporter of this open culture and the sharing of knowledge. Thank you O'Reilly Media!","title":"Mastering Bitcoin - First Edition"},{"location":"bitcoinbook/#mastering-bitcoin-second-edition","text":"The tags, second_edition_print_1 and second_edition_print2 , correspond to the first (June 8th, 2017) and second (July 20th, 2017) print of Mastering Bitcoin (Second Edition), as published by O'Reilly Media. Mastering Bitcoin - Second Edition by Andreas M. Antonopoulos LLC is licensed under a Creative Commons Attribution-ShareAlike 4.0 International License .","title":"Mastering Bitcoin - Second Edition"},{"location":"bitcoinbook/#translations","text":"If you are interested in translating this book, please join our team of volunteers at: https://www.transifex.com/aantonop/mastering-bitcoin Free copies of \"Mastering Bitcoin Open Edition,\" translated in many languages, can be downloaded from: https://bitcoinbook.info","title":"Translations"},{"location":"git/","text":"Git-it (Desktop App) Git-it is a desktop (Mac, Windows and Linux) app that teaches you how to use Git and GitHub on the command line . \ud83d\udea9The app includes translations in these languages: Spanish (ES), Spanish (CO), French, Portugese (BR), Ukrainian, Traditional Chinese, Japanese, and Korean. \ud83d\udea9 Previously it ran in terminal (the command line application) with a guide online but now the guide is the app and it runs on your desktop on its own :sparkles: This will be the only maintained version going forward :arrow_right:. Hello future Forkers, Branchers and Pull Requesters! This application contains challenges for learning Git and GitHub\u2014by using real Git and GitHub, not emulators. You'll be learning the awesome (and not so scary) command line and GitHub which means when you finish all of the challenges you'll have real repositories on your GitHub account and green squares on your contribution chart . What to Install You will need this app, Git-it as well as a text editor. You'll also of course need Git and the first challenge in Git-it helps you get that set up. But if you want to get a head start, go for it! You'll continue to use Git and your text editor throughout your bright social coding future. As a part of the challenges you'll also create a (free) account on GitHub. If you've already got one, high-five! Git We recommend installing GitHub Desktop (free) because it installs Git in the most consistent way across supported operating systems (Windows and Mac). We won't use the app itself in the challenges (but it is really useful once you get going in Git!), just the Git that it install for you. Note\u2014If you're using Windows, you should use the Git Shell app as your terminal\u2014it is installed with GitHub Desktop. In Mac and Linux you can use the app Terminal , which is already on your computer. Text Editor I'm quite partial (I'm on the team!) but Atom is a great text editor (also free) and it is built on Electron.js , just like Git-it. Visit the website and download the version for your operating system. Sublime , Microsoft VS Code and Adobe Brackets are other options. Git-it You can view the releases section of this repository to find the download for your operating system. Click to download your version. Once it has downloaded to your default Downloads directory, unzip the folder and run the Git-it executable. The executables for Mac, Windows and Linux: Mac Right (control) click the Git-it icon, select Open and then Open again. You can drag the icon into your Applications directory if you want, but it's not required. If needed, more detailed installation instructions can be found in this issue. Windows Double-click the executable. Linux Double-click the executable. If the app isn't running, see this issue . Get Started! Open Git-it and click the button to begin the first challenge. Have your terminal and text editor open, too. Follow along with the instructions in each challenge and use the terminal or editor as instructed. When you've completed the steps in a challenge click 'Verify'. Depending on the challenge you may need to also select the folder you did your work in for Git-it to verify. Questions? Open an issue on this repository. Want to contribute or build locally? See the contributing documentation Tips For Getting Started Code snippets often times look like $ some code-stuff --here . The dollar sign identifies the line as one a user would enter into the command line, but you don't actually include it when you type it into terminal. In this case, you'd actually just type some code-stuff --here . Variables are indicated by <VARIABLENAME> in code snippets. When you actually use the line of code, replace <VARIABLENAME> , with your variable. For instance to make a new folder in terminal the format is, mkdir <FOLDERNAME> , so if you wanted to make a folder named 'octocat', you'd type: mkdir octocat . Command line, terminal and bash all basically mean the same thing: the MS-DOS, Doogie Howser looking screen full of words and numbers. It's awesomely powerful and allows you to control your computer with text commands. You can do a lot of things from your terminal like delete, rename, copy or create files and folders; run scripts and send things back and forth between servers (like the ones storing things on GitHub.com) and your computer (also a server!).","title":"Git"},{"location":"git/#git-it-desktop-app","text":"Git-it is a desktop (Mac, Windows and Linux) app that teaches you how to use Git and GitHub on the command line . \ud83d\udea9The app includes translations in these languages: Spanish (ES), Spanish (CO), French, Portugese (BR), Ukrainian, Traditional Chinese, Japanese, and Korean. \ud83d\udea9 Previously it ran in terminal (the command line application) with a guide online but now the guide is the app and it runs on your desktop on its own :sparkles: This will be the only maintained version going forward :arrow_right:.","title":"Git-it (Desktop App)"},{"location":"git/#hello-future-forkers-branchers-and-pull-requesters","text":"This application contains challenges for learning Git and GitHub\u2014by using real Git and GitHub, not emulators. You'll be learning the awesome (and not so scary) command line and GitHub which means when you finish all of the challenges you'll have real repositories on your GitHub account and green squares on your contribution chart .","title":"Hello future Forkers, Branchers and Pull Requesters!"},{"location":"git/#what-to-install","text":"You will need this app, Git-it as well as a text editor. You'll also of course need Git and the first challenge in Git-it helps you get that set up. But if you want to get a head start, go for it! You'll continue to use Git and your text editor throughout your bright social coding future. As a part of the challenges you'll also create a (free) account on GitHub. If you've already got one, high-five!","title":"What to Install"},{"location":"git/#git","text":"We recommend installing GitHub Desktop (free) because it installs Git in the most consistent way across supported operating systems (Windows and Mac). We won't use the app itself in the challenges (but it is really useful once you get going in Git!), just the Git that it install for you. Note\u2014If you're using Windows, you should use the Git Shell app as your terminal\u2014it is installed with GitHub Desktop. In Mac and Linux you can use the app Terminal , which is already on your computer.","title":"Git"},{"location":"git/#text-editor","text":"I'm quite partial (I'm on the team!) but Atom is a great text editor (also free) and it is built on Electron.js , just like Git-it. Visit the website and download the version for your operating system. Sublime , Microsoft VS Code and Adobe Brackets are other options.","title":"Text Editor"},{"location":"git/#git-it","text":"You can view the releases section of this repository to find the download for your operating system. Click to download your version. Once it has downloaded to your default Downloads directory, unzip the folder and run the Git-it executable. The executables for Mac, Windows and Linux: Mac Right (control) click the Git-it icon, select Open and then Open again. You can drag the icon into your Applications directory if you want, but it's not required. If needed, more detailed installation instructions can be found in this issue. Windows Double-click the executable. Linux Double-click the executable. If the app isn't running, see this issue .","title":"Git-it"},{"location":"git/#get-started","text":"Open Git-it and click the button to begin the first challenge. Have your terminal and text editor open, too. Follow along with the instructions in each challenge and use the terminal or editor as instructed. When you've completed the steps in a challenge click 'Verify'. Depending on the challenge you may need to also select the folder you did your work in for Git-it to verify. Questions? Open an issue on this repository. Want to contribute or build locally? See the contributing documentation","title":"Get Started!"},{"location":"git/#tips-for-getting-started","text":"Code snippets often times look like $ some code-stuff --here . The dollar sign identifies the line as one a user would enter into the command line, but you don't actually include it when you type it into terminal. In this case, you'd actually just type some code-stuff --here . Variables are indicated by <VARIABLENAME> in code snippets. When you actually use the line of code, replace <VARIABLENAME> , with your variable. For instance to make a new folder in terminal the format is, mkdir <FOLDERNAME> , so if you wanted to make a folder named 'octocat', you'd type: mkdir octocat . Command line, terminal and bash all basically mean the same thing: the MS-DOS, Doogie Howser looking screen full of words and numbers. It's awesomely powerful and allows you to control your computer with text commands. You can do a lot of things from your terminal like delete, rename, copy or create files and folders; run scripts and send things back and forth between servers (like the ones storing things on GitHub.com) and your computer (also a server!).","title":"Tips For Getting Started"},{"location":"git/CONTRIBUTING/","text":"Contributing to Git-it Contributions are more than welcome! Checkout the help wanted labels for ideas! \ud83d\udce3 Provide a description in your Issue/Pull Request. In your pull request please explain what the problem was (with gifs or screenshots would be fantastic!) and how your changes fix it. \ud83d\udeab \ud83d\ude40 :fire: No description provided. :fire: \ud83d\ude40 \ud83d\udeab Code style is JS Standard and no ES6 syntax :tada: but open to relevant new methods. Changes to the content of the pages must be made in the challenge-content directory (for appropriate language). For more information on how the app works, see the documentation . Building Locally If you want to build this locally you'll need Node.js on your computer. Then clone this repository, install dependencies and launch: $ git clone https://github.com/jlord/git-it-electron $ cd git-it-electron $ npm install $ npm start Packaging for OS X, Windows or Linux Here's how to create a Git-it executable for Windows, OS X and Linux. You'll need Node.js on your computer and Wine if you're packaging for Windows from a non Windows machine (more on this below). Use npm 3 To package a release you'll need atleast npm version 3 on your computer. To check your version of npm: $ npm -v This is because the newer version of npm flattens the dependency tree. This is essential for creating a version of Git-it that runs on Windows, which has limits to file path lengths. Clone and Install Dependencies Clone this repository and install the dependencies: $ git clone https://github.com/jlord/git-it-electron $ cd git-it-electron $ npm install Package If you have made any changes to the code or you just cloned this project from github, you'll need to rebuild all of the challenges and/or pages. If you haven't, skip to the next step! $ npm run build-all OS X, Linux, Windows Each generated folder is put in the /out directory. $ npm run pack-mac This will output the contents of the application to a folder at ../out/Git-it-darwin-x64 . $ npm run pack-lin This will output the contents of the application to a folder at ../out/Git-it-linux-x64 . $ npm run pack-win A note from electron-packager , the module we use to package these apps: Building Windows apps from non-Windows platforms Building an Electron app for the Windows platform with a custom icon requires editing the Electron.exe file. Currently, electron-packager uses node-rcedit to accomplish this. A Windows executable is bundled in that node package and needs to be run in order for this functionality to work, so on non-Windows platforms, Wine needs to be installed. On OS X, it is installable via Homebrew . This will output the contents of the application to a folder at ../out/Git-it-win32-ia32 . Translations to other languages If you want to add a new language to this project, here are some step you need to do. Add locale code First, edit locale.js and add locale code in it. You can use any editor you like. $ vim lib/locale.js In locale.js , there must have a variable called 'available', and add your language in it. For example, we have already had three languages, and wanted to add German(Germany): var available = { 'en-US': 'English', 'ja-JP': '\u65e5\u672c\u8a9e', 'zh-TW': '\u4e2d\u6587(\u81fa\u7063)', 'de-DE': 'Deutsch' } Before colon is your language code, it must look like '\\<lang>-\\<location>'. '\\<lang>' is your language, in this case, 'de' is the language code of 'German'. '\\<location>' is your location code, in this case, 'DE' is the location code of 'Germany'. If you don't know what your language/location code, you can find it here . The language code MUST be all lowercase, and location code MUST be all uppercase. If there are lots of locations using same language, you could add your language in variable 'aliases'. App will auto-redirect to target language. For example, There are five locations using 'German' as their language (de-AT, de-CH, de-DE, de-LI and de-LU), you can add 'de' into 'aliases' and let app using 'de-DE' for default 'de' language. var aliases = { 'en': 'en-US', 'ja': 'ja-JP', 'zh': 'zh-TW', 'de': 'de-DE' } Locale in aliases MUST point to a locale existed in available. Translate files All files that translator should edit is in resources/contents . We suggest translator using 'en-US' as original language to translate. cd resources/contents cp en-US '<your-lang>-<your-location>' Folder name in resources/contents MUST be the same as the locale you added in locale.js. Build Don't forget to build to generate built file. npm run build-all","title":"Contributing to Git-it"},{"location":"git/CONTRIBUTING/#contributing-to-git-it","text":"Contributions are more than welcome! Checkout the help wanted labels for ideas! \ud83d\udce3 Provide a description in your Issue/Pull Request. In your pull request please explain what the problem was (with gifs or screenshots would be fantastic!) and how your changes fix it. \ud83d\udeab \ud83d\ude40 :fire: No description provided. :fire: \ud83d\ude40 \ud83d\udeab Code style is JS Standard and no ES6 syntax :tada: but open to relevant new methods. Changes to the content of the pages must be made in the challenge-content directory (for appropriate language). For more information on how the app works, see the documentation .","title":"Contributing to Git-it"},{"location":"git/CONTRIBUTING/#building-locally","text":"If you want to build this locally you'll need Node.js on your computer. Then clone this repository, install dependencies and launch: $ git clone https://github.com/jlord/git-it-electron $ cd git-it-electron $ npm install $ npm start","title":"Building Locally"},{"location":"git/CONTRIBUTING/#packaging-for-os-x-windows-or-linux","text":"Here's how to create a Git-it executable for Windows, OS X and Linux. You'll need Node.js on your computer and Wine if you're packaging for Windows from a non Windows machine (more on this below).","title":"Packaging for OS X, Windows or Linux"},{"location":"git/CONTRIBUTING/#use-npm-3","text":"To package a release you'll need atleast npm version 3 on your computer. To check your version of npm: $ npm -v This is because the newer version of npm flattens the dependency tree. This is essential for creating a version of Git-it that runs on Windows, which has limits to file path lengths.","title":"Use npm 3"},{"location":"git/CONTRIBUTING/#clone-and-install-dependencies","text":"Clone this repository and install the dependencies: $ git clone https://github.com/jlord/git-it-electron $ cd git-it-electron $ npm install","title":"Clone and Install Dependencies"},{"location":"git/CONTRIBUTING/#package","text":"If you have made any changes to the code or you just cloned this project from github, you'll need to rebuild all of the challenges and/or pages. If you haven't, skip to the next step! $ npm run build-all","title":"Package"},{"location":"git/CONTRIBUTING/#os-x-linux-windows","text":"Each generated folder is put in the /out directory. $ npm run pack-mac This will output the contents of the application to a folder at ../out/Git-it-darwin-x64 . $ npm run pack-lin This will output the contents of the application to a folder at ../out/Git-it-linux-x64 . $ npm run pack-win A note from electron-packager , the module we use to package these apps: Building Windows apps from non-Windows platforms Building an Electron app for the Windows platform with a custom icon requires editing the Electron.exe file. Currently, electron-packager uses node-rcedit to accomplish this. A Windows executable is bundled in that node package and needs to be run in order for this functionality to work, so on non-Windows platforms, Wine needs to be installed. On OS X, it is installable via Homebrew . This will output the contents of the application to a folder at ../out/Git-it-win32-ia32 .","title":"OS X, Linux, Windows"},{"location":"git/CONTRIBUTING/#translations-to-other-languages","text":"If you want to add a new language to this project, here are some step you need to do.","title":"Translations to other languages"},{"location":"git/CONTRIBUTING/#add-locale-code","text":"First, edit locale.js and add locale code in it. You can use any editor you like. $ vim lib/locale.js In locale.js , there must have a variable called 'available', and add your language in it. For example, we have already had three languages, and wanted to add German(Germany): var available = { 'en-US': 'English', 'ja-JP': '\u65e5\u672c\u8a9e', 'zh-TW': '\u4e2d\u6587(\u81fa\u7063)', 'de-DE': 'Deutsch' } Before colon is your language code, it must look like '\\<lang>-\\<location>'. '\\<lang>' is your language, in this case, 'de' is the language code of 'German'. '\\<location>' is your location code, in this case, 'DE' is the location code of 'Germany'. If you don't know what your language/location code, you can find it here . The language code MUST be all lowercase, and location code MUST be all uppercase. If there are lots of locations using same language, you could add your language in variable 'aliases'. App will auto-redirect to target language. For example, There are five locations using 'German' as their language (de-AT, de-CH, de-DE, de-LI and de-LU), you can add 'de' into 'aliases' and let app using 'de-DE' for default 'de' language. var aliases = { 'en': 'en-US', 'ja': 'ja-JP', 'zh': 'zh-TW', 'de': 'de-DE' } Locale in aliases MUST point to a locale existed in available.","title":"Add locale code"},{"location":"git/CONTRIBUTING/#translate-files","text":"All files that translator should edit is in resources/contents . We suggest translator using 'en-US' as original language to translate. cd resources/contents cp en-US '<your-lang>-<your-location>' Folder name in resources/contents MUST be the same as the locale you added in locale.js.","title":"Translate files"},{"location":"git/CONTRIBUTING/#build","text":"Don't forget to build to generate built file. npm run build-all","title":"Build"},{"location":"git/SECURITY/","text":"Security Policy Reporting a Vulnerability Please email jlord@github.com with reports. I am not a very active maintainer these days but I will try to do what I can <3","title":"Security Policy"},{"location":"git/SECURITY/#security-policy","text":"","title":"Security Policy"},{"location":"git/SECURITY/#reporting-a-vulnerability","text":"Please email jlord@github.com with reports. I am not a very active maintainer these days but I will try to do what I can <3","title":"Reporting a Vulnerability"},{"location":"git/docs/","text":"Documentation How does this thing work? Below are general descriptions of directories and content. Inside of each file, comments describe what that file's job is. Directories & Files assets Project assets like css, fonts and images. challenge-content & challenge-content- * Main content of the challenges to be used in generating the final full HTML for each challenge page (English and other languages). challenges & challenges- * Full HTML for each challenge (English and other languages) layouts Handlebars templates for the challenges and basic pages. lib All the JavaScript files for the app. verify The JavaScript files for each challenge that verify if the challenge is completed or not. menus The app's menu layout. pages Full HTML of non-challenge pages. pages-content Main content of non-challenge pages to be used with a template to generate full HTML. partials HTML bits that are shared between either challenges or non-challenges pages, to be used in order to generate full HTML for pages. tests App's test files. empty-data.json The starter file that is duplicated and stored on the user's computer with their challenge completed statuses as they go through the lessons. index.html & index-*.html The first page to load for the app (English and Traditional Chinese). main.js App's main process file which spins up the renderer view for the pages. package.json App's details and dependencies. Relationships Files and directories grouped by their relationship in the app. Electron apps have a main process, which controls the lifecycle of the app, and the browser process, which is each HTML page that is spun up by the main process. Main Process: Application Code main.js controls the life of the app (start, quit) and the browser windows that make up the main app experience (what HTML files to show and what size). It is the app's main process . The lib and lib/verify directories contain all the code that the browser views, the app's browser process , use. Some of these communicate with the main process by sending and receiving messages. Browser Process: Pages & Assets The pages that the app displays are HTML, just like a website. The assets directory contains the CSS, images and fonts used in each view. Each page starts with it's main content ( pages , challenge-content-zhtw , challenge-content ) and drops that into a template ( layouts ) along with the shared HTML elements ( partials ) like headers and footers. Browser Process: Scripts The lib directory contains scripts that each page uses. Inside of lib/verify are scripts for each challenge that tell it how to verify that challenge. The scripts helpers.js and user-data.js are shared between scripts, instructions below on how these are used . Templating There are scripts, templates and partials involved with generating the HTML pages. The main content for the challenges and non-challenge pages are within challenge-content , challenge-content-zhtw and pages-content . The directory layouts contains the templates, partials the partials that are combined with the main content files according to the template. The scripts lib/build-page.js and lib/build-challenges.js put it all in motion to generate the final HTML output which is placed in pages , challenges and challenges-zhtw . You can run these scripts from the command line, instructions are below .","title":"Documentation"},{"location":"git/docs/#documentation","text":"How does this thing work? Below are general descriptions of directories and content. Inside of each file, comments describe what that file's job is.","title":"Documentation"},{"location":"git/docs/#directories-files","text":"assets Project assets like css, fonts and images. challenge-content & challenge-content- * Main content of the challenges to be used in generating the final full HTML for each challenge page (English and other languages). challenges & challenges- * Full HTML for each challenge (English and other languages) layouts Handlebars templates for the challenges and basic pages. lib All the JavaScript files for the app. verify The JavaScript files for each challenge that verify if the challenge is completed or not. menus The app's menu layout. pages Full HTML of non-challenge pages. pages-content Main content of non-challenge pages to be used with a template to generate full HTML. partials HTML bits that are shared between either challenges or non-challenges pages, to be used in order to generate full HTML for pages. tests App's test files. empty-data.json The starter file that is duplicated and stored on the user's computer with their challenge completed statuses as they go through the lessons. index.html & index-*.html The first page to load for the app (English and Traditional Chinese). main.js App's main process file which spins up the renderer view for the pages. package.json App's details and dependencies.","title":"Directories &amp; Files"},{"location":"git/docs/#relationships","text":"Files and directories grouped by their relationship in the app. Electron apps have a main process, which controls the lifecycle of the app, and the browser process, which is each HTML page that is spun up by the main process. Main Process: Application Code main.js controls the life of the app (start, quit) and the browser windows that make up the main app experience (what HTML files to show and what size). It is the app's main process . The lib and lib/verify directories contain all the code that the browser views, the app's browser process , use. Some of these communicate with the main process by sending and receiving messages. Browser Process: Pages & Assets The pages that the app displays are HTML, just like a website. The assets directory contains the CSS, images and fonts used in each view. Each page starts with it's main content ( pages , challenge-content-zhtw , challenge-content ) and drops that into a template ( layouts ) along with the shared HTML elements ( partials ) like headers and footers. Browser Process: Scripts The lib directory contains scripts that each page uses. Inside of lib/verify are scripts for each challenge that tell it how to verify that challenge. The scripts helpers.js and user-data.js are shared between scripts, instructions below on how these are used . Templating There are scripts, templates and partials involved with generating the HTML pages. The main content for the challenges and non-challenge pages are within challenge-content , challenge-content-zhtw and pages-content . The directory layouts contains the templates, partials the partials that are combined with the main content files according to the template. The scripts lib/build-page.js and lib/build-challenges.js put it all in motion to generate the final HTML output which is placed in pages , challenges and challenges-zhtw . You can run these scripts from the command line, instructions are below .","title":"Relationships"},{"location":"ide/CONTRIBUTING/","text":"Contributing Ace is a community project and wouldn't be what it is without contributions! We actively encourage and support contributions. The Ace source code is released under the BSD License. This license is very simple, and is friendly to all kinds of projects, whether open source or not. Take charge of your editor and add your favorite language highlighting and keybindings! Feel free to fork and improve/enhance Ace any way you want. If you feel that the editor or the Ace community will benefit from your changes, please open a pull request. To protect the interests of the Ace contributors and users we require contributors to sign a Contributors License Agreement (CLA) before we pull the changes into the main repository. Our CLA is the simplest of agreements, requiring that the contributions you make to an ajax.org project are only those you're allowed to make. This helps us significantly reduce future legal risk for everyone involved. It is easy, helps everyone, takes ten minutes, and only needs to be completed once. There are two versions of the agreement: The Individual CLA : use this version if you're working on an ajax.org in your spare time, or can clearly claim ownership of copyright in what you'll be submitting. The Corporate CLA : have your corporate lawyer review and submit this if your company is going to be contributing to ajax.org projects If you want to contribute to an ajax.org project please print the CLA and fill it out and sign it. Then either send it by snail mail or fax to us or send it back scanned (or as a photo) by email. Email: ace+cla@c9.io Fax: +31 (0) 206388953 Address: Ajax.org B.V. Keizersgracht 241 1016 EA, Amsterdam the Netherlands","title":"CONTRIBUTING"},{"location":"ide/CONTRIBUTING/#contributing","text":"Ace is a community project and wouldn't be what it is without contributions! We actively encourage and support contributions. The Ace source code is released under the BSD License. This license is very simple, and is friendly to all kinds of projects, whether open source or not. Take charge of your editor and add your favorite language highlighting and keybindings! Feel free to fork and improve/enhance Ace any way you want. If you feel that the editor or the Ace community will benefit from your changes, please open a pull request. To protect the interests of the Ace contributors and users we require contributors to sign a Contributors License Agreement (CLA) before we pull the changes into the main repository. Our CLA is the simplest of agreements, requiring that the contributions you make to an ajax.org project are only those you're allowed to make. This helps us significantly reduce future legal risk for everyone involved. It is easy, helps everyone, takes ten minutes, and only needs to be completed once. There are two versions of the agreement: The Individual CLA : use this version if you're working on an ajax.org in your spare time, or can clearly claim ownership of copyright in what you'll be submitting. The Corporate CLA : have your corporate lawyer review and submit this if your company is going to be contributing to ajax.org projects If you want to contribute to an ajax.org project please print the CLA and fill it out and sign it. Then either send it by snail mail or fax to us or send it back scanned (or as a photo) by email. Email: ace+cla@c9.io Fax: +31 (0) 206388953 Address: Ajax.org B.V. Keizersgracht 241 1016 EA, Amsterdam the Netherlands","title":"Contributing"},{"location":"ide/Readme/","text":"Bitcoin Script IDE A Bitcoin Script IDE to facilitate the learning, testing, and teaching of Bitcoin Script. Features Syntax highlighting Auto-complete Translation to and from assembly Stack visualizer Step-by-step debugger Try it out! Open up IDE in https://siminchen.github.io/bitcoinIDE/ In the Script pane , type in some script code: ex. 1 2 OP_ADD ex. 123 OP_HASH256 ex. 1 OP_IF 2 OP_ELSE 3 OP_ENDIF View the equivalent assembly code by clicking the Assembly tab To execute the script, return to the Script tab and hit the Run button on the bottom to run the code Note the stack operations in the Stack pane on the right. To process the script one command at a time, hit the Step button on the bottom Note the stack operations Note the text box on the bottom that shows the next command To process the remainder of the commands, hit the Continue button on the bottom If the script was a valid script, then the text box on the bottom will be green and the stack elements will be orange. If the script was invalid, then the text box and the stack elements will be red","title":"Bitcoin Script"},{"location":"ide/Readme/#bitcoin-script-ide","text":"A Bitcoin Script IDE to facilitate the learning, testing, and teaching of Bitcoin Script.","title":"Bitcoin Script IDE"},{"location":"ide/Readme/#features","text":"Syntax highlighting Auto-complete Translation to and from assembly Stack visualizer Step-by-step debugger","title":"Features"},{"location":"ide/Readme/#try-it-out","text":"Open up IDE in https://siminchen.github.io/bitcoinIDE/ In the Script pane , type in some script code: ex. 1 2 OP_ADD ex. 123 OP_HASH256 ex. 1 OP_IF 2 OP_ELSE 3 OP_ENDIF View the equivalent assembly code by clicking the Assembly tab To execute the script, return to the Script tab and hit the Run button on the bottom to run the code Note the stack operations in the Stack pane on the right. To process the script one command at a time, hit the Step button on the bottom Note the stack operations Note the text box on the bottom that shows the next command To process the remainder of the commands, hit the Continue button on the bottom If the script was a valid script, then the text box on the bottom will be green and the stack elements will be orange. If the script was invalid, then the text box and the stack elements will be red","title":"Try it out!"},{"location":"ide/demo/kitchen-sink/docs/markdown/","text":"Ace (Ajax.org Cloud9 Editor) Ace is a standalone code editor written in JavaScript. Our goal is to create a browser based editor that matches and extends the features, usability and performance of existing native editors such as TextMate, Vim or Eclipse. It can be easily embedded in any web page or JavaScript application. Ace is developed as the primary editor for Cloud9 IDE and the successor of the Mozilla Skywriter (Bespin) Project. Features Syntax highlighting Automatic indent and outdent An optional command line Handles huge documents (100,000 lines and more are no problem) Fully customizable key bindings including VI and Emacs modes Themes (TextMate themes can be imported) Search and replace with regular expressions Highlight matching parentheses Toggle between soft tabs and real tabs Displays hidden characters Drag and drop text using the mouse Line wrapping Unstructured / user code folding Live syntax checker (currently JavaScript/CoffeeScript) Take Ace for a spin! Check out the Ace live demo or get a Cloud9 IDE account to experience Ace while editing one of your own GitHub projects. If you want, you can use Ace as a textarea replacement thanks to the Ace Bookmarklet . History Previously known as \u201cBespin\u201d and \u201cSkywriter\u201d it\u2019s now known as Ace (Ajax.org Cloud9 Editor)! Bespin and Ace started as two independent projects, both aiming to build a no-compromise code editor component for the web. Bespin started as part of Mozilla Labs and was based on the canvas tag, while Ace is the Editor component of the Cloud9 IDE and is using the DOM for rendering. After the release of Ace at JSConf.eu 2010 in Berlin the Skywriter team decided to merge Ace with a simplified version of Skywriter's plugin system and some of Skywriter's extensibility points. All these changes have been merged back to Ace. Both Ajax.org and Mozilla are actively developing and maintaining Ace. Getting the code Ace is a community project. We actively encourage and support contributions. The Ace source code is hosted on GitHub. It is released under the BSD License. This license is very simple, and is friendly to all kinds of projects, whether open source or not. Take charge of your editor and add your favorite language highlighting and keybindings! git clone git://github.com/ajaxorg/ace.git cd ace git submodule update --init --recursive Embedding Ace Ace can be easily embedded into any existing web page. The Ace git repository ships with a pre-packaged version of Ace inside of the build directory. The same packaged files are also available as a separate download . Simply copy the contents of the src subdirectory somewhere into your project and take a look at the included demos of how to use Ace. The easiest version is simply: <div id=\"editor\">some text</div> <script src=\"src/ace.js\" type=\"text/javascript\" charset=\"utf-8\"></script> <script> window.onload = function() { var editor = ace.edit(\"editor\"); }; </script> With \"editor\" being the id of the DOM element, which should be converted to an editor. Note that this element must be explicitly sized and positioned absolute or relative for Ace to work. e.g. #editor { position: absolute; width: 500px; height: 400px; } To change the theme simply include the Theme's JavaScript file <script src=\"src/theme-twilight.js\" type=\"text/javascript\" charset=\"utf-8\"></script> and configure the editor to use the theme: editor.setTheme(\"ace/theme/twilight\"); By default the editor only supports plain text mode; many other languages are available as separate modules. After including the mode's JavaScript file: <script src=\"src/mode-javascript.js\" type=\"text/javascript\" charset=\"utf-8\"></script> Then the mode can be used like this: var JavaScriptMode = require(\"ace/mode/javascript\").Mode; editor.getSession().setMode(new JavaScriptMode()); Documentation You find a lot more sample code in the demo app . There is also some documentation on the wiki page . If you still need help, feel free to drop a mail on the ace mailing list . Running Ace After the checkout Ace works out of the box. No build step is required. Open 'editor.html' in any browser except Google Chrome. Google Chrome doesn't allow XMLHTTPRequests from files loaded from disc (i.e. with a file:/// URL). To open Ace in Chrome simply start the bundled mini HTTP server: ./static.py Or using Node.JS ./static.js The editor can then be opened at http://localhost:8888/index.html. Package Ace To package Ace we use the dryice build tool developed by the Mozilla Skywriter team. Before you can build you need to make sure that the submodules are up to date. git submodule update --init --recursive Afterwards Ace can be built by calling ./Makefile.dryice.js normal The packaged Ace will be put in the 'build' folder. To build the bookmarklet version execute ./Makefile.dryice.js bm Running the Unit Tests The Ace unit tests run on node.js. Before the first run a couple of node modules have to be installed. The easiest way to do this is by using the node package manager (npm). In the Ace base directory simply call npm link . To run the tests call: node lib/ace/test/all.js You can also run the tests in your browser by serving: http://localhost:8888/lib/ace/test/tests.html This makes debugging failing tests way more easier. Contributing Ace wouldn't be what it is without contributions! Feel free to fork and improve/enhance Ace any way you want. If you feel that the editor or the Ace community will benefit from your changes, please open a pull request. To protect the interests of the Ace contributors and users we require contributors to sign a Contributors License Agreement (CLA) before we pull the changes into the main repository. Our CLA is the simplest of agreements, requiring that the contributions you make to an ajax.org project are only those you're allowed to make. This helps us significantly reduce future legal risk for everyone involved. It is easy, helps everyone, takes ten minutes, and only needs to be completed once. There are two versions of the agreement: The Individual CLA : use this version if you're working on an ajax.org in your spare time, or can clearly claim ownership of copyright in what you'll be submitting. The Corporate CLA : have your corporate lawyer review and submit this if your company is going to be contributing to ajax.org projects If you want to contribute to an ajax.org project please print the CLA and fill it out and sign it. Then either send it by snail mail or fax to us or send it back scanned (or as a photo) by email. Email: fabian.jakobs@web.de Fax: +31 (0) 206388953 Address: Ajax.org B.V. Keizersgracht 241 1016 EA, Amsterdam the Netherlands","title":"Markdown"},{"location":"ide/demo/kitchen-sink/docs/markdown/#ace-ajaxorg-cloud9-editor","text":"Ace is a standalone code editor written in JavaScript. Our goal is to create a browser based editor that matches and extends the features, usability and performance of existing native editors such as TextMate, Vim or Eclipse. It can be easily embedded in any web page or JavaScript application. Ace is developed as the primary editor for Cloud9 IDE and the successor of the Mozilla Skywriter (Bespin) Project.","title":"Ace (Ajax.org Cloud9 Editor)"},{"location":"ide/demo/kitchen-sink/docs/markdown/#features","text":"Syntax highlighting Automatic indent and outdent An optional command line Handles huge documents (100,000 lines and more are no problem) Fully customizable key bindings including VI and Emacs modes Themes (TextMate themes can be imported) Search and replace with regular expressions Highlight matching parentheses Toggle between soft tabs and real tabs Displays hidden characters Drag and drop text using the mouse Line wrapping Unstructured / user code folding Live syntax checker (currently JavaScript/CoffeeScript)","title":"Features"},{"location":"ide/demo/kitchen-sink/docs/markdown/#take-ace-for-a-spin","text":"Check out the Ace live demo or get a Cloud9 IDE account to experience Ace while editing one of your own GitHub projects. If you want, you can use Ace as a textarea replacement thanks to the Ace Bookmarklet .","title":"Take Ace for a spin!"},{"location":"ide/demo/kitchen-sink/docs/markdown/#history","text":"Previously known as \u201cBespin\u201d and \u201cSkywriter\u201d it\u2019s now known as Ace (Ajax.org Cloud9 Editor)! Bespin and Ace started as two independent projects, both aiming to build a no-compromise code editor component for the web. Bespin started as part of Mozilla Labs and was based on the canvas tag, while Ace is the Editor component of the Cloud9 IDE and is using the DOM for rendering. After the release of Ace at JSConf.eu 2010 in Berlin the Skywriter team decided to merge Ace with a simplified version of Skywriter's plugin system and some of Skywriter's extensibility points. All these changes have been merged back to Ace. Both Ajax.org and Mozilla are actively developing and maintaining Ace.","title":"History"},{"location":"ide/demo/kitchen-sink/docs/markdown/#getting-the-code","text":"Ace is a community project. We actively encourage and support contributions. The Ace source code is hosted on GitHub. It is released under the BSD License. This license is very simple, and is friendly to all kinds of projects, whether open source or not. Take charge of your editor and add your favorite language highlighting and keybindings! git clone git://github.com/ajaxorg/ace.git cd ace git submodule update --init --recursive","title":"Getting the code"},{"location":"ide/demo/kitchen-sink/docs/markdown/#embedding-ace","text":"Ace can be easily embedded into any existing web page. The Ace git repository ships with a pre-packaged version of Ace inside of the build directory. The same packaged files are also available as a separate download . Simply copy the contents of the src subdirectory somewhere into your project and take a look at the included demos of how to use Ace. The easiest version is simply: <div id=\"editor\">some text</div> <script src=\"src/ace.js\" type=\"text/javascript\" charset=\"utf-8\"></script> <script> window.onload = function() { var editor = ace.edit(\"editor\"); }; </script> With \"editor\" being the id of the DOM element, which should be converted to an editor. Note that this element must be explicitly sized and positioned absolute or relative for Ace to work. e.g. #editor { position: absolute; width: 500px; height: 400px; } To change the theme simply include the Theme's JavaScript file <script src=\"src/theme-twilight.js\" type=\"text/javascript\" charset=\"utf-8\"></script> and configure the editor to use the theme: editor.setTheme(\"ace/theme/twilight\"); By default the editor only supports plain text mode; many other languages are available as separate modules. After including the mode's JavaScript file: <script src=\"src/mode-javascript.js\" type=\"text/javascript\" charset=\"utf-8\"></script> Then the mode can be used like this: var JavaScriptMode = require(\"ace/mode/javascript\").Mode; editor.getSession().setMode(new JavaScriptMode());","title":"Embedding Ace"},{"location":"ide/demo/kitchen-sink/docs/markdown/#documentation","text":"You find a lot more sample code in the demo app . There is also some documentation on the wiki page . If you still need help, feel free to drop a mail on the ace mailing list .","title":"Documentation"},{"location":"ide/demo/kitchen-sink/docs/markdown/#running-ace","text":"After the checkout Ace works out of the box. No build step is required. Open 'editor.html' in any browser except Google Chrome. Google Chrome doesn't allow XMLHTTPRequests from files loaded from disc (i.e. with a file:/// URL). To open Ace in Chrome simply start the bundled mini HTTP server: ./static.py Or using Node.JS ./static.js The editor can then be opened at http://localhost:8888/index.html.","title":"Running Ace"},{"location":"ide/demo/kitchen-sink/docs/markdown/#package-ace","text":"To package Ace we use the dryice build tool developed by the Mozilla Skywriter team. Before you can build you need to make sure that the submodules are up to date. git submodule update --init --recursive Afterwards Ace can be built by calling ./Makefile.dryice.js normal The packaged Ace will be put in the 'build' folder. To build the bookmarklet version execute ./Makefile.dryice.js bm","title":"Package Ace"},{"location":"ide/demo/kitchen-sink/docs/markdown/#running-the-unit-tests","text":"The Ace unit tests run on node.js. Before the first run a couple of node modules have to be installed. The easiest way to do this is by using the node package manager (npm). In the Ace base directory simply call npm link . To run the tests call: node lib/ace/test/all.js You can also run the tests in your browser by serving: http://localhost:8888/lib/ace/test/tests.html This makes debugging failing tests way more easier.","title":"Running the Unit Tests"},{"location":"ide/demo/kitchen-sink/docs/markdown/#contributing","text":"Ace wouldn't be what it is without contributions! Feel free to fork and improve/enhance Ace any way you want. If you feel that the editor or the Ace community will benefit from your changes, please open a pull request. To protect the interests of the Ace contributors and users we require contributors to sign a Contributors License Agreement (CLA) before we pull the changes into the main repository. Our CLA is the simplest of agreements, requiring that the contributions you make to an ajax.org project are only those you're allowed to make. This helps us significantly reduce future legal risk for everyone involved. It is easy, helps everyone, takes ten minutes, and only needs to be completed once. There are two versions of the agreement: The Individual CLA : use this version if you're working on an ajax.org in your spare time, or can clearly claim ownership of copyright in what you'll be submitting. The Corporate CLA : have your corporate lawyer review and submit this if your company is going to be contributing to ajax.org projects If you want to contribute to an ajax.org project please print the CLA and fill it out and sign it. Then either send it by snail mail or fax to us or send it back scanned (or as a photo) by email. Email: fabian.jakobs@web.de Fax: +31 (0) 206388953 Address: Ajax.org B.V. Keizersgracht 241 1016 EA, Amsterdam the Netherlands","title":"Contributing"},{"location":"ide/doc/","text":"Ace API Reference Welcome to the Ace API Reference Guide. Ace is a standalone code editor written in JavaScript that you can embed onto any website. We're used in a bunch of places already, like GitHub, Google, and Facebook. On the left, you'll find a list of all of our currently documented classes. There are plenty more to do, but these represent the \"core\" set. For more information on how to work with Ace, check out the main Ace website .","title":"Ace API Reference"},{"location":"ide/doc/#ace-api-reference","text":"Welcome to the Ace API Reference Guide. Ace is a standalone code editor written in JavaScript that you can embed onto any website. We're used in a bunch of places already, like GitHub, Google, and Facebook. On the left, you'll find a list of all of our currently documented classes. There are plenty more to do, but these represent the \"core\" set. For more information on how to work with Ace, check out the main Ace website .","title":"Ace API Reference"},{"location":"ide/lib/ace/mode/_test/Readme/","text":"tokens_<modeName>.json files keep information about correct tokens and tokenizer states for all modes supported by ace. They are generated from text_<modeName>.txt or demo/kitchen-sink/doc/* with node highlight_rules_test.js -gen command.","title":"Readme"},{"location":"ide/lib/ace/mode/xquery/Readme/","text":"This files are build from xqlint (using the grunt ace_build )","title":"Readme"},{"location":"ide/tool/Readme/","text":"Helper Scripts for Ace To use this you need to install node.js. and run npm install in this directory. add_mode.js Run node add_mode.js ModeName \"extension1|extension2|^FullName\" to create all the files needed for a new mode named ModeName this adds stubs for: ace/mode/mode_name.js ace/mode/mode_name_hightlight_rules.js ace/snippets/mode_name.js ace/demo/kitchen_sink/docs/mode_name.extension1 and adds entry for the new mode to ace/ext/modelist.js tmlanguage.js node tmlanguage.js ./templates/dummy.JSON-tmLanguage","title":"Readme"},{"location":"ide/tool/Readme/#helper-scripts-for-ace","text":"To use this you need to install node.js. and run npm install in this directory.","title":"Helper Scripts for Ace"},{"location":"ide/tool/Readme/#add_modejs","text":"Run node add_mode.js ModeName \"extension1|extension2|^FullName\" to create all the files needed for a new mode named ModeName this adds stubs for: ace/mode/mode_name.js ace/mode/mode_name_hightlight_rules.js ace/snippets/mode_name.js ace/demo/kitchen_sink/docs/mode_name.extension1 and adds entry for the new mode to ace/ext/modelist.js","title":"add_mode.js"},{"location":"ide/tool/Readme/#tmlanguagejs","text":"node tmlanguage.js ./templates/dummy.JSON-tmLanguage","title":"tmlanguage.js"},{"location":"lnbits/","text":"LNBits Beginner Workshop Proposed workshop syllabus for timechain.academy Target Audience: Plebs New to lightning and interested in running their own website or store that could accept lightning as tips, online payments or an application that either sends or receives lightning sats. Good for small online businesses, podcasts, blogs, and game developers. Prerequisites: No formal Lightning experience required, however a basic understanding of sending and receiving using Lightning wallets and a wallet with testnet sats required. Some basic understanding of programming in python helpful. Estimated time for a session - ( ~2-3 hrs ) Time for workshop assumes students already have an plebnet instance up. This workshop is partly lecture but also a lot of hands on with running and moving sats around on a LNBits instance, students should be prepared to send/receive lightning using testnet sats. What this workshop will cover: What is LNBits and what does it do? LNBits is a Free and Open source lightning accounting system. Easy to set up and lightweight, LNbits can run on any lightning-network funding source, currently supporting LND, c-lightning, OpenNode, lntxbot, LNPay and even LNbits itself! You can run LNbits for yourself, or easily offer a custodian solution for others. Setting up LNBits on plebnet Ideally workshop participants already have plebnet docker setup If not, they can use a public instance of lnbits to follow along but its live, not testnet LNBits makes uses of Bolt11(Invoice protocol for lightning payments) Review of Bolt 11 Specification before diving in https://github.com/lightning/bolts/blob/master/00-introduction.md Create a new user, core wallet functions Walk through of LNBits features: Each wallet has its own API keys and there is no limit to the number of wallets you can make. Being able to partition funds makes LNbits a useful tool for money management and as a development tool. Brief overview of Extensions Sending and receiving Lightning payments on LNBits Limitations of the LNBits System Some Key Extensions and how they work: (with hands on exercises) User Manager LNURLp LNURLw LndHub (LND only) Some simple Application Extensions: (with hands on exercises) TipJar Paywall Lightning Addresses What are they? How do they work? How can you use Lightning Addresses with LNBits - with Any website - with an extension Getting started with Building Applications on LNBits The LNBits API The pylnbits API library (with hands on exercises) Some configuration options for LNBits (with hands on exercises) Where to go Next LNBits in production Where to get help Q & A session Note : Other workshop ideas: - advanced workshop for building sample production ready applications on LNBits - workshop on LNURL/webLN applications, e.g. lnurl-auth, lightning addresses, webln.dev About the Instructor: @bitkarrot on github and twitter; shadowy super coder contributing to bitcoin and lightning.","title":"LNBits Beginner Workshop"},{"location":"lnbits/#lnbits-beginner-workshop","text":"Proposed workshop syllabus for timechain.academy","title":"LNBits Beginner Workshop"},{"location":"lnbits/#target-audience","text":"Plebs New to lightning and interested in running their own website or store that could accept lightning as tips, online payments or an application that either sends or receives lightning sats. Good for small online businesses, podcasts, blogs, and game developers.","title":"Target Audience:"},{"location":"lnbits/#prerequisites","text":"No formal Lightning experience required, however a basic understanding of sending and receiving using Lightning wallets and a wallet with testnet sats required. Some basic understanding of programming in python helpful.","title":"Prerequisites:"},{"location":"lnbits/#estimated-time-for-a-session-2-3-hrs","text":"Time for workshop assumes students already have an plebnet instance up. This workshop is partly lecture but also a lot of hands on with running and moving sats around on a LNBits instance, students should be prepared to send/receive lightning using testnet sats.","title":"Estimated time for a session - ( ~2-3 hrs )"},{"location":"lnbits/#what-this-workshop-will-cover","text":"What is LNBits and what does it do? LNBits is a Free and Open source lightning accounting system. Easy to set up and lightweight, LNbits can run on any lightning-network funding source, currently supporting LND, c-lightning, OpenNode, lntxbot, LNPay and even LNbits itself! You can run LNbits for yourself, or easily offer a custodian solution for others. Setting up LNBits on plebnet Ideally workshop participants already have plebnet docker setup If not, they can use a public instance of lnbits to follow along but its live, not testnet LNBits makes uses of Bolt11(Invoice protocol for lightning payments) Review of Bolt 11 Specification before diving in https://github.com/lightning/bolts/blob/master/00-introduction.md Create a new user, core wallet functions Walk through of LNBits features: Each wallet has its own API keys and there is no limit to the number of wallets you can make. Being able to partition funds makes LNbits a useful tool for money management and as a development tool. Brief overview of Extensions Sending and receiving Lightning payments on LNBits Limitations of the LNBits System Some Key Extensions and how they work: (with hands on exercises) User Manager LNURLp LNURLw LndHub (LND only) Some simple Application Extensions: (with hands on exercises) TipJar Paywall Lightning Addresses What are they? How do they work? How can you use Lightning Addresses with LNBits - with Any website - with an extension Getting started with Building Applications on LNBits The LNBits API The pylnbits API library (with hands on exercises) Some configuration options for LNBits (with hands on exercises) Where to go Next LNBits in production Where to get help Q & A session Note : Other workshop ideas: - advanced workshop for building sample production ready applications on LNBits - workshop on LNURL/webLN applications, e.g. lnurl-auth, lightning addresses, webln.dev","title":"What this workshop will cover:"},{"location":"lnbits/#about-the-instructor","text":"@bitkarrot on github and twitter; shadowy super coder contributing to bitcoin and lightning.","title":"About the Instructor:"},{"location":"lnbits/lnbits/","text":"LNBits Beginner Workshop Proposed workshop syllabus for timechain.academy Target Audience: Plebs New to lightning and interested in running their own website or store that could accept lightning as tips, online payments or an application that either sends or receives lightning sats. Good for small online businesses, podcasts, blogs, and game developers. Prerequisites: No formal Lightning experience required, however a basic understanding of sending and receiving using Lightning wallets and a wallet with testnet sats required. Some basic understanding of programming in python helpful. Estimated time for a session - ( ~2-3 hrs ) Time for workshop assumes students already have an plebnet instance up. This workshop is partly lecture but also a lot of hands on with running and moving sats around on a LNBits instance, students should be prepared to send/receive lightning using testnet sats. What this workshop will cover: What is LNBits and what does it do? LNBits is a Free and Open source lightning accounting system. Easy to set up and lightweight, LNbits can run on any lightning-network funding source, currently supporting LND, c-lightning, OpenNode, lntxbot, LNPay and even LNbits itself! You can run LNbits for yourself, or easily offer a custodian solution for others. Setting up LNBits on plebnet Ideally workshop participants already have plebnet docker setup If not, they can use a public instance of lnbits to follow along but its live, not testnet LNBits makes uses of Bolt11(Invoice protocol for lightning payments) Review of Bolt 11 Specification before diving in https://github.com/lightning/bolts/blob/master/00-introduction.md Create a new user, core wallet functions Walk through of LNBits features: Each wallet has its own API keys and there is no limit to the number of wallets you can make. Being able to partition funds makes LNbits a useful tool for money management and as a development tool. Brief overview of Extensions Sending and receiving Lightning payments on LNBits Limitations of the LNBits System Some Key Extensions and how they work: (with hands on exercises) User Manager LNURLp LNURLw LndHub (LND only) Some simple Application Extensions: (with hands on exercises) TipJar Paywall Lightning Addresses What are they? How do they work? How can you use Lightning Addresses with LNBits - with Any website - with an extension Getting started with Building Applications on LNBits The LNBits API The pylnbits API library (with hands on exercises) Some configuration options for LNBits (with hands on exercises) Where to go Next LNBits in production Where to get help Q & A session Note : Other workshop ideas: - advanced workshop for building sample production ready applications on LNBits - workshop on LNURL/webLN applications, e.g. lnurl-auth, lightning addresses, webln.dev About the Instructor: @bitkarrot on github and twitter; shadowy super coder contributing to bitcoin and lightning.","title":"LnBits"},{"location":"lnbits/lnbits/#lnbits-beginner-workshop","text":"Proposed workshop syllabus for timechain.academy","title":"LNBits Beginner Workshop"},{"location":"lnbits/lnbits/#target-audience","text":"Plebs New to lightning and interested in running their own website or store that could accept lightning as tips, online payments or an application that either sends or receives lightning sats. Good for small online businesses, podcasts, blogs, and game developers.","title":"Target Audience:"},{"location":"lnbits/lnbits/#prerequisites","text":"No formal Lightning experience required, however a basic understanding of sending and receiving using Lightning wallets and a wallet with testnet sats required. Some basic understanding of programming in python helpful.","title":"Prerequisites:"},{"location":"lnbits/lnbits/#estimated-time-for-a-session-2-3-hrs","text":"Time for workshop assumes students already have an plebnet instance up. This workshop is partly lecture but also a lot of hands on with running and moving sats around on a LNBits instance, students should be prepared to send/receive lightning using testnet sats.","title":"Estimated time for a session - ( ~2-3 hrs )"},{"location":"lnbits/lnbits/#what-this-workshop-will-cover","text":"What is LNBits and what does it do? LNBits is a Free and Open source lightning accounting system. Easy to set up and lightweight, LNbits can run on any lightning-network funding source, currently supporting LND, c-lightning, OpenNode, lntxbot, LNPay and even LNbits itself! You can run LNbits for yourself, or easily offer a custodian solution for others. Setting up LNBits on plebnet Ideally workshop participants already have plebnet docker setup If not, they can use a public instance of lnbits to follow along but its live, not testnet LNBits makes uses of Bolt11(Invoice protocol for lightning payments) Review of Bolt 11 Specification before diving in https://github.com/lightning/bolts/blob/master/00-introduction.md Create a new user, core wallet functions Walk through of LNBits features: Each wallet has its own API keys and there is no limit to the number of wallets you can make. Being able to partition funds makes LNbits a useful tool for money management and as a development tool. Brief overview of Extensions Sending and receiving Lightning payments on LNBits Limitations of the LNBits System Some Key Extensions and how they work: (with hands on exercises) User Manager LNURLp LNURLw LndHub (LND only) Some simple Application Extensions: (with hands on exercises) TipJar Paywall Lightning Addresses What are they? How do they work? How can you use Lightning Addresses with LNBits - with Any website - with an extension Getting started with Building Applications on LNBits The LNBits API The pylnbits API library (with hands on exercises) Some configuration options for LNBits (with hands on exercises) Where to go Next LNBits in production Where to get help Q & A session Note : Other workshop ideas: - advanced workshop for building sample production ready applications on LNBits - workshop on LNURL/webLN applications, e.g. lnurl-auth, lightning addresses, webln.dev","title":"What this workshop will cover:"},{"location":"lnbits/lnbits/#about-the-instructor","text":"@bitkarrot on github and twitter; shadowy super coder contributing to bitcoin and lightning.","title":"About the Instructor:"},{"location":"lnbook/","text":"Mastering the Lightning Network STATUS: First Edition published on Dec 21, 2021 About Mastering the Lightning Network is an O'Reilly Media book, by authors Andreas M. Antonopoulos ( @aantonop ), Olaoluwa Osuntokun ( @roasbeef ), Rene Pickhardt ( @renepickhardt ). It was published on Dec 21, 2021, in paperback and e-book, by O'Reilly Media. It is available everywhere that books are sold. This repository contains the manuscript of the book as published by O'Reilly Media, tagged as firstedition_firstprint . The book describes the Lightning Network (LN), a Peer-to-Peer protocol running on top of Bitcoin and other blockchains, which provides near-instant, secure, micro-payments. The book is suitable for technical readers with an understanding of the fundamentals of Bitcoin and other open blockchains. Contents Preface Cover Titlepage Copyright Table of Contents Preface Part 1 Part 1 - Intro Introduction Getting Started How the Lightning Network Works Lightning Node Software Operating a Lightning Network Node Part 2 Part 2 - Intro Lightning Network Architecture Payment Channels Routing on a Network of Payment Channels Channel Operation and Payment Forwarding Onion Routing Gossip and the Channel Graph Pathfinding and Payment Delivery Wire Protocol: Framing and Extensibility Lightning's Encrypted Message Transport Lightning Payment Requests Security and Privacy of the Lightning Network Conclusion Appendices Bitcoin Fundamentals Review Docker Basics Protocol Messages Glossary Glossary Author Bios and Colophon Author Bios Colophon Source and license Mastering the Lightning Network is released under the Creative Commons CC-BY-NC-ND license, which allows sharing the source code for personal use only. You may read this book for free. You may not create derivatives (such as PDF copies), or distribute the book commercially. The full terms of the license can be found here: Mastering the Lightning Network by Andreas M. Antonopoulos, Olaoluwa Osuntokun, Rene Pickhardt is licensed under a Creative Commons Attribution-NonCommercial-NoDerivatives 4.0 International License . Translations and Derivatives (eg. PDF, HTML, EPUB ebooks) The current license does not permit derivative or commercial work . This means, it does not permit independent translations without pemission/license from O'Reilly Media (publish","title":"Mastering Lighting"},{"location":"lnbook/#mastering-the-lightning-network","text":"STATUS: First Edition published on Dec 21, 2021","title":"Mastering the Lightning Network"},{"location":"lnbook/#about","text":"Mastering the Lightning Network is an O'Reilly Media book, by authors Andreas M. Antonopoulos ( @aantonop ), Olaoluwa Osuntokun ( @roasbeef ), Rene Pickhardt ( @renepickhardt ). It was published on Dec 21, 2021, in paperback and e-book, by O'Reilly Media. It is available everywhere that books are sold. This repository contains the manuscript of the book as published by O'Reilly Media, tagged as firstedition_firstprint . The book describes the Lightning Network (LN), a Peer-to-Peer protocol running on top of Bitcoin and other blockchains, which provides near-instant, secure, micro-payments. The book is suitable for technical readers with an understanding of the fundamentals of Bitcoin and other open blockchains.","title":"About"},{"location":"lnbook/#contents","text":"","title":"Contents"},{"location":"lnbook/#preface","text":"Cover Titlepage Copyright Table of Contents Preface","title":"Preface"},{"location":"lnbook/#part-1","text":"Part 1 - Intro Introduction Getting Started How the Lightning Network Works Lightning Node Software Operating a Lightning Network Node","title":"Part 1"},{"location":"lnbook/#part-2","text":"Part 2 - Intro Lightning Network Architecture Payment Channels Routing on a Network of Payment Channels Channel Operation and Payment Forwarding Onion Routing Gossip and the Channel Graph Pathfinding and Payment Delivery Wire Protocol: Framing and Extensibility Lightning's Encrypted Message Transport Lightning Payment Requests Security and Privacy of the Lightning Network Conclusion","title":"Part 2"},{"location":"lnbook/#appendices","text":"Bitcoin Fundamentals Review Docker Basics Protocol Messages","title":"Appendices"},{"location":"lnbook/#glossary","text":"Glossary","title":"Glossary"},{"location":"lnbook/#author-bios-and-colophon","text":"Author Bios Colophon","title":"Author Bios and Colophon"},{"location":"lnbook/#source-and-license","text":"Mastering the Lightning Network is released under the Creative Commons CC-BY-NC-ND license, which allows sharing the source code for personal use only. You may read this book for free. You may not create derivatives (such as PDF copies), or distribute the book commercially. The full terms of the license can be found here: Mastering the Lightning Network by Andreas M. Antonopoulos, Olaoluwa Osuntokun, Rene Pickhardt is licensed under a Creative Commons Attribution-NonCommercial-NoDerivatives 4.0 International License .","title":"Source and license"},{"location":"lnbook/#translations-and-derivatives-eg-pdf-html-epub-ebooks","text":"The current license does not permit derivative or commercial work . This means, it does not permit independent translations without pemission/license from O'Reilly Media (publish","title":"Translations and Derivatives (eg. PDF, HTML, EPUB ebooks)"},{"location":"lnbook/CONTRIBUTING/","text":"","title":"CONTRIBUTING"},{"location":"lnbook/LICENSE/","text":"","title":"LICENSE"},{"location":"playground/","text":"Setting up Plebnet Playground on MacOS Resources: Plebnet Playground Docker Readme Bitcoin Core Bitcoin MacOS Build Guide Plebnet Fun Aim Plebnet Playground is a sandbox environment to help Bitcoin plebs get under the hood with Lightning LND and mess around without using real sats. This brief tutorial is aimed to help noobies setup Plebnet Playground and Bitcoin Core on MacOS in less that hald and hour. CHECK: You can install all of this in a virtual environment if you have one. For simplicity we will be doing this on our everyday admin user account. Nothing in this tutorial should break or interfere with the daily running of your machine. Prerequisites MacOS laptop or desktop running MacOS Mojave or above. We have not tested on earlier versions. I am using MacOS Catalina 10.15 but this process is compatible with later versions as well. ? are there any known compatability issues with newest M1 chips vs Intel?? The Xcode Command Line Tools are a collection of build tools for macOS. These tools must be installed in order to build Bitcoin Core from source. More about that here . To install, run the following command from your terminal: xcode-select --install You will need a Github account. If you haven't got one, set one up. We will use the git version control to fork and clone both Bitcoin Core and Plebnet Playground onto our local machine. NOTE: If you are not familiar with Git yet, don't worry, there is another lesson on this. For the moment just think of it as a version control protocol that allows you to copy a version of the source code onto your local machine to then compile and run it locally. Plebnet Playground runs on Docker which is an open-source platform used for developing, deploying, and managing applications in lightweight virtual environments called containers. The default Terminal that runs either bash or zsh and the Homebrew Package manager. Using the Command Line This tutorial asumes basic to no experience using the Command Line. If this freaks you out DO NOT WORRY , follow the steps and you will slowly become familiar with using basic commands, installing the necessary dependencies to run Plebnet Playground and getting under the hood running Bitcoin Core on your machine. If you are familiar with CLI already bare with us. If you haven't already, install Homebrew Package manager . Homebrew helps install packages to their own directory and then symlinks their files into /usr/local (on macOS Intel). Homebrew makes it super easy and safe to install and uninstall open source software dependencies compatible with Linux. /bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\" If you haven't already, make sure you have git installed: brew install git Once installed you can use brew info git to confirm the version of git you are using: We are also going to need Python 3 installed. Python is a programming language. If you are already managing different python versions consider using Pyenv to manage these, alternatively: brew install python@3 check the Python version: python --version ...and you should see something like: Now we will install GNU Make is a tool which will allow us to build and compile our package source code locally. brew install make Finally let's install Docker. We could do this straight from the website, but we are now command line ninjas and just need a couple of brewskies: brew install docker-compose followed by: brew install --cask docker Now we're ready to rock and roll forking our code from Github. Forking repositories We are going to use Github to \"fork\" or copy the latest version of the Bitcoin Core and the Plebnet Playground Docker repositories. Enter your Github and follow the links to both accounts. Bitcoin Plebnet Playground Click on the fork button to fork the original repositories into your own Github account. It will ask you to name the new fork, but you can keep the default name. Here is what my Github looks like below. You should see both forks under your remote Repositories tab. Git cloning repositories We are now going to use the git clone command to yes, clone the version you just forked onto your Github, onto to your local machine. Github conveniantly gives you an easy way to copy the comand straight to your terminal. Enter your forked Github repostiory and find the green Code button. On the drop down you will see options to clone. Unless you already have SSH setup with your Github (Github class) Copy the one under HTTPS. In your Terminal first lets create a new directory in Documents and call it Github. You can do this in the Finder, alternatively type: cd ~/Documents mkdir Github cd ~/Documents/Github Now type: git clone and then paste or CMD + V the address you just copied. It should look like this only addressed to your own Github: git clone https://github.com/addyourgithubhere/bitcoin.git Now lets do the same for the same for the Plebnet Playground repo. NOTE: Make sure you are actually inside the directory you want to clone into. git clone https://github.com/addyourgithubhere/plebnet-playground-docker.git Now you should see in your Finder window the two cloned repositories something like this: Pretty cool huh. Git Checkout Now for the the Bitcoin clone we want to check out that the version we have downloaded can be verified with the latest released commit. We do this by going into the Bitcoin/bitcoin original repo, scroll down to the bottom right Releases > Latest This brings up Bitcoin Core 23.0 as of time of writing, and on the subheading we can see a hash on the right which begins with fcf6c8 Click on this and we can see the commit hash on the right: fcf6c8f4eb217763545ede1766831a6b93f583bd Lets copy this and go back to Terminal and type: git checkout fcf6c8f4eb217763545ede1766831a6b93f583bd This will report back to us: You are in 'detached HEAD' state. You can look around, make experimental changes and commit them, and you can discard any commits you make in this state without impacting any branches by switching back to a branch. This confirms we are indeed using the latest commit. Building Plebnet Docker Now we are going to build and compile the code base of the Plebnet Playground Docker. See here for the Github README documentation. Enter the directory where the plebnet-playground-docker has been cloned. cd ~/Documents/Github/plebnet-playground-docker Now let's compile: make init NOTE: If our other dependencies have not been yet installed this will fail as it will require a version of python 3 and docker to work. This can be done via make build or make initialize . See other make commands using just typing make . Install and start all services ./install.sh Builiding Bitcoin Core Enter the directory where the bitcoin repository has been cloned. See MacOs Bitcoin Buildguide . I reccomend reading through this to usnderstand the various dependencies and options available. We will go with a bare bones simple compiliation. The first step is to download the required dependencies. These dependencies represent the packages required to get a bare bones installation up and running. brew install automake libtool boost pkg-config libevent NOTE: These are 5 different dependencies which we are installing in one brew command. Awesome! Also we will AVOID installing berkeley-db@4 dependency because we do not need support for legacy wallets. Bitcoin Core includes a GUI built with the cross-platform Qt Framework. To compile the GUI, we need to install qt@5. brew install qt@5 Configuration There are various ways to configure Bitcoin core, but we will be doing the bare minimal as we don't require legacy support. ./autogen.sh Now we add some configuration options to disable tests and other stuff. ./configure --disable-tests --disable-man --disable-bench --without-bdb Again db@4 is only required to support for legacy wallets, which we don't need thus --without-bdb Compiling Now lets compile Bitcoin Core: make Now: ./src/bitcoind -conf=/Users/$(whoami)/Documents/GitHub/plebnet-playground-docker/bitcoin-signet/bitcoin.conf !!! Would like to break down what this command does. We did not make and empty configuration file like in the instructions !! This will take a while to compile so be patient. Launching Plebnet From within the plebnet repo we can start to run the play commands: play play-bitcoin play-bitcoin gettxoutsetinfo play-bitcoin-iftop docker ps To start the docker we can use: This will prompt Docker Desktop to request priviledged access: Docker Desktop will start up: play-lnd play-lnd newaddress tb1q0yfkqcs384w3hlq8ksgzcgcxq9dmyydg9h9unr play-getcoins play-lnd walletbalance play-bitcoin netinfo 5 Ride The Lightning Baby RTL will at http://localhost:3000 the default password is password and it will ask you to change this on first login. open http://localhost:3000","title":"Playground"},{"location":"playground/#setting-up-plebnet-playground-on-macos","text":"","title":"Setting up Plebnet Playground on MacOS"},{"location":"playground/#resources","text":"Plebnet Playground Docker Readme Bitcoin Core Bitcoin MacOS Build Guide Plebnet Fun","title":"Resources:"},{"location":"playground/#aim","text":"Plebnet Playground is a sandbox environment to help Bitcoin plebs get under the hood with Lightning LND and mess around without using real sats. This brief tutorial is aimed to help noobies setup Plebnet Playground and Bitcoin Core on MacOS in less that hald and hour. CHECK: You can install all of this in a virtual environment if you have one. For simplicity we will be doing this on our everyday admin user account. Nothing in this tutorial should break or interfere with the daily running of your machine.","title":"Aim"},{"location":"playground/#prerequisites","text":"MacOS laptop or desktop running MacOS Mojave or above. We have not tested on earlier versions. I am using MacOS Catalina 10.15 but this process is compatible with later versions as well. ? are there any known compatability issues with newest M1 chips vs Intel?? The Xcode Command Line Tools are a collection of build tools for macOS. These tools must be installed in order to build Bitcoin Core from source. More about that here . To install, run the following command from your terminal: xcode-select --install You will need a Github account. If you haven't got one, set one up. We will use the git version control to fork and clone both Bitcoin Core and Plebnet Playground onto our local machine. NOTE: If you are not familiar with Git yet, don't worry, there is another lesson on this. For the moment just think of it as a version control protocol that allows you to copy a version of the source code onto your local machine to then compile and run it locally. Plebnet Playground runs on Docker which is an open-source platform used for developing, deploying, and managing applications in lightweight virtual environments called containers. The default Terminal that runs either bash or zsh and the Homebrew Package manager.","title":"Prerequisites"},{"location":"playground/#using-the-command-line","text":"This tutorial asumes basic to no experience using the Command Line. If this freaks you out DO NOT WORRY , follow the steps and you will slowly become familiar with using basic commands, installing the necessary dependencies to run Plebnet Playground and getting under the hood running Bitcoin Core on your machine. If you are familiar with CLI already bare with us. If you haven't already, install Homebrew Package manager . Homebrew helps install packages to their own directory and then symlinks their files into /usr/local (on macOS Intel). Homebrew makes it super easy and safe to install and uninstall open source software dependencies compatible with Linux. /bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\" If you haven't already, make sure you have git installed: brew install git Once installed you can use brew info git to confirm the version of git you are using: We are also going to need Python 3 installed. Python is a programming language. If you are already managing different python versions consider using Pyenv to manage these, alternatively: brew install python@3 check the Python version: python --version ...and you should see something like: Now we will install GNU Make is a tool which will allow us to build and compile our package source code locally. brew install make Finally let's install Docker. We could do this straight from the website, but we are now command line ninjas and just need a couple of brewskies: brew install docker-compose followed by: brew install --cask docker Now we're ready to rock and roll forking our code from Github.","title":"Using the Command Line"},{"location":"playground/#forking-repositories","text":"We are going to use Github to \"fork\" or copy the latest version of the Bitcoin Core and the Plebnet Playground Docker repositories. Enter your Github and follow the links to both accounts. Bitcoin Plebnet Playground Click on the fork button to fork the original repositories into your own Github account. It will ask you to name the new fork, but you can keep the default name. Here is what my Github looks like below. You should see both forks under your remote Repositories tab.","title":"Forking repositories"},{"location":"playground/#git-cloning-repositories","text":"We are now going to use the git clone command to yes, clone the version you just forked onto your Github, onto to your local machine. Github conveniantly gives you an easy way to copy the comand straight to your terminal. Enter your forked Github repostiory and find the green Code button. On the drop down you will see options to clone. Unless you already have SSH setup with your Github (Github class) Copy the one under HTTPS. In your Terminal first lets create a new directory in Documents and call it Github. You can do this in the Finder, alternatively type: cd ~/Documents mkdir Github cd ~/Documents/Github Now type: git clone and then paste or CMD + V the address you just copied. It should look like this only addressed to your own Github: git clone https://github.com/addyourgithubhere/bitcoin.git Now lets do the same for the same for the Plebnet Playground repo. NOTE: Make sure you are actually inside the directory you want to clone into. git clone https://github.com/addyourgithubhere/plebnet-playground-docker.git Now you should see in your Finder window the two cloned repositories something like this: Pretty cool huh.","title":"Git cloning repositories"},{"location":"playground/#git-checkout","text":"Now for the the Bitcoin clone we want to check out that the version we have downloaded can be verified with the latest released commit. We do this by going into the Bitcoin/bitcoin original repo, scroll down to the bottom right Releases > Latest This brings up Bitcoin Core 23.0 as of time of writing, and on the subheading we can see a hash on the right which begins with fcf6c8 Click on this and we can see the commit hash on the right: fcf6c8f4eb217763545ede1766831a6b93f583bd Lets copy this and go back to Terminal and type: git checkout fcf6c8f4eb217763545ede1766831a6b93f583bd This will report back to us: You are in 'detached HEAD' state. You can look around, make experimental changes and commit them, and you can discard any commits you make in this state without impacting any branches by switching back to a branch. This confirms we are indeed using the latest commit.","title":"Git Checkout"},{"location":"playground/#building-plebnet-docker","text":"Now we are going to build and compile the code base of the Plebnet Playground Docker. See here for the Github README documentation. Enter the directory where the plebnet-playground-docker has been cloned. cd ~/Documents/Github/plebnet-playground-docker Now let's compile: make init NOTE: If our other dependencies have not been yet installed this will fail as it will require a version of python 3 and docker to work. This can be done via make build or make initialize . See other make commands using just typing make .","title":"Building Plebnet Docker"},{"location":"playground/#install-and-start-all-services","text":"./install.sh","title":"Install and start all services"},{"location":"playground/#builiding-bitcoin-core","text":"Enter the directory where the bitcoin repository has been cloned. See MacOs Bitcoin Buildguide . I reccomend reading through this to usnderstand the various dependencies and options available. We will go with a bare bones simple compiliation. The first step is to download the required dependencies. These dependencies represent the packages required to get a bare bones installation up and running. brew install automake libtool boost pkg-config libevent NOTE: These are 5 different dependencies which we are installing in one brew command. Awesome! Also we will AVOID installing berkeley-db@4 dependency because we do not need support for legacy wallets. Bitcoin Core includes a GUI built with the cross-platform Qt Framework. To compile the GUI, we need to install qt@5. brew install qt@5","title":"Builiding Bitcoin Core"},{"location":"playground/#configuration","text":"There are various ways to configure Bitcoin core, but we will be doing the bare minimal as we don't require legacy support. ./autogen.sh Now we add some configuration options to disable tests and other stuff. ./configure --disable-tests --disable-man --disable-bench --without-bdb Again db@4 is only required to support for legacy wallets, which we don't need thus --without-bdb","title":"Configuration"},{"location":"playground/#compiling","text":"Now lets compile Bitcoin Core: make Now: ./src/bitcoind -conf=/Users/$(whoami)/Documents/GitHub/plebnet-playground-docker/bitcoin-signet/bitcoin.conf !!! Would like to break down what this command does. We did not make and empty configuration file like in the instructions !! This will take a while to compile so be patient.","title":"Compiling"},{"location":"playground/#launching-plebnet","text":"From within the plebnet repo we can start to run the play commands: play play-bitcoin play-bitcoin gettxoutsetinfo play-bitcoin-iftop docker ps To start the docker we can use: This will prompt Docker Desktop to request priviledged access: Docker Desktop will start up: play-lnd play-lnd newaddress tb1q0yfkqcs384w3hlq8ksgzcgcxq9dmyydg9h9unr play-getcoins play-lnd walletbalance play-bitcoin netinfo 5","title":"Launching Plebnet"},{"location":"playground/#ride-the-lightning-baby","text":"RTL will at http://localhost:3000 the default password is password and it will ask you to change this on first login. open http://localhost:3000","title":"Ride The Lightning Baby"},{"location":"template/template/","text":"Your Course Title here Proposed workshop syllabus for timechain.academy Target Audience: Your Content here Prerequisites: Your Content here Estimated time for a session - ( ~2-3 hrs ) Your Content here What this course or workshop will cover: Lesson 1 Lesson 2 Q & A session Note : Other workshop notes: - Your content here About the Instructor: @yourGithubUsername - a bit about yourself here.","title":"Your Course Title here"},{"location":"template/template/#your-course-title-here","text":"Proposed workshop syllabus for timechain.academy","title":"Your Course Title here"},{"location":"template/template/#target-audience","text":"Your Content here","title":"Target Audience:"},{"location":"template/template/#prerequisites","text":"Your Content here","title":"Prerequisites:"},{"location":"template/template/#estimated-time-for-a-session-2-3-hrs","text":"Your Content here","title":"Estimated time for a session - ( ~2-3 hrs )"},{"location":"template/template/#what-this-course-or-workshop-will-cover","text":"Lesson 1 Lesson 2 Q & A session Note : Other workshop notes: - Your content here","title":"What this course or workshop will cover:"},{"location":"template/template/#about-the-instructor","text":"@yourGithubUsername - a bit about yourself here.","title":"About the Instructor:"}]}