{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"TimeChain.Academy Start learning Bitcoin and Lightning development today! git clone https://github.com/timechain-academy/timechain.academy.git","title":":)"},{"location":"#timechainacademy","text":"","title":"TimeChain.Academy"},{"location":"#start-learning-bitcoin-and-lightning-development-today","text":"git clone https://github.com/timechain-academy/timechain.academy.git","title":"Start learning Bitcoin and Lightning development today!"},{"location":"COMMANDS/","text":"Setup Mark 305 help print help test test test test test test test test test test test test test test test test test test test test help print help test test test test test test test test test test test test test test test test test test test test help print help test test test test test test test test test test test test test test test test test test test test Mark 305 help print help test test test test test test test test test test test test test test test test test test test test help print help test test test test test test test test test test test test test test test test test test test test help print help test test test test test test test test test test test test test test test test test test test test Mark 305 help print help test test test test test test test test test test test test test test test test test test test test help print help test test test test test test test test test test test test test test test test test test test test help print help test test test test test test test test test test test test test test test test test test test test Mark 305 help print help test test test test test test test test test test test test test test test test test test test test help print help test test test test test test test test test test test test test test test test test test test test help print help test test test test test test test test test test test test test test test test test test test test Mark 305 help print help test test test test test test test test test test test test test test test test test test test test help print help test test test test test test test test test test test test test test test test test test test test help print help test test test test test test test test test test test test test test test test test test test test Mark 305 help print help test test test test test test test test test test test test test test test test test test test test help print help test test test test test test test test test test test test test test test test test test test test help print help test test test test test test test test test test test test test test test test test test test test Mark 305 help print help test test test test test test test test test test test test test test test test test test test test help print help test test test test test test test test test test test test test test test test test test test test help print help test test test test test test test test test test test test test test test test test test test test","title":"Setup"},{"location":"COMMANDS/#setup","text":"","title":"Setup"},{"location":"COMMANDS/#mark-305","text":"","title":"Mark 305"},{"location":"COMMANDS/#help-print-help","text":"","title":"help           print help"},{"location":"COMMANDS/#test","text":"","title":"test"},{"location":"COMMANDS/#test_1","text":"","title":"test"},{"location":"COMMANDS/#test_2","text":"","title":"test"},{"location":"COMMANDS/#test_3","text":"","title":"test"},{"location":"COMMANDS/#test-test","text":"","title":"test           test"},{"location":"COMMANDS/#test-test_1","text":"","title":"test           test"},{"location":"COMMANDS/#test-test_2","text":"","title":"test           test"},{"location":"COMMANDS/#test-test_3","text":"","title":"test           test"},{"location":"COMMANDS/#test-test_4","text":"","title":"test            test"},{"location":"COMMANDS/#test-test_5","text":"","title":"test                test"},{"location":"COMMANDS/#test-test_6","text":"","title":"test                    test"},{"location":"COMMANDS/#test-test_7","text":"","title":"test                        test"},{"location":"COMMANDS/#help-print-help_1","text":"","title":"help  print help"},{"location":"COMMANDS/#test_4","text":"","title":"test"},{"location":"COMMANDS/#test_5","text":"","title":"test"},{"location":"COMMANDS/#test_6","text":"","title":"test"},{"location":"COMMANDS/#test_7","text":"","title":"test"},{"location":"COMMANDS/#test-test_8","text":"","title":"test  test"},{"location":"COMMANDS/#test-test_9","text":"","title":"test  test"},{"location":"COMMANDS/#test-test_10","text":"","title":"test  test"},{"location":"COMMANDS/#test-test_11","text":"","title":"test  test"},{"location":"COMMANDS/#test-test_12","text":"","title":"test    test"},{"location":"COMMANDS/#test-test_13","text":"","title":"test        test"},{"location":"COMMANDS/#test-test_14","text":"","title":"test            test"},{"location":"COMMANDS/#test-test_15","text":"","title":"test                test"},{"location":"COMMANDS/#help-print-help_2","text":"","title":"help  print help"},{"location":"COMMANDS/#test_8","text":"","title":"test"},{"location":"COMMANDS/#test_9","text":"","title":"test"},{"location":"COMMANDS/#test_10","text":"","title":"test"},{"location":"COMMANDS/#test_11","text":"","title":"test"},{"location":"COMMANDS/#test-test_16","text":"","title":"test  test"},{"location":"COMMANDS/#test-test_17","text":"","title":"test  test"},{"location":"COMMANDS/#test-test_18","text":"","title":"test  test"},{"location":"COMMANDS/#test-test_19","text":"","title":"test  test"},{"location":"COMMANDS/#test-test_20","text":"","title":"test    test"},{"location":"COMMANDS/#test-test_21","text":"","title":"test        test"},{"location":"COMMANDS/#test-test_22","text":"","title":"test            test"},{"location":"COMMANDS/#test-test_23","text":"","title":"test                test"},{"location":"COMMANDS/#mark-305_1","text":"","title":"Mark 305"},{"location":"COMMANDS/#help-print-help_3","text":"","title":"help           print help"},{"location":"COMMANDS/#test_12","text":"","title":"test"},{"location":"COMMANDS/#test_13","text":"","title":"test"},{"location":"COMMANDS/#test_14","text":"","title":"test"},{"location":"COMMANDS/#test_15","text":"","title":"test"},{"location":"COMMANDS/#test-test_24","text":"","title":"test           test"},{"location":"COMMANDS/#test-test_25","text":"","title":"test           test"},{"location":"COMMANDS/#test-test_26","text":"","title":"test           test"},{"location":"COMMANDS/#test-test_27","text":"","title":"test           test"},{"location":"COMMANDS/#test-test_28","text":"","title":"test            test"},{"location":"COMMANDS/#test-test_29","text":"","title":"test                test"},{"location":"COMMANDS/#test-test_30","text":"","title":"test                    test"},{"location":"COMMANDS/#test-test_31","text":"","title":"test                        test"},{"location":"COMMANDS/#help-print-help_4","text":"","title":"help  print help"},{"location":"COMMANDS/#test_16","text":"","title":"test"},{"location":"COMMANDS/#test_17","text":"","title":"test"},{"location":"COMMANDS/#test_18","text":"","title":"test"},{"location":"COMMANDS/#test_19","text":"","title":"test"},{"location":"COMMANDS/#test-test_32","text":"","title":"test  test"},{"location":"COMMANDS/#test-test_33","text":"","title":"test  test"},{"location":"COMMANDS/#test-test_34","text":"","title":"test  test"},{"location":"COMMANDS/#test-test_35","text":"","title":"test  test"},{"location":"COMMANDS/#test-test_36","text":"","title":"test    test"},{"location":"COMMANDS/#test-test_37","text":"","title":"test        test"},{"location":"COMMANDS/#test-test_38","text":"","title":"test            test"},{"location":"COMMANDS/#test-test_39","text":"","title":"test                test"},{"location":"COMMANDS/#help-print-help_5","text":"","title":"help  print help"},{"location":"COMMANDS/#test_20","text":"","title":"test"},{"location":"COMMANDS/#test_21","text":"","title":"test"},{"location":"COMMANDS/#test_22","text":"","title":"test"},{"location":"COMMANDS/#test_23","text":"","title":"test"},{"location":"COMMANDS/#test-test_40","text":"","title":"test  test"},{"location":"COMMANDS/#test-test_41","text":"","title":"test  test"},{"location":"COMMANDS/#test-test_42","text":"","title":"test  test"},{"location":"COMMANDS/#test-test_43","text":"","title":"test  test"},{"location":"COMMANDS/#test-test_44","text":"","title":"test    test"},{"location":"COMMANDS/#test-test_45","text":"","title":"test        test"},{"location":"COMMANDS/#test-test_46","text":"","title":"test            test"},{"location":"COMMANDS/#test-test_47","text":"","title":"test                test"},{"location":"COMMANDS/#mark-305_2","text":"","title":"Mark 305"},{"location":"COMMANDS/#help-print-help_6","text":"","title":"help           print help"},{"location":"COMMANDS/#test_24","text":"","title":"test"},{"location":"COMMANDS/#test_25","text":"","title":"test"},{"location":"COMMANDS/#test_26","text":"","title":"test"},{"location":"COMMANDS/#test_27","text":"","title":"test"},{"location":"COMMANDS/#test-test_48","text":"","title":"test           test"},{"location":"COMMANDS/#test-test_49","text":"","title":"test           test"},{"location":"COMMANDS/#test-test_50","text":"","title":"test           test"},{"location":"COMMANDS/#test-test_51","text":"","title":"test           test"},{"location":"COMMANDS/#test-test_52","text":"","title":"test            test"},{"location":"COMMANDS/#test-test_53","text":"","title":"test                test"},{"location":"COMMANDS/#test-test_54","text":"","title":"test                    test"},{"location":"COMMANDS/#test-test_55","text":"","title":"test                        test"},{"location":"COMMANDS/#help-print-help_7","text":"","title":"help  print help"},{"location":"COMMANDS/#test_28","text":"","title":"test"},{"location":"COMMANDS/#test_29","text":"","title":"test"},{"location":"COMMANDS/#test_30","text":"","title":"test"},{"location":"COMMANDS/#test_31","text":"","title":"test"},{"location":"COMMANDS/#test-test_56","text":"","title":"test  test"},{"location":"COMMANDS/#test-test_57","text":"","title":"test  test"},{"location":"COMMANDS/#test-test_58","text":"","title":"test  test"},{"location":"COMMANDS/#test-test_59","text":"","title":"test  test"},{"location":"COMMANDS/#test-test_60","text":"","title":"test    test"},{"location":"COMMANDS/#test-test_61","text":"","title":"test        test"},{"location":"COMMANDS/#test-test_62","text":"","title":"test            test"},{"location":"COMMANDS/#test-test_63","text":"","title":"test                test"},{"location":"COMMANDS/#help-print-help_8","text":"","title":"help  print help"},{"location":"COMMANDS/#test_32","text":"","title":"test"},{"location":"COMMANDS/#test_33","text":"","title":"test"},{"location":"COMMANDS/#test_34","text":"","title":"test"},{"location":"COMMANDS/#test_35","text":"","title":"test"},{"location":"COMMANDS/#test-test_64","text":"","title":"test  test"},{"location":"COMMANDS/#test-test_65","text":"","title":"test  test"},{"location":"COMMANDS/#test-test_66","text":"","title":"test  test"},{"location":"COMMANDS/#test-test_67","text":"","title":"test  test"},{"location":"COMMANDS/#test-test_68","text":"","title":"test    test"},{"location":"COMMANDS/#test-test_69","text":"","title":"test        test"},{"location":"COMMANDS/#test-test_70","text":"","title":"test            test"},{"location":"COMMANDS/#test-test_71","text":"","title":"test                test"},{"location":"COMMANDS/#mark-305_3","text":"","title":"Mark 305"},{"location":"COMMANDS/#help-print-help_9","text":"","title":"help           print help"},{"location":"COMMANDS/#test_36","text":"","title":"test"},{"location":"COMMANDS/#test_37","text":"","title":"test"},{"location":"COMMANDS/#test_38","text":"","title":"test"},{"location":"COMMANDS/#test_39","text":"","title":"test"},{"location":"COMMANDS/#test-test_72","text":"","title":"test           test"},{"location":"COMMANDS/#test-test_73","text":"","title":"test           test"},{"location":"COMMANDS/#test-test_74","text":"","title":"test           test"},{"location":"COMMANDS/#test-test_75","text":"","title":"test           test"},{"location":"COMMANDS/#test-test_76","text":"","title":"test            test"},{"location":"COMMANDS/#test-test_77","text":"","title":"test                test"},{"location":"COMMANDS/#test-test_78","text":"","title":"test                    test"},{"location":"COMMANDS/#test-test_79","text":"","title":"test                        test"},{"location":"COMMANDS/#help-print-help_10","text":"","title":"help  print help"},{"location":"COMMANDS/#test_40","text":"","title":"test"},{"location":"COMMANDS/#test_41","text":"","title":"test"},{"location":"COMMANDS/#test_42","text":"","title":"test"},{"location":"COMMANDS/#test_43","text":"","title":"test"},{"location":"COMMANDS/#test-test_80","text":"","title":"test  test"},{"location":"COMMANDS/#test-test_81","text":"","title":"test  test"},{"location":"COMMANDS/#test-test_82","text":"","title":"test  test"},{"location":"COMMANDS/#test-test_83","text":"","title":"test  test"},{"location":"COMMANDS/#test-test_84","text":"","title":"test    test"},{"location":"COMMANDS/#test-test_85","text":"","title":"test        test"},{"location":"COMMANDS/#test-test_86","text":"","title":"test            test"},{"location":"COMMANDS/#test-test_87","text":"","title":"test                test"},{"location":"COMMANDS/#help-print-help_11","text":"","title":"help  print help"},{"location":"COMMANDS/#test_44","text":"","title":"test"},{"location":"COMMANDS/#test_45","text":"","title":"test"},{"location":"COMMANDS/#test_46","text":"","title":"test"},{"location":"COMMANDS/#test_47","text":"","title":"test"},{"location":"COMMANDS/#test-test_88","text":"","title":"test  test"},{"location":"COMMANDS/#test-test_89","text":"","title":"test  test"},{"location":"COMMANDS/#test-test_90","text":"","title":"test  test"},{"location":"COMMANDS/#test-test_91","text":"","title":"test  test"},{"location":"COMMANDS/#test-test_92","text":"","title":"test    test"},{"location":"COMMANDS/#test-test_93","text":"","title":"test        test"},{"location":"COMMANDS/#test-test_94","text":"","title":"test            test"},{"location":"COMMANDS/#test-test_95","text":"","title":"test                test"},{"location":"COMMANDS/#mark-305_4","text":"","title":"Mark 305"},{"location":"COMMANDS/#help-print-help_12","text":"","title":"help           print help"},{"location":"COMMANDS/#test_48","text":"","title":"test"},{"location":"COMMANDS/#test_49","text":"","title":"test"},{"location":"COMMANDS/#test_50","text":"","title":"test"},{"location":"COMMANDS/#test_51","text":"","title":"test"},{"location":"COMMANDS/#test-test_96","text":"","title":"test           test"},{"location":"COMMANDS/#test-test_97","text":"","title":"test           test"},{"location":"COMMANDS/#test-test_98","text":"","title":"test           test"},{"location":"COMMANDS/#test-test_99","text":"","title":"test           test"},{"location":"COMMANDS/#test-test_100","text":"","title":"test            test"},{"location":"COMMANDS/#test-test_101","text":"","title":"test                test"},{"location":"COMMANDS/#test-test_102","text":"","title":"test                    test"},{"location":"COMMANDS/#test-test_103","text":"","title":"test                        test"},{"location":"COMMANDS/#help-print-help_13","text":"","title":"help  print help"},{"location":"COMMANDS/#test_52","text":"","title":"test"},{"location":"COMMANDS/#test_53","text":"","title":"test"},{"location":"COMMANDS/#test_54","text":"","title":"test"},{"location":"COMMANDS/#test_55","text":"","title":"test"},{"location":"COMMANDS/#test-test_104","text":"","title":"test  test"},{"location":"COMMANDS/#test-test_105","text":"","title":"test  test"},{"location":"COMMANDS/#test-test_106","text":"","title":"test  test"},{"location":"COMMANDS/#test-test_107","text":"","title":"test  test"},{"location":"COMMANDS/#test-test_108","text":"","title":"test    test"},{"location":"COMMANDS/#test-test_109","text":"","title":"test        test"},{"location":"COMMANDS/#test-test_110","text":"","title":"test            test"},{"location":"COMMANDS/#test-test_111","text":"","title":"test                test"},{"location":"COMMANDS/#help-print-help_14","text":"","title":"help  print help"},{"location":"COMMANDS/#test_56","text":"","title":"test"},{"location":"COMMANDS/#test_57","text":"","title":"test"},{"location":"COMMANDS/#test_58","text":"","title":"test"},{"location":"COMMANDS/#test_59","text":"","title":"test"},{"location":"COMMANDS/#test-test_112","text":"","title":"test  test"},{"location":"COMMANDS/#test-test_113","text":"","title":"test  test"},{"location":"COMMANDS/#test-test_114","text":"","title":"test  test"},{"location":"COMMANDS/#test-test_115","text":"","title":"test  test"},{"location":"COMMANDS/#test-test_116","text":"","title":"test    test"},{"location":"COMMANDS/#test-test_117","text":"","title":"test        test"},{"location":"COMMANDS/#test-test_118","text":"","title":"test            test"},{"location":"COMMANDS/#test-test_119","text":"","title":"test                test"},{"location":"COMMANDS/#mark-305_5","text":"","title":"Mark 305"},{"location":"COMMANDS/#help-print-help_15","text":"","title":"help           print help"},{"location":"COMMANDS/#test_60","text":"","title":"test"},{"location":"COMMANDS/#test_61","text":"","title":"test"},{"location":"COMMANDS/#test_62","text":"","title":"test"},{"location":"COMMANDS/#test_63","text":"","title":"test"},{"location":"COMMANDS/#test-test_120","text":"","title":"test           test"},{"location":"COMMANDS/#test-test_121","text":"","title":"test           test"},{"location":"COMMANDS/#test-test_122","text":"","title":"test           test"},{"location":"COMMANDS/#test-test_123","text":"","title":"test           test"},{"location":"COMMANDS/#test-test_124","text":"","title":"test            test"},{"location":"COMMANDS/#test-test_125","text":"","title":"test                test"},{"location":"COMMANDS/#test-test_126","text":"","title":"test                    test"},{"location":"COMMANDS/#test-test_127","text":"","title":"test                        test"},{"location":"COMMANDS/#help-print-help_16","text":"","title":"help  print help"},{"location":"COMMANDS/#test_64","text":"","title":"test"},{"location":"COMMANDS/#test_65","text":"","title":"test"},{"location":"COMMANDS/#test_66","text":"","title":"test"},{"location":"COMMANDS/#test_67","text":"","title":"test"},{"location":"COMMANDS/#test-test_128","text":"","title":"test  test"},{"location":"COMMANDS/#test-test_129","text":"","title":"test  test"},{"location":"COMMANDS/#test-test_130","text":"","title":"test  test"},{"location":"COMMANDS/#test-test_131","text":"","title":"test  test"},{"location":"COMMANDS/#test-test_132","text":"","title":"test    test"},{"location":"COMMANDS/#test-test_133","text":"","title":"test        test"},{"location":"COMMANDS/#test-test_134","text":"","title":"test            test"},{"location":"COMMANDS/#test-test_135","text":"","title":"test                test"},{"location":"COMMANDS/#help-print-help_17","text":"","title":"help  print help"},{"location":"COMMANDS/#test_68","text":"","title":"test"},{"location":"COMMANDS/#test_69","text":"","title":"test"},{"location":"COMMANDS/#test_70","text":"","title":"test"},{"location":"COMMANDS/#test_71","text":"","title":"test"},{"location":"COMMANDS/#test-test_136","text":"","title":"test  test"},{"location":"COMMANDS/#test-test_137","text":"","title":"test  test"},{"location":"COMMANDS/#test-test_138","text":"","title":"test  test"},{"location":"COMMANDS/#test-test_139","text":"","title":"test  test"},{"location":"COMMANDS/#test-test_140","text":"","title":"test    test"},{"location":"COMMANDS/#test-test_141","text":"","title":"test        test"},{"location":"COMMANDS/#test-test_142","text":"","title":"test            test"},{"location":"COMMANDS/#test-test_143","text":"","title":"test                test"},{"location":"COMMANDS/#mark-305_6","text":"","title":"Mark 305"},{"location":"COMMANDS/#help-print-help_18","text":"","title":"help           print help"},{"location":"COMMANDS/#test_72","text":"","title":"test"},{"location":"COMMANDS/#test_73","text":"","title":"test"},{"location":"COMMANDS/#test_74","text":"","title":"test"},{"location":"COMMANDS/#test_75","text":"","title":"test"},{"location":"COMMANDS/#test-test_144","text":"","title":"test           test"},{"location":"COMMANDS/#test-test_145","text":"","title":"test           test"},{"location":"COMMANDS/#test-test_146","text":"","title":"test           test"},{"location":"COMMANDS/#test-test_147","text":"","title":"test           test"},{"location":"COMMANDS/#test-test_148","text":"","title":"test            test"},{"location":"COMMANDS/#test-test_149","text":"","title":"test                test"},{"location":"COMMANDS/#test-test_150","text":"","title":"test                    test"},{"location":"COMMANDS/#test-test_151","text":"","title":"test                        test"},{"location":"COMMANDS/#help-print-help_19","text":"","title":"help  print help"},{"location":"COMMANDS/#test_76","text":"","title":"test"},{"location":"COMMANDS/#test_77","text":"","title":"test"},{"location":"COMMANDS/#test_78","text":"","title":"test"},{"location":"COMMANDS/#test_79","text":"","title":"test"},{"location":"COMMANDS/#test-test_152","text":"","title":"test  test"},{"location":"COMMANDS/#test-test_153","text":"","title":"test  test"},{"location":"COMMANDS/#test-test_154","text":"","title":"test  test"},{"location":"COMMANDS/#test-test_155","text":"","title":"test  test"},{"location":"COMMANDS/#test-test_156","text":"","title":"test    test"},{"location":"COMMANDS/#test-test_157","text":"","title":"test        test"},{"location":"COMMANDS/#test-test_158","text":"","title":"test            test"},{"location":"COMMANDS/#test-test_159","text":"","title":"test                test"},{"location":"COMMANDS/#help-print-help_20","text":"","title":"help  print help"},{"location":"COMMANDS/#test_80","text":"","title":"test"},{"location":"COMMANDS/#test_81","text":"","title":"test"},{"location":"COMMANDS/#test_82","text":"","title":"test"},{"location":"COMMANDS/#test_83","text":"","title":"test"},{"location":"COMMANDS/#test-test_160","text":"","title":"test  test"},{"location":"COMMANDS/#test-test_161","text":"","title":"test  test"},{"location":"COMMANDS/#test-test_162","text":"","title":"test  test"},{"location":"COMMANDS/#test-test_163","text":"","title":"test  test"},{"location":"COMMANDS/#test-test_164","text":"","title":"test    test"},{"location":"COMMANDS/#test-test_165","text":"","title":"test        test"},{"location":"COMMANDS/#test-test_166","text":"","title":"test            test"},{"location":"COMMANDS/#test-test_167","text":"","title":"test                test"},{"location":"git/","text":"Git-it (Desktop App) Git-it is a desktop (Mac, Windows and Linux) app that teaches you how to use Git and GitHub on the command line . \ud83d\udea9The app includes translations in these languages: Spanish (ES), Spanish (CO), French, Portugese (BR), Ukrainian, Traditional Chinese, Japanese, and Korean. \ud83d\udea9 Previously it ran in terminal (the command line application) with a guide online but now the guide is the app and it runs on your desktop on its own :sparkles: This will be the only maintained version going forward :arrow_right: Hello future Forkers, Branchers and Pull Requesters! This application contains challenges for learning Git and GitHub\u2014by using real Git and GitHub, not emulators. You'll be learning the awesome (and not so scary) command line and GitHub which means when you finish all of the challenges you'll have real repositories on your GitHub account and green squares on your contribution chart . What to Install You will need this app, Git-it as well as a text editor. You'll also of course need Git and the first challenge in Git-it helps you get that set up. But if you want to get a head start, go for it! You'll continue to use Git and your text editor throughout your bright social coding future. As a part of the challenges you'll also create a (free) account on GitHub. If you've already got one, high-five! Git We recommend installing GitHub Desktop (free) because it installs Git in the most consistent way across supported operating systems (Windows and Mac). We won't use the app itself in the challenges (but it is really useful once you get going in Git!), just the Git that it install for you. Note\u2014If you're using Windows, you should use the Git Shell app as your terminal\u2014it is installed with GitHub Desktop. In Mac and Linux you can use the app Terminal , which is already on your computer. Text Editor I'm quite partial (I'm on the team!) but Atom is a great text editor (also free) and it is built on Electron.js , just like Git-it. Visit the website and download the version for your operating system. Sublime , Microsoft VS Code and Adobe Brackets are other options. Git-it You can view the releases section of this repository to find the download for your operating system. Click to download your version. Once it has downloaded to your default Downloads directory, unzip the folder and run the Git-it executable. The executables for Mac, Windows and Linux: Mac Right (control) click the Git-it icon, select Open and then Open again. You can drag the icon into your Applications directory if you want, but it's not required. If needed, more detailed installation instructions can be found in this issue. Windows Double-click the executable. Linux Double-click the executable. If the app isn't running, see this issue . Get Started! Open Git-it and click the button to begin the first challenge. Have your terminal and text editor open, too. Follow along with the instructions in each challenge and use the terminal or editor as instructed. When you've completed the steps in a challenge click 'Verify'. Depending on the challenge you may need to also select the folder you did your work in for Git-it to verify. Questions? Open an issue on this repository. Want to contribute or build locally? See the contributing documentation Tips For Getting Started Code snippets often times look like $ some code-stuff --here . The dollar sign identifies the line as one a user would enter into the command line, but you don't actually include it when you type it into terminal. In this case, you'd actually just type some code-stuff --here . Variables are indicated by <VARIABLENAME> in code snippets. When you actually use the line of code, replace <VARIABLENAME> , with your variable. For instance to make a new folder in terminal the format is, mkdir <FOLDERNAME> , so if you wanted to make a folder named 'octocat', you'd type: mkdir octocat . Command line, terminal and bash all basically mean the same thing: the MS-DOS, Doogie Howser looking screen full of words and numbers. It's awesomely powerful and allows you to control your computer with text commands. You can do a lot of things from your terminal like delete, rename, copy or create files and folders; run scripts and send things back and forth between servers (like the ones storing things on GitHub.com) and your computer (also a server!).","title":"Git-it (Desktop App)"},{"location":"git/#git-it-desktop-app","text":"Git-it is a desktop (Mac, Windows and Linux) app that teaches you how to use Git and GitHub on the command line . \ud83d\udea9The app includes translations in these languages: Spanish (ES), Spanish (CO), French, Portugese (BR), Ukrainian, Traditional Chinese, Japanese, and Korean. \ud83d\udea9 Previously it ran in terminal (the command line application) with a guide online but now the guide is the app and it runs on your desktop on its own :sparkles: This will be the only maintained version going forward :arrow_right:","title":"Git-it (Desktop App)"},{"location":"git/#hello-future-forkers-branchers-and-pull-requesters","text":"This application contains challenges for learning Git and GitHub\u2014by using real Git and GitHub, not emulators. You'll be learning the awesome (and not so scary) command line and GitHub which means when you finish all of the challenges you'll have real repositories on your GitHub account and green squares on your contribution chart .","title":"Hello future Forkers, Branchers and Pull Requesters!"},{"location":"git/#what-to-install","text":"You will need this app, Git-it as well as a text editor. You'll also of course need Git and the first challenge in Git-it helps you get that set up. But if you want to get a head start, go for it! You'll continue to use Git and your text editor throughout your bright social coding future. As a part of the challenges you'll also create a (free) account on GitHub. If you've already got one, high-five!","title":"What to Install"},{"location":"git/#git","text":"We recommend installing GitHub Desktop (free) because it installs Git in the most consistent way across supported operating systems (Windows and Mac). We won't use the app itself in the challenges (but it is really useful once you get going in Git!), just the Git that it install for you. Note\u2014If you're using Windows, you should use the Git Shell app as your terminal\u2014it is installed with GitHub Desktop. In Mac and Linux you can use the app Terminal , which is already on your computer.","title":"Git"},{"location":"git/#text-editor","text":"I'm quite partial (I'm on the team!) but Atom is a great text editor (also free) and it is built on Electron.js , just like Git-it. Visit the website and download the version for your operating system. Sublime , Microsoft VS Code and Adobe Brackets are other options.","title":"Text Editor"},{"location":"git/#git-it","text":"You can view the releases section of this repository to find the download for your operating system. Click to download your version. Once it has downloaded to your default Downloads directory, unzip the folder and run the Git-it executable. The executables for Mac, Windows and Linux: Mac Right (control) click the Git-it icon, select Open and then Open again. You can drag the icon into your Applications directory if you want, but it's not required. If needed, more detailed installation instructions can be found in this issue. Windows Double-click the executable. Linux Double-click the executable. If the app isn't running, see this issue .","title":"Git-it"},{"location":"git/#get-started","text":"Open Git-it and click the button to begin the first challenge. Have your terminal and text editor open, too. Follow along with the instructions in each challenge and use the terminal or editor as instructed. When you've completed the steps in a challenge click 'Verify'. Depending on the challenge you may need to also select the folder you did your work in for Git-it to verify. Questions? Open an issue on this repository. Want to contribute or build locally? See the contributing documentation","title":"Get Started!"},{"location":"git/#tips-for-getting-started","text":"Code snippets often times look like $ some code-stuff --here . The dollar sign identifies the line as one a user would enter into the command line, but you don't actually include it when you type it into terminal. In this case, you'd actually just type some code-stuff --here . Variables are indicated by <VARIABLENAME> in code snippets. When you actually use the line of code, replace <VARIABLENAME> , with your variable. For instance to make a new folder in terminal the format is, mkdir <FOLDERNAME> , so if you wanted to make a folder named 'octocat', you'd type: mkdir octocat . Command line, terminal and bash all basically mean the same thing: the MS-DOS, Doogie Howser looking screen full of words and numbers. It's awesomely powerful and allows you to control your computer with text commands. You can do a lot of things from your terminal like delete, rename, copy or create files and folders; run scripts and send things back and forth between servers (like the ones storing things on GitHub.com) and your computer (also a server!).","title":"Tips For Getting Started"},{"location":"git/CONTRIBUTING/","text":"Contributing to Git-it Contributions are more than welcome! Checkout the help wanted labels for ideas! \ud83d\udce3 Provide a description in your Issue/Pull Request. In your pull request please explain what the problem was (with gifs or screenshots would be fantastic!) and how your changes fix it. \ud83d\udeab \ud83d\ude40 :fire: No description provided. :fire: \ud83d\ude40 \ud83d\udeab Code style is JS Standard and no ES6 syntax :tada: but open to relevant new methods. Changes to the content of the pages must be made in the challenge-content directory (for appropriate language). For more information on how the app works, see the documentation . Building Locally If you want to build this locally you'll need Node.js on your computer. Then clone this repository, install dependencies and launch: $ git clone https://github.com/jlord/git-it-electron $ cd git-it-electron $ npm install $ npm start Packaging for OS X, Windows or Linux Here's how to create a Git-it executable for Windows, OS X and Linux. You'll need Node.js on your computer and Wine if you're packaging for Windows from a non Windows machine (more on this below). Use npm 3 To package a release you'll need atleast npm version 3 on your computer. To check your version of npm: $ npm -v This is because the newer version of npm flattens the dependency tree. This is essential for creating a version of Git-it that runs on Windows, which has limits to file path lengths. Clone and Install Dependencies Clone this repository and install the dependencies: $ git clone https://github.com/jlord/git-it-electron $ cd git-it-electron $ npm install Package If you have made any changes to the code or you just cloned this project from github, you'll need to rebuild all of the challenges and/or pages. If you haven't, skip to the next step! $ npm run build-all OS X, Linux, Windows Each generated folder is put in the /out directory. $ npm run pack-mac This will output the contents of the application to a folder at ../out/Git-it-darwin-x64 . $ npm run pack-lin This will output the contents of the application to a folder at ../out/Git-it-linux-x64 . $ npm run pack-win A note from electron-packager , the module we use to package these apps: Building Windows apps from non-Windows platforms Building an Electron app for the Windows platform with a custom icon requires editing the Electron.exe file. Currently, electron-packager uses node-rcedit to accomplish this. A Windows executable is bundled in that node package and needs to be run in order for this functionality to work, so on non-Windows platforms, Wine needs to be installed. On OS X, it is installable via Homebrew . This will output the contents of the application to a folder at ../out/Git-it-win32-ia32 . Translations to other languages If you want to add a new language to this project, here are some step you need to do. Add locale code First, edit locale.js and add locale code in it. You can use any editor you like. $ vim lib/locale.js In locale.js , there must have a variable called 'available', and add your language in it. For example, we have already had three languages, and wanted to add German(Germany): var available = { 'en-US': 'English', 'ja-JP': '\u65e5\u672c\u8a9e', 'zh-TW': '\u4e2d\u6587(\u81fa\u7063)', 'de-DE': 'Deutsch' } Before colon is your language code, it must look like '\\<lang>-\\<location>'. '\\<lang>' is your language, in this case, 'de' is the language code of 'German'. '\\<location>' is your location code, in this case, 'DE' is the location code of 'Germany'. If you don't know what your language/location code, you can find it here . The language code MUST be all lowercase, and location code MUST be all uppercase. If there are lots of locations using same language, you could add your language in variable 'aliases'. App will auto-redirect to target language. For example, There are five locations using 'German' as their language (de-AT, de-CH, de-DE, de-LI and de-LU), you can add 'de' into 'aliases' and let app using 'de-DE' for default 'de' language. var aliases = { 'en': 'en-US', 'ja': 'ja-JP', 'zh': 'zh-TW', 'de': 'de-DE' } Locale in aliases MUST point to a locale existed in available. Translate files All files that translator should edit is in resources/contents . We suggest translator using 'en-US' as original language to translate. cd resources/contents cp en-US '<your-lang>-<your-location>' Folder name in resources/contents MUST be the same as the locale you added in locale.js. Build Don't forget to build to generate built file. npm run build-all","title":"Contributing to Git-it"},{"location":"git/CONTRIBUTING/#contributing-to-git-it","text":"Contributions are more than welcome! Checkout the help wanted labels for ideas! \ud83d\udce3 Provide a description in your Issue/Pull Request. In your pull request please explain what the problem was (with gifs or screenshots would be fantastic!) and how your changes fix it. \ud83d\udeab \ud83d\ude40 :fire: No description provided. :fire: \ud83d\ude40 \ud83d\udeab Code style is JS Standard and no ES6 syntax :tada: but open to relevant new methods. Changes to the content of the pages must be made in the challenge-content directory (for appropriate language). For more information on how the app works, see the documentation .","title":"Contributing to Git-it"},{"location":"git/CONTRIBUTING/#building-locally","text":"If you want to build this locally you'll need Node.js on your computer. Then clone this repository, install dependencies and launch: $ git clone https://github.com/jlord/git-it-electron $ cd git-it-electron $ npm install $ npm start","title":"Building Locally"},{"location":"git/CONTRIBUTING/#packaging-for-os-x-windows-or-linux","text":"Here's how to create a Git-it executable for Windows, OS X and Linux. You'll need Node.js on your computer and Wine if you're packaging for Windows from a non Windows machine (more on this below).","title":"Packaging for OS X, Windows or Linux"},{"location":"git/CONTRIBUTING/#use-npm-3","text":"To package a release you'll need atleast npm version 3 on your computer. To check your version of npm: $ npm -v This is because the newer version of npm flattens the dependency tree. This is essential for creating a version of Git-it that runs on Windows, which has limits to file path lengths.","title":"Use npm 3"},{"location":"git/CONTRIBUTING/#clone-and-install-dependencies","text":"Clone this repository and install the dependencies: $ git clone https://github.com/jlord/git-it-electron $ cd git-it-electron $ npm install","title":"Clone and Install Dependencies"},{"location":"git/CONTRIBUTING/#package","text":"If you have made any changes to the code or you just cloned this project from github, you'll need to rebuild all of the challenges and/or pages. If you haven't, skip to the next step! $ npm run build-all","title":"Package"},{"location":"git/CONTRIBUTING/#os-x-linux-windows","text":"Each generated folder is put in the /out directory. $ npm run pack-mac This will output the contents of the application to a folder at ../out/Git-it-darwin-x64 . $ npm run pack-lin This will output the contents of the application to a folder at ../out/Git-it-linux-x64 . $ npm run pack-win A note from electron-packager , the module we use to package these apps: Building Windows apps from non-Windows platforms Building an Electron app for the Windows platform with a custom icon requires editing the Electron.exe file. Currently, electron-packager uses node-rcedit to accomplish this. A Windows executable is bundled in that node package and needs to be run in order for this functionality to work, so on non-Windows platforms, Wine needs to be installed. On OS X, it is installable via Homebrew . This will output the contents of the application to a folder at ../out/Git-it-win32-ia32 .","title":"OS X, Linux, Windows"},{"location":"git/CONTRIBUTING/#translations-to-other-languages","text":"If you want to add a new language to this project, here are some step you need to do.","title":"Translations to other languages"},{"location":"git/CONTRIBUTING/#add-locale-code","text":"First, edit locale.js and add locale code in it. You can use any editor you like. $ vim lib/locale.js In locale.js , there must have a variable called 'available', and add your language in it. For example, we have already had three languages, and wanted to add German(Germany): var available = { 'en-US': 'English', 'ja-JP': '\u65e5\u672c\u8a9e', 'zh-TW': '\u4e2d\u6587(\u81fa\u7063)', 'de-DE': 'Deutsch' } Before colon is your language code, it must look like '\\<lang>-\\<location>'. '\\<lang>' is your language, in this case, 'de' is the language code of 'German'. '\\<location>' is your location code, in this case, 'DE' is the location code of 'Germany'. If you don't know what your language/location code, you can find it here . The language code MUST be all lowercase, and location code MUST be all uppercase. If there are lots of locations using same language, you could add your language in variable 'aliases'. App will auto-redirect to target language. For example, There are five locations using 'German' as their language (de-AT, de-CH, de-DE, de-LI and de-LU), you can add 'de' into 'aliases' and let app using 'de-DE' for default 'de' language. var aliases = { 'en': 'en-US', 'ja': 'ja-JP', 'zh': 'zh-TW', 'de': 'de-DE' } Locale in aliases MUST point to a locale existed in available.","title":"Add locale code"},{"location":"git/CONTRIBUTING/#translate-files","text":"All files that translator should edit is in resources/contents . We suggest translator using 'en-US' as original language to translate. cd resources/contents cp en-US '<your-lang>-<your-location>' Folder name in resources/contents MUST be the same as the locale you added in locale.js.","title":"Translate files"},{"location":"git/CONTRIBUTING/#build","text":"Don't forget to build to generate built file. npm run build-all","title":"Build"},{"location":"gnupg/","text":"GPG Encryption 101 GnuPG, popularly known as GPG , is an extremely versatile encryption tool. It is widely used as the industry standard for encryption for things like emails, messages, files, or just anything you need to send to someone securely. GPG (and it's cousin PGP) are commonly used for two things: Encryption: encrypt emails and files like Edward Snowden does every day, so bad actors can\u2019t read your encrypted emails and files. Signing: create digital signatures for signing documents or your outgoing emails. This ensured the recipient can know the email hasn\u2019t been tampered with or that it is authentic. This tutorial will cover using GPG on a MacOS system both via the gui application and the command line. This will get you familiar with the basics of encryption and signature verification, sending private messages and some privacy best practices. So why do we need GPG? Some first principles \"Privacy is necessary for an open society in the electronic age. Privacy is not secrecy. A private matter is something one doesn't want the whole world to know, but a secret matter is something one doesn't want anybody to know. Privacy is the power to selectively reveal oneself to the world.\" This is the opening line of A Cypherpunk's Manifesto by Eric Hughes in 1993. The original cypherpunks believed that privacy was not only a necessity in the digital age but a basic human right. One of their ambitions was to create a digital money which could be transacted without the need for a trusted third party. Bitcoin is the solution to this problem. Ultimately what it set out to solve was the problem of double spending, but it did so by using digital signatures in an open peer-to-peer network . Satoshi Nakamoto wrote about privacy in Bitcoin\u2019s Whitepaper: \u201cSome linking of transactions to a common owner is still unavoidable, and could reveal other transactions that belonged to the same owner\u201d While private transactions on Bitcoin network are not fully anonymous, it is our responsibility as individuals to understand why encryption matters for a trustless network to function. Privacy in the digital age requires cryptography. This allows us to reveal our data and identity when desired and only to whom desired. This is the essence of privacy. As the old adage goes: don't trust, verify. Some basics Encryption is the process of converting data into secret, incomprehensible code such that only intended parties are capable of understanding the information. The GPG Tools support provides a fantastic rabbit hole to dive deeper into the technicalities of cryptography, hash functions, digital certificates etc. We will cover many of these topics here but with a focus on the tools and application of them using the command line and some basic exercises. How to use GPG encryption GPG keys work by using two files, a private key and a public key. These two keys are tied to each other when we generate a keypair, and are both needed for encrypting and decrypting files. Private and Public Keys We use our private key to encrypt a file, folder or text with GPG. This key is what we keep secret and secure FOR YOUR EYES ONLY. This is also the key we use for signing. We then need the paired public key to decrypt the file, folder or text which has been previously encrypted. This key can and should be shared publicly with desired recipients and/or on a public server. This also works in the opposite direction! Other people can use our public key to encrypt a file, folder or text. The only way it can be decrypted in turn is with your private key. In other words, if a file was encrypted with a private key, it can only be decrypted with the corresponding public key. And if a file was encrypted with a public key, it can only be decrypted with the corresponding private key. Installing the GPG suite The GPG Suite is a fantastic tool for getting started that helps us create, store, export and import private and public keys. We will first start to get familiar with encryption using this GUI application to create and manage our keys and do some basic exercises. Go to the link and follow the download instructions. Creating a New Keypair When you open up the GPG suite, if you have not created a key before the key creation dialogue will appear. Enter a name and email. Add a strong passphrase. Store your passphrase securely with a password manager. Under advanced options: Use the RSA encryption default option Add if you want the key to expire on a certain date Uploading the key to Keyserver After setting up a new key pair GPG will ask you if you want to send your public key to the key server. If you do this will prompt a verification email something like this: The GPG default key server is keys.openpgp.org . Verifying your public key on the key server means anyone can search for your email address on the key server, and find access to your public key. Once the email address is verified your key can be found when others search for your email address on the key server. Search opengpg return mail and public key See more about the Keyserver User Guide Backup your keys You don't want to loose your keys. Yet it can still happen: drive failures, physical damage to your computer or whatever other disasters may strike. Just like with your Bitcoin seed phrases for your wallet, we highly encourage you to back them up and store them in a secure location. As this will be in a .asc file containing a lot of code which is hard to write down so we recommend using a an encrypted USB stick that you use ONLY for secret key storage. On the GPG Suite select key to backup. You can optionally also backup all keys at once. Click File > Export or press \u2318E to include the secret key enable the Include secret key in exported file option (do this only to transfer your key to another computer or create a backup. NEVER SHARE YOUR SECRET KEY VIA EMAIL OR A CLOUD SERVICE!! Click Save Following defaults a file with the following format Name (keyID) \u2013 Public.asc or Name (keyID) \u2013 Secret.asc in case you opted to also export your secret key will be created See more on GPG key backup and recovery here. Important: If you use the same sec/pub keys on more than one machine, make sure to update or change your keys only on one machine and then always transfer the updated key to your other mac. ## Encrypt your email We highly recommend setting up you email with GPGTools to send, receive and sign encrypted emails with fellow plebs using your GPG keys. This is not in the scope of this encryption 101 class, but follow the above link as GPG makes it super easy to setup on your MacOS mail app. Importing public keys When we want to communicate or share files using PGP encryption we need the recipient to have access to our public key, and they need to have ours. We can find and import other people's GPG public key from keys.openpgp.org , or straight from the GPG Suite app on the Toolbar has a Lookup Key which searches the public server. When you have a verified email address, you can import it's associated public key. Your GPG Suite will end up looking something like this: Exporting public keys To share our public key, right click your newly created key and select Export . You can see in the dropdown the various options available. This creates a .asc file which can be exported to your documents or desktop. Beware if you are sharing your public key with others DO NOT check the include secret key box ONLY include the private key to backup your keypair or when you want to export your key pair to another machine that only you access. Here is the public key file that is created and which you can share with your network: Share your public key by uploading the file on the Time Machine Academy discord / gnupg chat. Here you will find other users public keys which you can download and import to your GPG Suite. This now allows you to communicate securely with them, as well as share encrypted files and messages. Encrypting files or folders Right-click the file or folder you want to encrypt in Finder and select Services > OpenPGP: Encrypt File Select recipients whose public keys you already have imported to encrypt the message with their public keys. Notice you can add an optional passphrase required to decrypt the message. If you only want to encrypt for yourself you need to tick the Add to Recipients option in the Your Key: section. Optionally sign the file to ensure it did not get tampered with when decrypting after some time. Click Encrypt A new .gpg file will be created next to the original file, if you do not want to keep the unencrypted file make sure to delete it securely You can now share these files with your chosen recipients securely over a public channel or as an email attachment without fear of snooping eyes. Managing your keys You can right click on any of the keys in the GPG Suite and that will bring up a bunch of options, including seeing the keys and user IDs. A the very bottom you can set the Owner Trust level in accordance with a chosen address that you have been verifying and interacting with with greater frequency. The default owner trust of an imported public key is Never . ## Verifying signatures ## Using GPG in the command line ## Attaching GPG to your GitHub","title":"Gnupg"},{"location":"gnupg/#gpg-encryption-101","text":"GnuPG, popularly known as GPG , is an extremely versatile encryption tool. It is widely used as the industry standard for encryption for things like emails, messages, files, or just anything you need to send to someone securely. GPG (and it's cousin PGP) are commonly used for two things: Encryption: encrypt emails and files like Edward Snowden does every day, so bad actors can\u2019t read your encrypted emails and files. Signing: create digital signatures for signing documents or your outgoing emails. This ensured the recipient can know the email hasn\u2019t been tampered with or that it is authentic. This tutorial will cover using GPG on a MacOS system both via the gui application and the command line. This will get you familiar with the basics of encryption and signature verification, sending private messages and some privacy best practices. So why do we need GPG?","title":"GPG Encryption 101"},{"location":"gnupg/#some-first-principles","text":"\"Privacy is necessary for an open society in the electronic age. Privacy is not secrecy. A private matter is something one doesn't want the whole world to know, but a secret matter is something one doesn't want anybody to know. Privacy is the power to selectively reveal oneself to the world.\" This is the opening line of A Cypherpunk's Manifesto by Eric Hughes in 1993. The original cypherpunks believed that privacy was not only a necessity in the digital age but a basic human right. One of their ambitions was to create a digital money which could be transacted without the need for a trusted third party. Bitcoin is the solution to this problem. Ultimately what it set out to solve was the problem of double spending, but it did so by using digital signatures in an open peer-to-peer network . Satoshi Nakamoto wrote about privacy in Bitcoin\u2019s Whitepaper: \u201cSome linking of transactions to a common owner is still unavoidable, and could reveal other transactions that belonged to the same owner\u201d While private transactions on Bitcoin network are not fully anonymous, it is our responsibility as individuals to understand why encryption matters for a trustless network to function. Privacy in the digital age requires cryptography. This allows us to reveal our data and identity when desired and only to whom desired. This is the essence of privacy. As the old adage goes: don't trust, verify.","title":"Some first principles"},{"location":"gnupg/#some-basics","text":"Encryption is the process of converting data into secret, incomprehensible code such that only intended parties are capable of understanding the information. The GPG Tools support provides a fantastic rabbit hole to dive deeper into the technicalities of cryptography, hash functions, digital certificates etc. We will cover many of these topics here but with a focus on the tools and application of them using the command line and some basic exercises.","title":"Some basics"},{"location":"gnupg/#how-to-use-gpg-encryption","text":"GPG keys work by using two files, a private key and a public key. These two keys are tied to each other when we generate a keypair, and are both needed for encrypting and decrypting files.","title":"How to use GPG encryption"},{"location":"gnupg/#private-and-public-keys","text":"We use our private key to encrypt a file, folder or text with GPG. This key is what we keep secret and secure FOR YOUR EYES ONLY. This is also the key we use for signing. We then need the paired public key to decrypt the file, folder or text which has been previously encrypted. This key can and should be shared publicly with desired recipients and/or on a public server. This also works in the opposite direction! Other people can use our public key to encrypt a file, folder or text. The only way it can be decrypted in turn is with your private key. In other words, if a file was encrypted with a private key, it can only be decrypted with the corresponding public key. And if a file was encrypted with a public key, it can only be decrypted with the corresponding private key.","title":"Private and Public Keys"},{"location":"gnupg/#installing-the-gpg-suite","text":"The GPG Suite is a fantastic tool for getting started that helps us create, store, export and import private and public keys. We will first start to get familiar with encryption using this GUI application to create and manage our keys and do some basic exercises. Go to the link and follow the download instructions.","title":"Installing the GPG suite"},{"location":"gnupg/#creating-a-new-keypair","text":"When you open up the GPG suite, if you have not created a key before the key creation dialogue will appear. Enter a name and email. Add a strong passphrase. Store your passphrase securely with a password manager. Under advanced options: Use the RSA encryption default option Add if you want the key to expire on a certain date","title":"Creating a New Keypair"},{"location":"gnupg/#uploading-the-key-to-keyserver","text":"After setting up a new key pair GPG will ask you if you want to send your public key to the key server. If you do this will prompt a verification email something like this: The GPG default key server is keys.openpgp.org . Verifying your public key on the key server means anyone can search for your email address on the key server, and find access to your public key. Once the email address is verified your key can be found when others search for your email address on the key server. Search opengpg return mail and public key See more about the Keyserver User Guide","title":"Uploading the key to Keyserver"},{"location":"gnupg/#backup-your-keys","text":"You don't want to loose your keys. Yet it can still happen: drive failures, physical damage to your computer or whatever other disasters may strike. Just like with your Bitcoin seed phrases for your wallet, we highly encourage you to back them up and store them in a secure location. As this will be in a .asc file containing a lot of code which is hard to write down so we recommend using a an encrypted USB stick that you use ONLY for secret key storage. On the GPG Suite select key to backup. You can optionally also backup all keys at once. Click File > Export or press \u2318E to include the secret key enable the Include secret key in exported file option (do this only to transfer your key to another computer or create a backup. NEVER SHARE YOUR SECRET KEY VIA EMAIL OR A CLOUD SERVICE!! Click Save Following defaults a file with the following format Name (keyID) \u2013 Public.asc or Name (keyID) \u2013 Secret.asc in case you opted to also export your secret key will be created See more on GPG key backup and recovery here. Important: If you use the same sec/pub keys on more than one machine, make sure to update or change your keys only on one machine and then always transfer the updated key to your other mac. ## Encrypt your email We highly recommend setting up you email with GPGTools to send, receive and sign encrypted emails with fellow plebs using your GPG keys. This is not in the scope of this encryption 101 class, but follow the above link as GPG makes it super easy to setup on your MacOS mail app.","title":"Backup your keys"},{"location":"gnupg/#importing-public-keys","text":"When we want to communicate or share files using PGP encryption we need the recipient to have access to our public key, and they need to have ours. We can find and import other people's GPG public key from keys.openpgp.org , or straight from the GPG Suite app on the Toolbar has a Lookup Key which searches the public server. When you have a verified email address, you can import it's associated public key. Your GPG Suite will end up looking something like this:","title":"Importing public keys"},{"location":"gnupg/#exporting-public-keys","text":"To share our public key, right click your newly created key and select Export . You can see in the dropdown the various options available. This creates a .asc file which can be exported to your documents or desktop. Beware if you are sharing your public key with others DO NOT check the include secret key box ONLY include the private key to backup your keypair or when you want to export your key pair to another machine that only you access. Here is the public key file that is created and which you can share with your network: Share your public key by uploading the file on the Time Machine Academy discord / gnupg chat. Here you will find other users public keys which you can download and import to your GPG Suite. This now allows you to communicate securely with them, as well as share encrypted files and messages.","title":"Exporting public keys"},{"location":"gnupg/#encrypting-files-or-folders","text":"Right-click the file or folder you want to encrypt in Finder and select Services > OpenPGP: Encrypt File Select recipients whose public keys you already have imported to encrypt the message with their public keys. Notice you can add an optional passphrase required to decrypt the message. If you only want to encrypt for yourself you need to tick the Add to Recipients option in the Your Key: section. Optionally sign the file to ensure it did not get tampered with when decrypting after some time. Click Encrypt A new .gpg file will be created next to the original file, if you do not want to keep the unencrypted file make sure to delete it securely You can now share these files with your chosen recipients securely over a public channel or as an email attachment without fear of snooping eyes.","title":"Encrypting files or folders"},{"location":"gnupg/#managing-your-keys","text":"You can right click on any of the keys in the GPG Suite and that will bring up a bunch of options, including seeing the keys and user IDs. A the very bottom you can set the Owner Trust level in accordance with a chosen address that you have been verifying and interacting with with greater frequency. The default owner trust of an imported public key is Never . ## Verifying signatures ## Using GPG in the command line ## Attaching GPG to your GitHub","title":"Managing your keys"},{"location":"lnbits/lnbits/","text":"LNBits Beginner Workshop Proposed workshop syllabus for timechain.academy Target Audience: Plebs New to lightning and interested in running their own website or store that could accept lightning as tips, online payments or an application that either sends or receives lightning sats. Good for small online businesses, podcasts, blogs, and game developers. Prerequisites: No formal Lightning experience required, however a basic understanding of sending and receiving using Lightning wallets and a wallet with testnet sats required. Some basic understanding of programming in python helpful. Estimated time for a session - ( ~2-3 hrs ) Time for workshop assumes students already have an plebnet instance up. This workshop is partly lecture but also a lot of hands on with running and moving sats around on a LNBits instance, students should be prepared to send/receive lightning using testnet sats. What this workshop will cover: What is LNBits and what does it do? LNBits is a Free and Open source lightning accounting system. Easy to set up and lightweight, LNbits can run on any lightning-network funding source, currently supporting LND, c-lightning, OpenNode, lntxbot, LNPay and even LNbits itself! You can run LNbits for yourself, or easily offer a custodian solution for others. Setting up LNBits on plebnet Ideally workshop participants already have plebnet docker setup If not, they can use a public instance of lnbits to follow along but its live, not testnet LNBits makes uses of Bolt11(Invoice protocol for lightning payments) Review of Bolt 11 Specification before diving in https://github.com/lightning/bolts/blob/master/00-introduction.md Create a new user, core wallet functions Walk through of LNBits features: Each wallet has its own API keys and there is no limit to the number of wallets you can make. Being able to partition funds makes LNbits a useful tool for money management and as a development tool. Brief overview of Extensions Sending and receiving Lightning payments on LNBits Limitations of the LNBits System Some Key Extensions and how they work: (with hands on exercises) User Manager LNURLp LNURLw LndHub (LND only) Some simple Application Extensions: (with hands on exercises) TipJar Paywall Lightning Addresses What are they? How do they work? How can you use Lightning Addresses with LNBits - with Any website - with an extension Getting started with Building Applications on LNBits The LNBits API The pylnbits API library (with hands on exercises) Some configuration options for LNBits (with hands on exercises) Where to go Next LNBits in production Where to get help Q & A session Note : Other workshop ideas: - advanced workshop for building sample production ready applications on LNBits - workshop on LNURL/webLN applications, e.g. lnurl-auth, lightning addresses, webln.dev About the Instructor: @bitkarrot on github and twitter; shadowy super coder contributing to bitcoin and lightning.","title":"LnBits"},{"location":"lnbits/lnbits/#lnbits-beginner-workshop","text":"Proposed workshop syllabus for timechain.academy","title":"LNBits Beginner Workshop"},{"location":"lnbits/lnbits/#target-audience","text":"Plebs New to lightning and interested in running their own website or store that could accept lightning as tips, online payments or an application that either sends or receives lightning sats. Good for small online businesses, podcasts, blogs, and game developers.","title":"Target Audience:"},{"location":"lnbits/lnbits/#prerequisites","text":"No formal Lightning experience required, however a basic understanding of sending and receiving using Lightning wallets and a wallet with testnet sats required. Some basic understanding of programming in python helpful.","title":"Prerequisites:"},{"location":"lnbits/lnbits/#estimated-time-for-a-session-2-3-hrs","text":"Time for workshop assumes students already have an plebnet instance up. This workshop is partly lecture but also a lot of hands on with running and moving sats around on a LNBits instance, students should be prepared to send/receive lightning using testnet sats.","title":"Estimated time for a session - ( ~2-3 hrs )"},{"location":"lnbits/lnbits/#what-this-workshop-will-cover","text":"What is LNBits and what does it do? LNBits is a Free and Open source lightning accounting system. Easy to set up and lightweight, LNbits can run on any lightning-network funding source, currently supporting LND, c-lightning, OpenNode, lntxbot, LNPay and even LNbits itself! You can run LNbits for yourself, or easily offer a custodian solution for others. Setting up LNBits on plebnet Ideally workshop participants already have plebnet docker setup If not, they can use a public instance of lnbits to follow along but its live, not testnet LNBits makes uses of Bolt11(Invoice protocol for lightning payments) Review of Bolt 11 Specification before diving in https://github.com/lightning/bolts/blob/master/00-introduction.md Create a new user, core wallet functions Walk through of LNBits features: Each wallet has its own API keys and there is no limit to the number of wallets you can make. Being able to partition funds makes LNbits a useful tool for money management and as a development tool. Brief overview of Extensions Sending and receiving Lightning payments on LNBits Limitations of the LNBits System Some Key Extensions and how they work: (with hands on exercises) User Manager LNURLp LNURLw LndHub (LND only) Some simple Application Extensions: (with hands on exercises) TipJar Paywall Lightning Addresses What are they? How do they work? How can you use Lightning Addresses with LNBits - with Any website - with an extension Getting started with Building Applications on LNBits The LNBits API The pylnbits API library (with hands on exercises) Some configuration options for LNBits (with hands on exercises) Where to go Next LNBits in production Where to get help Q & A session Note : Other workshop ideas: - advanced workshop for building sample production ready applications on LNBits - workshop on LNURL/webLN applications, e.g. lnurl-auth, lightning addresses, webln.dev","title":"What this workshop will cover:"},{"location":"lnbits/lnbits/#about-the-instructor","text":"@bitkarrot on github and twitter; shadowy super coder contributing to bitcoin and lightning.","title":"About the Instructor:"},{"location":"lnbook/","text":"","title":"Mastering Lighting"},{"location":"playground/","text":"Setting up Plebnet Playground on MacOS Resources: Plebnet Playground Docker Readme Bitcoin Core Bitcoin MacOS Build Guide Plebnet Fun Aim Plebnet Playground is a sandbox environment to help Bitcoin plebs get under the hood with Lightning LND and mess around without using real sats. This brief tutorial is aimed to help noobies setup Plebnet Playground and Bitcoin Core on MacOS in less that hald and hour. CHECK: You can install all of this in a virtual environment if you have one. For simplicity we will be doing this on our everyday admin user account. Nothing in this tutorial should break or interfere with the daily running of your machine. Prerequisites MacOS laptop or desktop running MacOS Mojave or above. We have not tested on earlier versions. I am using MacOS Catalina 10.15 but this process is compatible with later versions as well. ? are there any known compatability issues with newest M1 chips vs Intel?? The Xcode Command Line Tools are a collection of build tools for macOS. These tools must be installed in order to build Bitcoin Core from source. More about that here . To install, run the following command from your terminal: xcode-select --install You will need a Github account. If you haven't got one, set one up. We will use the git version control to fork and clone both Bitcoin Core and Plebnet Playground onto our local machine. NOTE: If you are not familiar with Git yet, don't worry, there is another lesson on this. For the moment just think of it as a version control protocol that allows you to copy a version of the source code onto your local machine to then compile and run it locally. Plebnet Playground runs on Docker which is an open-source platform used for developing, deploying, and managing applications in lightweight virtual environments called containers. The default Terminal that runs either bash or zsh and the Homebrew Package manager. Using the Command Line This tutorial asumes basic to no experience using the Command Line. If this freaks you out DO NOT WORRY , follow the steps and you will slowly become familiar with using basic commands, installing the necessary dependencies to run Plebnet Playground and getting under the hood running Bitcoin Core on your machine. If you are familiar with CLI already bare with us. If you haven't already, install Homebrew Package manager . Homebrew helps install packages to their own directory and then symlinks their files into /usr/local (on macOS Intel). Homebrew makes it super easy and safe to install and uninstall open source software dependencies compatible with Linux. /bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\" If you haven't already, make sure you have git installed: brew install git Once installed you can use brew info git to confirm the version of git you are using: We are also going to need Python 3 installed. Python is a programming language. If you are already managing different python versions consider using Pyenv to manage these, alternatively: brew install python@3 check the Python version: python --version ...and you should see something like: Now we will install GNU Make is a tool which will allow us to build and compile our package source code locally. brew install make Finally let's install Docker. We could do this straight from the website, but we are now command line ninjas and just need a couple of brewskies: brew install docker-compose followed by: brew install --cask docker Now we're ready to rock and roll forking our code from Github. Forking repositories We are going to use Github to \"fork\" or copy the latest version of the Bitcoin Core and the Plebnet Playground Docker repositories. Enter your Github and follow the links to both accounts. Bitcoin Plebnet Playground Click on the fork button to fork the original repositories into your own Github account. It will ask you to name the new fork, but you can keep the default name. Here is what my Github looks like below. You should see both forks under your remote Repositories tab. Git cloning repositories We are now going to use the git clone command to yes, clone the version you just forked onto your Github, onto to your local machine. Github conveniantly gives you an easy way to copy the comand straight to your terminal. Enter your forked Github repostiory and find the green Code button. On the drop down you will see options to clone. Unless you already have SSH setup with your Github (Github class) Copy the one under HTTPS. In your Terminal first lets create a new directory in Documents and call it Github. You can do this in the Finder, alternatively type: cd ~/Documents mkdir Github cd ~/Documents/Github Now type: git clone and then paste or CMD + V the address you just copied. It should look like this only addressed to your own Github: git clone https://github.com/addyourgithubhere/bitcoin.git Now lets do the same for the same for the Plebnet Playground repo. NOTE: Make sure you are actually inside the directory you want to clone into. git clone https://github.com/addyourgithubhere/plebnet-playground-docker.git Now you should see in your Finder window the two cloned repositories something like this: Pretty cool huh. Git Checkout Now for the the Bitcoin clone we want to check out that the version we have downloaded can be verified with the latest released commit. We do this by going into the Bitcoin/bitcoin original repo, scroll down to the bottom right Releases > Latest This brings up Bitcoin Core 23.0 as of time of writing, and on the subheading we can see a hash on the right which begins with fcf6c8 Click on this and we can see the commit hash on the right: fcf6c8f4eb217763545ede1766831a6b93f583bd Lets copy this and go back to Terminal and type: git checkout fcf6c8f4eb217763545ede1766831a6b93f583bd This will report back to us: You are in 'detached HEAD' state. You can look around, make experimental changes and commit them, and you can discard any commits you make in this state without impacting any branches by switching back to a branch. This confirms we are indeed using the latest commit. Building Plebnet Docker Now we are going to build and compile the code base of the Plebnet Playground Docker. See here for the Github README documentation. Enter the directory where the plebnet-playground-docker has been cloned. cd ~/Documents/Github/plebnet-playground-docker Now let's compile: make init NOTE: If our other dependencies have not been yet installed this will fail as it will require a version of python 3 and docker to work. This can be done via make build or make initialize . See other make commands using just typing make . Install and start all services ./install.sh Builiding Bitcoin Core Enter the directory where the bitcoin repository has been cloned. See MacOs Bitcoin Buildguide . I reccomend reading through this to usnderstand the various dependencies and options available. We will go with a bare bones simple compiliation. The first step is to download the required dependencies. These dependencies represent the packages required to get a bare bones installation up and running. brew install automake libtool boost pkg-config libevent NOTE: These are 5 different dependencies which we are installing in one brew command. Awesome! Also we will AVOID installing berkeley-db@4 dependency because we do not need support for legacy wallets. Bitcoin Core includes a GUI built with the cross-platform Qt Framework. To compile the GUI, we need to install qt@5. brew install qt@5 Configuration There are various ways to configure Bitcoin core, but we will be doing the bare minimal as we don't require legacy support. ./autogen.sh Now we add some configuration options to disable tests and other stuff. ./configure --disable-tests --disable-man --disable-bench --without-bdb Again db@4 is only required to support for legacy wallets, which we don't need thus --without-bdb Compiling Now lets compile Bitcoin Core: make Now: ./src/bitcoind -conf=/Users/$(whoami)/Documents/GitHub/plebnet-playground-docker/bitcoin-signet/bitcoin.conf !!! Would like to break down what this command does. We did not make and empty configuration file like in the instructions !! This will take a while to compile so be patient. Launching Plebnet From within the plebnet repo we can start to run the play commands: play play-bitcoin play-bitcoin gettxoutsetinfo play-bitcoin-iftop docker ps To start the docker we can use: This will prompt Docker Desktop to request priviledged access: Docker Desktop will start up: play-lnd play-lnd newaddress tb1q0yfkqcs384w3hlq8ksgzcgcxq9dmyydg9h9unr play-getcoins play-lnd walletbalance play-bitcoin netinfo 5 Ride The Lightning Baby RTL will at http://localhost:3000 the default password is password and it will ask you to change this on first login. open http://localhost:3000","title":"More"},{"location":"playground/#setting-up-plebnet-playground-on-macos","text":"","title":"Setting up Plebnet Playground on MacOS"},{"location":"playground/#resources","text":"Plebnet Playground Docker Readme Bitcoin Core Bitcoin MacOS Build Guide Plebnet Fun","title":"Resources:"},{"location":"playground/#aim","text":"Plebnet Playground is a sandbox environment to help Bitcoin plebs get under the hood with Lightning LND and mess around without using real sats. This brief tutorial is aimed to help noobies setup Plebnet Playground and Bitcoin Core on MacOS in less that hald and hour. CHECK: You can install all of this in a virtual environment if you have one. For simplicity we will be doing this on our everyday admin user account. Nothing in this tutorial should break or interfere with the daily running of your machine.","title":"Aim"},{"location":"playground/#prerequisites","text":"MacOS laptop or desktop running MacOS Mojave or above. We have not tested on earlier versions. I am using MacOS Catalina 10.15 but this process is compatible with later versions as well. ? are there any known compatability issues with newest M1 chips vs Intel?? The Xcode Command Line Tools are a collection of build tools for macOS. These tools must be installed in order to build Bitcoin Core from source. More about that here . To install, run the following command from your terminal: xcode-select --install You will need a Github account. If you haven't got one, set one up. We will use the git version control to fork and clone both Bitcoin Core and Plebnet Playground onto our local machine. NOTE: If you are not familiar with Git yet, don't worry, there is another lesson on this. For the moment just think of it as a version control protocol that allows you to copy a version of the source code onto your local machine to then compile and run it locally. Plebnet Playground runs on Docker which is an open-source platform used for developing, deploying, and managing applications in lightweight virtual environments called containers. The default Terminal that runs either bash or zsh and the Homebrew Package manager.","title":"Prerequisites"},{"location":"playground/#using-the-command-line","text":"This tutorial asumes basic to no experience using the Command Line. If this freaks you out DO NOT WORRY , follow the steps and you will slowly become familiar with using basic commands, installing the necessary dependencies to run Plebnet Playground and getting under the hood running Bitcoin Core on your machine. If you are familiar with CLI already bare with us. If you haven't already, install Homebrew Package manager . Homebrew helps install packages to their own directory and then symlinks their files into /usr/local (on macOS Intel). Homebrew makes it super easy and safe to install and uninstall open source software dependencies compatible with Linux. /bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\" If you haven't already, make sure you have git installed: brew install git Once installed you can use brew info git to confirm the version of git you are using: We are also going to need Python 3 installed. Python is a programming language. If you are already managing different python versions consider using Pyenv to manage these, alternatively: brew install python@3 check the Python version: python --version ...and you should see something like: Now we will install GNU Make is a tool which will allow us to build and compile our package source code locally. brew install make Finally let's install Docker. We could do this straight from the website, but we are now command line ninjas and just need a couple of brewskies: brew install docker-compose followed by: brew install --cask docker Now we're ready to rock and roll forking our code from Github.","title":"Using the Command Line"},{"location":"playground/#forking-repositories","text":"We are going to use Github to \"fork\" or copy the latest version of the Bitcoin Core and the Plebnet Playground Docker repositories. Enter your Github and follow the links to both accounts. Bitcoin Plebnet Playground Click on the fork button to fork the original repositories into your own Github account. It will ask you to name the new fork, but you can keep the default name. Here is what my Github looks like below. You should see both forks under your remote Repositories tab.","title":"Forking repositories"},{"location":"playground/#git-cloning-repositories","text":"We are now going to use the git clone command to yes, clone the version you just forked onto your Github, onto to your local machine. Github conveniantly gives you an easy way to copy the comand straight to your terminal. Enter your forked Github repostiory and find the green Code button. On the drop down you will see options to clone. Unless you already have SSH setup with your Github (Github class) Copy the one under HTTPS. In your Terminal first lets create a new directory in Documents and call it Github. You can do this in the Finder, alternatively type: cd ~/Documents mkdir Github cd ~/Documents/Github Now type: git clone and then paste or CMD + V the address you just copied. It should look like this only addressed to your own Github: git clone https://github.com/addyourgithubhere/bitcoin.git Now lets do the same for the same for the Plebnet Playground repo. NOTE: Make sure you are actually inside the directory you want to clone into. git clone https://github.com/addyourgithubhere/plebnet-playground-docker.git Now you should see in your Finder window the two cloned repositories something like this: Pretty cool huh.","title":"Git cloning repositories"},{"location":"playground/#git-checkout","text":"Now for the the Bitcoin clone we want to check out that the version we have downloaded can be verified with the latest released commit. We do this by going into the Bitcoin/bitcoin original repo, scroll down to the bottom right Releases > Latest This brings up Bitcoin Core 23.0 as of time of writing, and on the subheading we can see a hash on the right which begins with fcf6c8 Click on this and we can see the commit hash on the right: fcf6c8f4eb217763545ede1766831a6b93f583bd Lets copy this and go back to Terminal and type: git checkout fcf6c8f4eb217763545ede1766831a6b93f583bd This will report back to us: You are in 'detached HEAD' state. You can look around, make experimental changes and commit them, and you can discard any commits you make in this state without impacting any branches by switching back to a branch. This confirms we are indeed using the latest commit.","title":"Git Checkout"},{"location":"playground/#building-plebnet-docker","text":"Now we are going to build and compile the code base of the Plebnet Playground Docker. See here for the Github README documentation. Enter the directory where the plebnet-playground-docker has been cloned. cd ~/Documents/Github/plebnet-playground-docker Now let's compile: make init NOTE: If our other dependencies have not been yet installed this will fail as it will require a version of python 3 and docker to work. This can be done via make build or make initialize . See other make commands using just typing make .","title":"Building Plebnet Docker"},{"location":"playground/#install-and-start-all-services","text":"./install.sh","title":"Install and start all services"},{"location":"playground/#builiding-bitcoin-core","text":"Enter the directory where the bitcoin repository has been cloned. See MacOs Bitcoin Buildguide . I reccomend reading through this to usnderstand the various dependencies and options available. We will go with a bare bones simple compiliation. The first step is to download the required dependencies. These dependencies represent the packages required to get a bare bones installation up and running. brew install automake libtool boost pkg-config libevent NOTE: These are 5 different dependencies which we are installing in one brew command. Awesome! Also we will AVOID installing berkeley-db@4 dependency because we do not need support for legacy wallets. Bitcoin Core includes a GUI built with the cross-platform Qt Framework. To compile the GUI, we need to install qt@5. brew install qt@5","title":"Builiding Bitcoin Core"},{"location":"playground/#configuration","text":"There are various ways to configure Bitcoin core, but we will be doing the bare minimal as we don't require legacy support. ./autogen.sh Now we add some configuration options to disable tests and other stuff. ./configure --disable-tests --disable-man --disable-bench --without-bdb Again db@4 is only required to support for legacy wallets, which we don't need thus --without-bdb","title":"Configuration"},{"location":"playground/#compiling","text":"Now lets compile Bitcoin Core: make Now: ./src/bitcoind -conf=/Users/$(whoami)/Documents/GitHub/plebnet-playground-docker/bitcoin-signet/bitcoin.conf !!! Would like to break down what this command does. We did not make and empty configuration file like in the instructions !! This will take a while to compile so be patient.","title":"Compiling"},{"location":"playground/#launching-plebnet","text":"From within the plebnet repo we can start to run the play commands: play play-bitcoin play-bitcoin gettxoutsetinfo play-bitcoin-iftop docker ps To start the docker we can use: This will prompt Docker Desktop to request priviledged access: Docker Desktop will start up: play-lnd play-lnd newaddress tb1q0yfkqcs384w3hlq8ksgzcgcxq9dmyydg9h9unr play-getcoins play-lnd walletbalance play-bitcoin netinfo 5","title":"Launching Plebnet"},{"location":"playground/#ride-the-lightning-baby","text":"RTL will at http://localhost:3000 the default password is password and it will ask you to change this on first login. open http://localhost:3000","title":"Ride The Lightning Baby"},{"location":"playground/docker/","text":"Plebnet Playground Sandbox Docker Package This package will setup a bitcoind, lnd, and tor daemon that will connect to the Plebnet Playground Sandbox (Signet) Chain. This allows users to use and test bitcoin and lightning technologies without the financial risk involved with running on the mainnet chain. RTL (Ride The Lightning) and ThunderHub Web UI is also include to provide a more user friendly experience. Donate to Project Crowdfund for Playground + Plebnet.wiki running costs Direct Donation to Xenonfun Notes Package currently on works/tested on x64 Linux (Ubuntu specifically) All data for containers are bind mapped into volumes/ directory inside the clone repo for ease of editing them. Bitcoind is not using tor, simply because it takes much longer to sync the chain, and while testing this slows me down. The playground signet chain is only around 1MB at time of writing, and takes my machine ~15 seconds to be fully synced clearnet, via tor it is taking minutes. You will need to setup LND wallet from scratch, instructions below PM @xenonfun on Telegram to get access to the Plebnet Playground Telegram group All ports are completely exposed to local host, this is mostly to make it easy for end-users to tinker, and as the signet coins in the playground are worthless so there is little risk of hacking. You can modify the docker-compose.yaml should these cause conflicts. For Windows users you will need to use something like git bash until we make some powershell scripts to provide cleaner functionality Basic Setup Clone Repo & Install Requirements git clone https://github.com/PLEBNET-PLAYGROUND/plebnet-playground-docker --config core.autocrlf=input cd plebnet-playground-docker pip3 install -r requirements.txt Supported System Architectures Architecture TRIPLET build-arg Intel x64 x86_64-linux-gnu OSX 64-bit aarch64-linux-gnu ARM64 linux aarch64-linux-gnu Services Service Description bitcoind Bitcoin Core Daemon lnd Lightning Labs LND Daemon tor tor network daemon rtl Ride The Lightning Daemon thunderhub Thunderhub Lightning UI docs MKDocs documentation notebook Jupyter Notebook environment setup for lightning development dashboard Jupyter Dashboard lndg lndg Dashboard (available on port 8889) Install and start all services (Intel x64 example) TRIPLET=x86_64-linux-gnu ./install.sh Install and start just the bitcoind , lnd services (comma separate them) TRIPLET=x86_64-linux-gnu services=bitcoind,lnd ./install.sh Start containers docker-compose up -d Stop containers docker-compose stop Full removal of Plebnet Playground (this deletes all data out of volumes directory) ./uninstall.sh Make Command Ubuntu Linux apt install make MacOS Change default shell to bash cat /etc/shells chsh -s /bin/bash Install Homebrew /bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\" brew install make docker-compose brew install --cask docker open /Applications/Docker.app Play Command make make init make install && play help Aliases alias lncli='docker exec -it playground-lnd lncli --macaroonpath /root/.lnd/data/chain/bitcoin/signet/admin.macaroon ' alias change-password-playground='docker exec -it playground-lnd lncli --macaroonpath /root/.lnd/data/chain/bitcoin/signet/admin.macaroon changepassword' alias connect-playground='docker exec -it playground-lnd lncli --macaroonpath /root/.lnd/data/chain/bitcoin/signet/admin.macaroon connect 03ee9d906caa8e8e66fe97d7a76c2bd9806813b0b0f1cee8b9d03904b538f53c4e@104.131.10.218:9735' alias logs-bitcoind='docker logs playground-bitcoind' alias logs-lnd='docker logs playground-lnd' alias logs-tor='docker logs playground-tor' alias logs-rtl='docker logs playground-rtl' alias logs-thub='docker logs playground-thub' alias restart-bitcoind='docker restart playground-bitcoind' alias restart-lnd='docker restart playground-lnd' alias restart-tor='docker restart playground-tor' alias restart-rtl='docker restart playground-rtl' alias restart-thub='docker restart playground-thub' alias bos=\"docker run -it --rm -v $PWD/volumes/bos_datadir:/home/node/.bos:rw --network plebnet-playground-docker_default alexbosworth/balanceofsatoshis\" Your first playground LND wallet The wallet will automatically be made for you and use the default password is 12345678 You can change the password with the change-password-playground alias. If you do change your password make sure to update the unlock.password file with your new password. Make your first peer with the seed node for Plebnet Playground Signet connect-playground Now you should get some gossip about the network and be able to run something like this lncli describegraph | jq .nodes[] | grep \"alias\" and see a list of the various node aliases on the network FYI, your alias is not set in default configuration to avoid confusion, go ahead and edit your lnd.conf and make an alias=YourNewAliasName parameter and restart the container. Get into the telegram group and ask for some playground signet coins and go wild. Get some coins Install requirements pip3 install -r requirements.txt Run the ./getcoins.py script and you will get 1tBTC put into your lightning on-chain wallet. RTL Setup RTL will at http://localhost:3000 , the default password is password and it will ask you to change this on first login. ThunderHub Setup ThunderHub will at at http://localhost:3001 , the default password is password . You can change that by editing the volumes/thub_datadir/thubConfig.yaml . Change masterPassword: thunderhub-$2a$12$oRzmFZSOmvYv1heHkU053uv0a1tX9MXNqmcMpZs2hQ0t8k1Onnk1a to masterPassword: mynewpassword . Then restart thunderhub using alias restart-thub . The masterPassword entry should automatically be converted to the hashed version of the password. How to setup Balance of Satoshis (BOS) You may install bos only after you have generated an lnd wallet with create-lnd-wallet . sudo python3 ./install_bos.py If you created the bos alias above, you should be good to go bos --version 10.9.2 How to setup plebnet dashboard The interactive dashboard is an experimental visualization engine for viewing the lightning network. If you used the docker-compose up -d command above, then the dashboard will run on http://localhost:8050 By default only the playground nodes are visualized. However, you can also visualize real lightning network data by placing a describegraph.json file in the repo's dashboard/ directory, then restart the dashboard setting environment variable USE_TEST_DATA=TRUE : USE_TEST_DATA=TRUE docker-compose up dashboard Additional reference material Links Plebnet Wiki Bitcoin Wiki Lightning Wiki Plebnet Telegram Contributors Richard Safier Nan Liu Lamar Wilson @Exfrog @stflowstate John Doe @rafgxyz @asherp @RandyMcMillan @nitesh_btc","title":"Index"},{"location":"playground/docker/#plebnet-playground-sandbox-docker-package","text":"This package will setup a bitcoind, lnd, and tor daemon that will connect to the Plebnet Playground Sandbox (Signet) Chain. This allows users to use and test bitcoin and lightning technologies without the financial risk involved with running on the mainnet chain. RTL (Ride The Lightning) and ThunderHub Web UI is also include to provide a more user friendly experience.","title":"Plebnet Playground Sandbox Docker Package"},{"location":"playground/docker/#donate-to-project","text":"Crowdfund for Playground + Plebnet.wiki running costs Direct Donation to Xenonfun","title":"Donate to Project"},{"location":"playground/docker/#notes","text":"Package currently on works/tested on x64 Linux (Ubuntu specifically) All data for containers are bind mapped into volumes/ directory inside the clone repo for ease of editing them. Bitcoind is not using tor, simply because it takes much longer to sync the chain, and while testing this slows me down. The playground signet chain is only around 1MB at time of writing, and takes my machine ~15 seconds to be fully synced clearnet, via tor it is taking minutes. You will need to setup LND wallet from scratch, instructions below PM @xenonfun on Telegram to get access to the Plebnet Playground Telegram group All ports are completely exposed to local host, this is mostly to make it easy for end-users to tinker, and as the signet coins in the playground are worthless so there is little risk of hacking. You can modify the docker-compose.yaml should these cause conflicts. For Windows users you will need to use something like git bash until we make some powershell scripts to provide cleaner functionality","title":"Notes"},{"location":"playground/docker/#basic-setup","text":"","title":"Basic Setup"},{"location":"playground/docker/#clone-repo-install-requirements","text":"git clone https://github.com/PLEBNET-PLAYGROUND/plebnet-playground-docker --config core.autocrlf=input cd plebnet-playground-docker pip3 install -r requirements.txt","title":"Clone Repo &amp; Install Requirements"},{"location":"playground/docker/#supported-system-architectures","text":"Architecture TRIPLET build-arg Intel x64 x86_64-linux-gnu OSX 64-bit aarch64-linux-gnu ARM64 linux aarch64-linux-gnu","title":"Supported System Architectures"},{"location":"playground/docker/#services","text":"Service Description bitcoind Bitcoin Core Daemon lnd Lightning Labs LND Daemon tor tor network daemon rtl Ride The Lightning Daemon thunderhub Thunderhub Lightning UI docs MKDocs documentation notebook Jupyter Notebook environment setup for lightning development dashboard Jupyter Dashboard lndg lndg Dashboard (available on port 8889)","title":"Services"},{"location":"playground/docker/#install-and-start-all-services-intel-x64-example","text":"TRIPLET=x86_64-linux-gnu ./install.sh","title":"Install and start all services (Intel x64 example)"},{"location":"playground/docker/#install-and-start-just-the-bitcoindlnd-services-comma-separate-them","text":"TRIPLET=x86_64-linux-gnu services=bitcoind,lnd ./install.sh","title":"Install and start just the bitcoind,lnd services (comma separate them)"},{"location":"playground/docker/#start-containers","text":"docker-compose up -d","title":"Start containers"},{"location":"playground/docker/#stop-containers","text":"docker-compose stop","title":"Stop containers"},{"location":"playground/docker/#full-removal-of-plebnet-playground-this-deletes-all-data-out-of-volumes-directory","text":"./uninstall.sh","title":"Full removal of Plebnet Playground (this deletes all data out of volumes directory)"},{"location":"playground/docker/#make-command","text":"","title":"Make Command"},{"location":"playground/docker/#ubuntu-linux","text":"apt install make","title":"Ubuntu Linux"},{"location":"playground/docker/#macos","text":"","title":"MacOS"},{"location":"playground/docker/#change-default-shell-to-bash","text":"cat /etc/shells chsh -s /bin/bash","title":"Change default shell to bash"},{"location":"playground/docker/#install-homebrew","text":"/bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\" brew install make docker-compose brew install --cask docker open /Applications/Docker.app","title":"Install Homebrew"},{"location":"playground/docker/#play-command","text":"make make init make install && play help","title":"Play Command"},{"location":"playground/docker/#aliases","text":"alias lncli='docker exec -it playground-lnd lncli --macaroonpath /root/.lnd/data/chain/bitcoin/signet/admin.macaroon ' alias change-password-playground='docker exec -it playground-lnd lncli --macaroonpath /root/.lnd/data/chain/bitcoin/signet/admin.macaroon changepassword' alias connect-playground='docker exec -it playground-lnd lncli --macaroonpath /root/.lnd/data/chain/bitcoin/signet/admin.macaroon connect 03ee9d906caa8e8e66fe97d7a76c2bd9806813b0b0f1cee8b9d03904b538f53c4e@104.131.10.218:9735' alias logs-bitcoind='docker logs playground-bitcoind' alias logs-lnd='docker logs playground-lnd' alias logs-tor='docker logs playground-tor' alias logs-rtl='docker logs playground-rtl' alias logs-thub='docker logs playground-thub' alias restart-bitcoind='docker restart playground-bitcoind' alias restart-lnd='docker restart playground-lnd' alias restart-tor='docker restart playground-tor' alias restart-rtl='docker restart playground-rtl' alias restart-thub='docker restart playground-thub' alias bos=\"docker run -it --rm -v $PWD/volumes/bos_datadir:/home/node/.bos:rw --network plebnet-playground-docker_default alexbosworth/balanceofsatoshis\"","title":"Aliases"},{"location":"playground/docker/#your-first-playground-lnd-wallet","text":"The wallet will automatically be made for you and use the default password is 12345678 You can change the password with the change-password-playground alias. If you do change your password make sure to update the unlock.password file with your new password.","title":"Your first playground LND wallet"},{"location":"playground/docker/#make-your-first-peer-with-the-seed-node-for-plebnet-playground-signet","text":"connect-playground Now you should get some gossip about the network and be able to run something like this lncli describegraph | jq .nodes[] | grep \"alias\" and see a list of the various node aliases on the network FYI, your alias is not set in default configuration to avoid confusion, go ahead and edit your lnd.conf and make an alias=YourNewAliasName parameter and restart the container. Get into the telegram group and ask for some playground signet coins and go wild.","title":"Make your first peer with the seed node for Plebnet Playground Signet"},{"location":"playground/docker/#get-some-coins","text":"Install requirements pip3 install -r requirements.txt Run the ./getcoins.py script and you will get 1tBTC put into your lightning on-chain wallet.","title":"Get some coins"},{"location":"playground/docker/#rtl-setup","text":"RTL will at http://localhost:3000 , the default password is password and it will ask you to change this on first login.","title":"RTL Setup"},{"location":"playground/docker/#thunderhub-setup","text":"ThunderHub will at at http://localhost:3001 , the default password is password . You can change that by editing the volumes/thub_datadir/thubConfig.yaml . Change masterPassword: thunderhub-$2a$12$oRzmFZSOmvYv1heHkU053uv0a1tX9MXNqmcMpZs2hQ0t8k1Onnk1a to masterPassword: mynewpassword . Then restart thunderhub using alias restart-thub . The masterPassword entry should automatically be converted to the hashed version of the password.","title":"ThunderHub Setup"},{"location":"playground/docker/#how-to-setup-balance-of-satoshis-bos","text":"You may install bos only after you have generated an lnd wallet with create-lnd-wallet . sudo python3 ./install_bos.py If you created the bos alias above, you should be good to go bos --version 10.9.2","title":"How to setup Balance of Satoshis (BOS)"},{"location":"playground/docker/#how-to-setup-plebnet-dashboard","text":"The interactive dashboard is an experimental visualization engine for viewing the lightning network. If you used the docker-compose up -d command above, then the dashboard will run on http://localhost:8050 By default only the playground nodes are visualized. However, you can also visualize real lightning network data by placing a describegraph.json file in the repo's dashboard/ directory, then restart the dashboard setting environment variable USE_TEST_DATA=TRUE : USE_TEST_DATA=TRUE docker-compose up dashboard","title":"How to setup plebnet dashboard"},{"location":"playground/docker/#additional-reference-material","text":"","title":"Additional reference material"},{"location":"playground/docker/#links","text":"Plebnet Wiki Bitcoin Wiki Lightning Wiki Plebnet Telegram","title":"Links"},{"location":"playground/docker/#contributors","text":"Richard Safier Nan Liu Lamar Wilson @Exfrog @stflowstate John Doe @rafgxyz @asherp @RandyMcMillan @nitesh_btc","title":"Contributors"},{"location":"playground/docker/MAKE/","text":"MAKE COMMAND [USAGE]: make [COMMAND] [EXTRA_ARGUMENTS] make make help print help make report print environment variables make initialize install dependencies make init initialize basic dependencies make build make build para=true parallelized build make install make run nocache=true verbose=true [DEV ENVIRONMENT]: make signin profile=gh-user ~/GH_TOKEN.txt required from github.com make build make package-all make install-python38-sh make install-python39-sh [EXAMPLES]: make run nocache=true verbose=true make init && play help","title":"make"},{"location":"playground/docker/MAKE/#make-command","text":"[USAGE]: make [COMMAND] [EXTRA_ARGUMENTS] make make help print help make report print environment variables make initialize install dependencies make init initialize basic dependencies make build make build para=true parallelized build make install make run nocache=true verbose=true [DEV ENVIRONMENT]: make signin profile=gh-user ~/GH_TOKEN.txt required from github.com make build make package-all make install-python38-sh make install-python39-sh [EXAMPLES]: make run nocache=true verbose=true make init && play help","title":"MAKE COMMAND"},{"location":"playground/docker/PLAY/","text":"PLAY COMMAND play ids play top play shell play start play stop play iftop play ifconfig play newaddress play total-balance play confirmed-balance play unconfirmed-balance play lncli -n signet walletbalance play tor-iftop Examples: play bitcoin id play bitcoin iftop play bitcoin netinfo 5 play bitcoin gettxoutsetinfo play bitcoin getmininginfo play bitcoin '<COMMAND>' play bitcoin 'bitcoin-cli getblockhash 1000' play bitcoin 'bitcoin-cli getblock $(bitcoin-cli getblockhash 0)' play lnd play lnd id play lnd top play lnd info play lnd ifconfig play lnd newaddress play lnd total-balance play lnd '<COMMAND>' play-lnd balance","title":"play"},{"location":"playground/docker/PLAY/#play-command","text":"play ids play top play shell play start play stop play iftop play ifconfig play newaddress play total-balance play confirmed-balance play unconfirmed-balance play lncli -n signet walletbalance play tor-iftop Examples: play bitcoin id play bitcoin iftop play bitcoin netinfo 5 play bitcoin gettxoutsetinfo play bitcoin getmininginfo play bitcoin '<COMMAND>' play bitcoin 'bitcoin-cli getblockhash 1000' play bitcoin 'bitcoin-cli getblock $(bitcoin-cli getblockhash 0)' play lnd play lnd id play lnd top play lnd info play lnd ifconfig play lnd newaddress play lnd total-balance play lnd '<COMMAND>' play-lnd balance","title":"PLAY COMMAND"},{"location":"qt/","text":"Notes: QtWebEngine Installing dependencies on Ubuntu sudo apt-get install bison build-essential gperf flex python2 libasound2-dev \\ libcups2-dev libdrm-dev libegl1-mesa-dev libnss3-dev libpci-dev libpulse-dev libudev-dev nodejs \\ libxtst-dev gyp ninja-build Installing additional dependencies on Ubuntu 20.04+ (To save a bit time compiling the bundled variants from qtwebengine.git) sudo apt-get install libssl-dev libxcursor-dev libxcomposite-dev libxdamage-dev libxrandr-dev \\ libfontconfig1-dev libxss-dev libsrtp0-dev libwebp-dev libjsoncpp-dev libopus-dev libminizip-dev \\ libavutil-dev libavformat-dev libavcodec-dev libevent-dev libvpx-dev libsnappy-dev libre2-dev libprotobuf-dev protobuf-compiler","title":"Qt"},{"location":"qt/#notes-qtwebengine","text":"","title":"Notes: QtWebEngine"},{"location":"qt/#installing-dependencies-on-ubuntu","text":"sudo apt-get install bison build-essential gperf flex python2 libasound2-dev \\ libcups2-dev libdrm-dev libegl1-mesa-dev libnss3-dev libpci-dev libpulse-dev libudev-dev nodejs \\ libxtst-dev gyp ninja-build","title":"Installing dependencies on Ubuntu"},{"location":"qt/#installing-additional-dependencies-on-ubuntu-2004","text":"","title":"Installing additional dependencies on Ubuntu 20.04+"},{"location":"qt/#to-save-a-bit-time-compiling-the-bundled-variants-from-qtwebenginegit","text":"sudo apt-get install libssl-dev libxcursor-dev libxcomposite-dev libxdamage-dev libxrandr-dev \\ libfontconfig1-dev libxss-dev libsrtp0-dev libwebp-dev libjsoncpp-dev libopus-dev libminizip-dev \\ libavutil-dev libavformat-dev libavcodec-dev libevent-dev libvpx-dev libsnappy-dev libre2-dev libprotobuf-dev protobuf-compiler","title":"(To save a bit time compiling the bundled variants from qtwebengine.git)"}]}